<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Note down something</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.pirrla.cn/"/>
  <updated>2017-12-19T08:39:55.000Z</updated>
  <id>http://www.pirrla.cn/</id>
  
  <author>
    <name>Alan Wong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jenkins学习笔记2</title>
    <link href="http://www.pirrla.cn/2017/12/18/jenkins/jenkins2/"/>
    <id>http://www.pirrla.cn/2017/12/18/jenkins/jenkins2/</id>
    <published>2017-12-17T16:00:00.000Z</published>
    <updated>2017-12-19T08:39:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-代码质量管理"><a href="#1-代码质量管理" class="headerlink" title="1.代码质量管理"></a>1.代码质量管理</h3><p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins1.png" alt=""></p>
<p>此次代码质量管理的需求，是在用户将本地的代码提交到远程仓库前，进行代码质量分析。</p>
<p>如果代码质量，此处的代码质量不单单指有无拼写错误、格式错误等，还包括代码重复率、</p>
<p>参考资料：</p>
<p>1.<a href="https://docs.sonarqube.org/display/PLUG/GitHub+Plugin" target="_blank" rel="external">Github Plugin for Sonar</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-代码质量管理&quot;&gt;&lt;a href=&quot;#1-代码质量管理&quot; class=&quot;headerlink&quot; title=&quot;1.代码质量管理&quot;&gt;&lt;/a&gt;1.代码质量管理&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ondsf10qe.bkt.clouddn.com/jen
    
    </summary>
    
      <category term="jenkins" scheme="http://www.pirrla.cn/categories/jenkins/"/>
    
    
      <category term="jenkins" scheme="http://www.pirrla.cn/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins学习笔记3-重启Node.js服务</title>
    <link href="http://www.pirrla.cn/2017/12/18/jenkins/jenkins3/"/>
    <id>http://www.pirrla.cn/2017/12/18/jenkins/jenkins3/</id>
    <published>2017-12-17T16:00:00.000Z</published>
    <updated>2017-12-20T01:00:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在之前的文章已经完成了当github上python代码有新的push操作之后，jenkins会自动pull最新的代码，并进行编译执行。因为python代码不能体现服务的持续展现，所以我们现在选择一个网站的node.js页面进行尝试。</p>
<h3 id="1-项目代码简介"><a href="#1-项目代码简介" class="headerlink" title="1.项目代码简介"></a>1.项目代码简介</h3><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>对于网页项目，还有许多的流程可以持续发布。</p>
<h5 id="1-可以部署多个浏览器环境进行测试："><a href="#1-可以部署多个浏览器环境进行测试：" class="headerlink" title="1.可以部署多个浏览器环境进行测试："></a>1.可以部署多个浏览器环境进行测试：</h5><p>在网站的上线之前，可以部署一些浏览器测试环境，例如Firefox,IE,Safari等等的不同环境，当全部环境通过测试之后，才发布，提高了产品的容错性。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在之前的文章已经完成了当github上python代码有新的push操作之后，jenkins会自动pull最新的代码，并进行编译执行。因为python代码不能体现服务的持续展现，所以我们现在选择一个网站的node.js页面进行尝试。&lt;/p&gt;
&lt;h3 id=&quot;1-项目代码
    
    </summary>
    
      <category term="jenkins" scheme="http://www.pirrla.cn/categories/jenkins/"/>
    
    
      <category term="jenkins" scheme="http://www.pirrla.cn/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins学习笔记1-Jenkins入门</title>
    <link href="http://www.pirrla.cn/2017/12/18/jenkins/jenkins1/"/>
    <id>http://www.pirrla.cn/2017/12/18/jenkins/jenkins1/</id>
    <published>2017-12-17T16:00:00.000Z</published>
    <updated>2017-12-20T01:02:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-敏捷开发"><a href="#1-敏捷开发" class="headerlink" title="1.敏捷开发"></a>1.敏捷开发</h3><p>普通的程序开发，是按照瀑布流一样的流程往下走的。</p>
<p>但是时至今日，客户的需求变化速度非常之快，而且生产环境也在不断变化，所以以往的单一的以计划来完成软件开发已经不可取了。</p>
<p>所以我们需要采取敏捷开发，<em>*</em></p>
<h3 id="2-Jenkins入门"><a href="#2-Jenkins入门" class="headerlink" title="2.Jenkins入门"></a>2.Jenkins入门</h3><h5 id="2-1Jenkins安装"><a href="#2-1Jenkins安装" class="headerlink" title="2.1Jenkins安装"></a>2.1Jenkins安装</h5><p>在<a href="https://jenkins.io/" target="_blank" rel="external">官网</a>下载.war文件，然后直接在命令行运行<code>java -jar jenkins.war</code></p>
<p>当命令行出现jenkins is running即已经成功启动了服务</p>
<p>默认端口为localhost:8080</p>
<p>**</p>
<p>macos如果遇到不能进入的文件夹，get info 然后添加权限用户即可</p>
<p>例如配置jenkins需要进入</p>
<p>/Users/Shard/Jenkins/home/secrets</p>
<p>**</p>
<p>参考资料：</p>
<ol>
<li><a href="http://blog.csdn.net/abcdocker/article/category/6638595" target="_blank" rel="external">持续集成 by www.abcdocker.com</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-敏捷开发&quot;&gt;&lt;a href=&quot;#1-敏捷开发&quot; class=&quot;headerlink&quot; title=&quot;1.敏捷开发&quot;&gt;&lt;/a&gt;1.敏捷开发&lt;/h3&gt;&lt;p&gt;普通的程序开发，是按照瀑布流一样的流程往下走的。&lt;/p&gt;
&lt;p&gt;但是时至今日，客户的需求变化速度非常之快，而
    
    </summary>
    
      <category term="jenkins" scheme="http://www.pirrla.cn/categories/jenkins/"/>
    
    
      <category term="jenkins" scheme="http://www.pirrla.cn/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>HTML学习笔记</title>
    <link href="http://www.pirrla.cn/2017/09/19/other/html_notes/"/>
    <id>http://www.pirrla.cn/2017/09/19/other/html_notes/</id>
    <published>2017-09-18T16:00:00.000Z</published>
    <updated>2017-09-20T08:18:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>使用小写</p>
<p><code>&lt;br /&gt;</code> 是空行</p>
<p>浏览器会自动地在段落、标题的前后添加空行。（<code>&lt;p&gt; &lt;h1&gt;-&lt;h6&gt;</code>是块级元素）</p>
<p>避免使用<code>&lt;font&gt;</code>等标签了，使用style</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;Look! Styles and colors&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;p style=&quot;font-family:verdana;color:red&quot;&gt;</div><div class="line">This text is in Verdana and red&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;p style=&quot;font-family:times;color:green&quot;&gt;</div><div class="line">This text is in Times and green&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;p style=&quot;font-size:30px&quot;&gt;This text is 30 pixels high&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>header 中用meta重定向</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb2312&quot; /&gt;</div><div class="line">&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;5;url=http://www.w3school.com.cn&quot; /&gt;</div><div class="line">&lt;/head&gt;</div></pre></td></tr></table></figure>
<p>小于号&lt; <code>&amp;lt;</code>  大于号&gt;<code>&amp;gt;</code>空格最好用 <code>&amp;nbsp;</code></p>
<p>上传超过一个文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;/example/html5/demo_form.asp&quot; method=&quot;get&quot;&gt;</div><div class="line">选择图片：&lt;input type=&quot;file&quot; name=&quot;img&quot; multiple=&quot;multiple&quot; /&gt;</div><div class="line">&lt;input type=&quot;submit&quot; /&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;p&gt;请尝试在浏览文件时选取一个以上的文件。&lt;/p&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h3&gt;&lt;p&gt;使用小写&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; 是空行&lt;/p&gt;
&lt;p&gt;浏览器会自动地在段落、标题
    
    </summary>
    
      <category term="html" scheme="http://www.pirrla.cn/categories/html/"/>
    
    
      <category term="html" scheme="http://www.pirrla.cn/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>文件系统3</title>
    <link href="http://www.pirrla.cn/2017/09/13/fs/fs3/"/>
    <id>http://www.pirrla.cn/2017/09/13/fs/fs3/</id>
    <published>2017-09-13T06:23:06.000Z</published>
    <updated>2017-09-19T02:15:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mongo-Connector-设置"><a href="#Mongo-Connector-设置" class="headerlink" title="Mongo Connector 设置"></a><a href="https://my.oschina.net/tianlele/blog/848860" target="_blank" rel="external">Mongo Connector 设置</a></h3><p>为ES添加pinyin搜索</p>
<p>google open search</p>
<p><a href="https://disq.us/url?url=https%3A%2F%2Faaronparecki.com%2F2011%2F07%2F11%2F3%2Fhow-to-let-google-power-opensearch-on-your-website%3AHsv8oJR1pwEePhD0jpqWGdgJoCU&amp;cuid=3833100" target="_blank" rel="external">https://aaronparecki.com/20…</a></p>
<h3 id="TIKA读取附件"><a href="#TIKA读取附件" class="headerlink" title="TIKA读取附件"></a>TIKA读取附件</h3><p>tika — help</p>
<p><strong>1.tika-python 调用</strong></p>
<p><a href="https://github.com/chrismattmann/tika-python" target="_blank" rel="external">tika-python</a>是python的一个第三方库，可以快捷地调用tika很实用</p>
<p>安装库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install tika</div></pre></td></tr></table></figure>
<p>第一次调用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tika</div><div class="line">tika.initVM()</div><div class="line"><span class="keyword">from</span> tika <span class="keyword">import</span> parser</div><div class="line"></div><div class="line">parsed = parser.from_file(<span class="string">r'/Users/alan/Downloads/1/1.pptx'</span>)</div><div class="line">print(parsed[<span class="string">"metadata"</span>])</div><div class="line">print(parsed[<span class="string">"content"</span>])</div></pre></td></tr></table></figure>
<p>会下载tika的整个java包，所以耗时较长，请耐心等待</p>
<p>下载完之后就可以直接使用，方便快捷</p>
<p>metadata包括以下数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">height</div><div class="line">tiff:ImageLength</div><div class="line">Data PlanarConfiguration</div><div class="line">resourceName</div><div class="line">tiff:BitsPerSample</div><div class="line">X-Parsed-By</div><div class="line">Compression Lossless</div><div class="line">width</div><div class="line">Compression NumProgressiveScans</div><div class="line">Transparency Alpha</div><div class="line">Chroma ColorSpaceType</div><div class="line">X-TIKA:parse_time_millis</div><div class="line">Compression CompressionTypeName</div><div class="line">Data BitsPerSample</div><div class="line">IHDR</div><div class="line">Data SampleFormat</div><div class="line">Chroma BlackIsZero</div><div class="line">Chroma NumChannels</div><div class="line">Dimension ImageOrientation</div><div class="line">embeddedRelationshipId</div><div class="line">X-TIKA:embedded_resource_path</div><div class="line">tiff:ImageWidth</div><div class="line">Content-Type</div><div class="line">Dimension PixelAspectRatio</div></pre></td></tr></table></figure>
<p>!使用tika-python会打开一个tika服务器（post文件进去返回解析的html），内存占用较大</p>
<p><strong>2.命令行调用</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar tika-app-1.16.jar --text doc</div></pre></td></tr></table></figure>
<p>doc是需要解析的文件路径</p>
<p>为了在node.js中内部调用，我们使用了child_process库</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</div><div class="line"></div><div class="line">exec((<span class="string">'java -jar tika-app-1.16.jar --text '</span>+<span class="string">'/Users/alan/Downloads/1/bb.pdf'</span>),<span class="function"><span class="keyword">function</span>(<span class="params">error,stdout,stderr</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span> (error !== <span class="literal">null</span>)&#123;</div><div class="line">		<span class="built_in">console</span>.error(<span class="string">'error'</span>);</div><div class="line">	&#125;;</div><div class="line">	<span class="built_in">console</span>.log(stdout);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>3.服务器模式调用</strong></p>
<p>命令行启动服务器模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar tika-app-1.16.jar --server --port 12345</div></pre></td></tr></table></figure>
<p>这是简单的服务器模式启动，仅供测试环境使用</p>
<p>更完善的服务器模式tika看<a href="https://wiki.apache.org/tika/TikaJAXRS" target="_blank" rel="external">https://wiki.apache.org/tika/TikaJAXRS</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Mongo-Connector-设置&quot;&gt;&lt;a href=&quot;#Mongo-Connector-设置&quot; class=&quot;headerlink&quot; title=&quot;Mongo Connector 设置&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://my.oschina.net/
    
    </summary>
    
      <category term="filesystem" scheme="http://www.pirrla.cn/categories/filesystem/"/>
    
    
      <category term="filesystem" scheme="http://www.pirrla.cn/tags/filesystem/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB 复制集</title>
    <link href="http://www.pirrla.cn/2017/09/12/mongo-fuzhiji/"/>
    <id>http://www.pirrla.cn/2017/09/12/mongo-fuzhiji/</id>
    <published>2017-09-12T06:24:00.000Z</published>
    <updated>2017-09-12T06:55:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MongoDB复制集开启（本机）"><a href="#MongoDB复制集开启（本机）" class="headerlink" title="MongoDB复制集开启（本机）"></a>MongoDB复制集开启（本机）</h3><p>在本地开启三个mongod，当作三个服务器，分别使用作<strong>主复制集、从复制集、仲裁复制集</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:28001   //主复制集</div><div class="line">127.0.0.1:28002   //从复制集</div><div class="line">127.0.0.1:28003   //仲裁复制集</div></pre></td></tr></table></figure>
<p><strong>1.首先建立三个文件夹分别存放数据库数据文件。</strong></p>
<p><strong>2.分别建立各自的conf配置文件</strong></p>
<p>配置内容如下：（三个服务器只是端口不同，其他配置相同）</p>
<p>/data/mongodb/conf/28001.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 端口</div><div class="line">port=28001</div><div class="line"># 绑定ip地址</div><div class="line">bind_ip=127.0.0.1</div><div class="line"># 日志文件路径</div><div class="line">logpath=/data/mongodb/log/28001.log</div><div class="line"># 数据文件存放目录</div><div class="line">dbpath=/data/mongodb/data/28001/</div><div class="line"># 以追加的方式写日志</div><div class="line">logappend=true</div><div class="line"></div><div class="line">pidfilepath=/data/mongodb/data/28001/28001.pid</div><div class="line">fork=true</div><div class="line">oplogSize=1024</div><div class="line"># 复制集名称</div><div class="line">replSet=MyMongo</div></pre></td></tr></table></figure>
<p>其中复制集名称最重要，因为如果需要放在同一个复制集，必须保证不同的服务器的复制集名称完全相同。（<font color="red">其中replSet的S记得要大写</font>）</p>
<p><strong>3.启动三个服务器</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mongod -f /data/mongodb/conf/28001.conf</div><div class="line">mongod -f /data/mongodb/conf/28002.conf</div><div class="line">mongod -f /data/mongodb/conf/28003.conf</div></pre></td></tr></table></figure>
<p>后面跟的是配置文件的地址，启动完成后，会出现一个fork:successful的提示信息，而且不是在前台启动的，所以要注意，可能已经启动过了。</p>
<p>查找是否有启动可以使用以下命令查看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep mongo</div></pre></td></tr></table></figure>
<p><strong>4.初始化复制集</strong></p>
<p>如果是第一次进行初始化，进入需要成为主复制集的服务器，这里进入28001端口</p>
<p>进入mongo客户端</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo localhost:28001</div></pre></td></tr></table></figure>
<p>然后输入初始化命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rs.initiate(&#123;_id:&apos;MyMongo&apos;,members:[&#123;_id:1,host:&apos;127.0.0.1:28001&apos;&#125;]&#125;)</div></pre></td></tr></table></figure>
<p>第一个_id：复制集的名称</p>
<p>member：复制集服务器列表（因为其他服务器还没完成初始化，所以只有一个当前的服务器）</p>
<p>第二个_id：指定给服务器的ID</p>
<p>host：服务器主机地址</p>
<p><strong>5.添加从复制集合仲裁复制集</strong></p>
<p>完成初始化，可以看到，当前服务器的名称已经成为了primary。因为是整个复制集中第一个完成初始化的，所以该服务器成为主复制集。</p>
<p>然后我们需要添加从复制集：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rs.add(&apos;127.0.0.1:28002&apos;)</div></pre></td></tr></table></figure>
<p>{”ok“ : 1}添加成功</p>
<p>调用rs.status()可以查看到复制集的情况</p>
<p>然后我们添加仲裁复制集：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rs.addArb(&apos;127.0.0.1:28003&apos;)</div></pre></td></tr></table></figure>
<p>{”ok“ : 1}添加成功</p>
<p><strong>6.测试</strong></p>
<p>Ref:</p>
<p>[1] <a href="http://www.cnblogs.com/nicolegxt/p/6841442.html?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="external">http://www.cnblogs.com/nicolegxt/p/6841442.html?utm_source=itdadao&amp;utm_medium=referral</a></p>
<p>[2] <a href="http://blog.csdn.net/lichangzai/article/details/50903130" target="_blank" rel="external">http://blog.csdn.net/lichangzai/article/details/50903130</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;MongoDB复制集开启（本机）&quot;&gt;&lt;a href=&quot;#MongoDB复制集开启（本机）&quot; class=&quot;headerlink&quot; title=&quot;MongoDB复制集开启（本机）&quot;&gt;&lt;/a&gt;MongoDB复制集开启（本机）&lt;/h3&gt;&lt;p&gt;在本地开启三个mongod，
    
    </summary>
    
      <category term="mongodb" scheme="http://www.pirrla.cn/categories/mongodb/"/>
    
    
      <category term="mongodb" scheme="http://www.pirrla.cn/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>文件系统2</title>
    <link href="http://www.pirrla.cn/2017/09/12/fs/fs2/"/>
    <id>http://www.pirrla.cn/2017/09/12/fs/fs2/</id>
    <published>2017-09-12T06:23:06.000Z</published>
    <updated>2017-10-31T08:27:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="FastDFS与GridFS的选择"><a href="#FastDFS与GridFS的选择" class="headerlink" title="FastDFS与GridFS的选择"></a>FastDFS与GridFS的选择</h3><h4 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a>FastDFS</h4><p>FastDFS服务器端有两个角色：追踪器（tracker）和存储节点（storage）。</p>
<p>追踪器：主要负责调度工作，在访问上起到<strong>负载均衡</strong>的作用。</p>
<p>存储节点：存储文件，完成文件管理的存储、同步和提供存取接口等功能。</p>
<p>FastDFS同时会对文件的metadata（相关属性，例如宽度等）进行管理，以键值对的方式表示。</p>
<p>建议文件大小： 4KB &lt; file_size &lt;500MB</p>
<p>系统结构：</p>
<p><img src="http://static.oschina.net/uploads/img/201204/20230218_pNXn.jpg" alt=""></p>
<p>存储节点采用分卷的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相对独立的。</p>
<p>一个卷可以由一台或多台存储服务器组成，多台存储服务器可以起到冗余备份和负载均衡的作用。</p>
<p><strong>上传文件交互过程：</strong></p>
<ol>
<li>client询问tracker上传到的storage，不需要附加参数；</li>
<li>tracker返回一台可用的storage；</li>
<li>client直接和storage通讯完成文件上传。 </li>
</ol>
<p><strong>下载文件交互过程：</strong></p>
<ol>
<li>client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；</li>
<li>tracker返回一台可用的storage；</li>
<li>client直接和storage通讯完成文件下载。</li>
</ol>
<h4 id="GridFS"><a href="#GridFS" class="headerlink" title="GridFS"></a>GridFS</h4><p>MongoDB单个document存储上限为16M，为了存储大于16M的文件，我们可以使用MongoDB官方的文件系统GridFS。</p>
<p>默认分割大小<strong>256K</strong>。</p>
<p>GridFS的思想很简单就是将一个很大的文件进行分割，分割后的每一个小文件作为一个document单独存储。然后提供了两个集合来存储分割的信息和文件的元信息。这两个集合默认是fs.files和fs.chunks。</p>
<p>fs.files集合就存储了这个文件的基本信息：</p>
<ul>
<li>_id</li>
<li>length: 文件的大小</li>
<li>filename: 文件的名称</li>
<li>chunkSize: 这个文件每一个分块的大小，单位是字节，默认为256K。</li>
<li>uploadDate: 文件上传的时间。</li>
<li>md5: MD5信息，以检查文件完整性</li>
</ul>
<p>fs.chunks集合包括以下几个字段：</p>
<ul>
<li>_id</li>
<li>n: 表示是分块中的第几块，从0开始。</li>
<li>data: 存储的是当前文件分块的二进制数据。</li>
<li>file_id: 表示的是该块是属于哪一个文件，存储的就是fs.files中document的_id。在读取文件的时候，先在fs.files集合中找满足条件的document，获取它的_id值，然后根据这个值到fs.chunks集合中查找所有files_id为该值的document，并按n排序，最后依次读取document中data的值拼凑出原来的文件。</li>
</ul>
<h3 id="Mongo-Connector使用心得"><a href="#Mongo-Connector使用心得" class="headerlink" title="Mongo Connector使用心得"></a>Mongo Connector使用心得</h3><p>当按照<a href="http://pirrla.cn/2017/09/05/fs/fs1/" target="_blank" rel="external">复制集开启流程</a>完成后，即可使用mongo connector。</p>
<ol>
<li>开启MongoDB复制集</li>
<li>开启ES</li>
<li>开启mongo connector</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mongo-connector --auto-commit-interval=0 -m localhost:28001 -t localhost:9200 -d elastic2_doc_manager -n news.tj_reports -o /Users/alan/Downloads/oplog.txt</div></pre></td></tr></table></figure>
<font color="red">之前的表述有错误，开启mongo connector后数据会直接同步，旧数据也会</font>

<p><strong>MongoDB的database会作为es的index</strong></p>
<p><strong>collection会作为es的type</strong></p>
<p>然后各个字段都会同步到es中。（增删改都会，version会变）</p>
<h3 id="Mongo-connector-support-for-GridFS-2"><a href="#Mongo-connector-support-for-GridFS-2" class="headerlink" title="Mongo connector support for GridFS[2]"></a>Mongo connector support for GridFS[2]</h3><p>mongo connector支持将MongoDB的GridFS中的文件复制到es中，通过es的mapping种类attachment。(<del>已过期</del>)</p>
<ol>
<li>ES安装<a href="https://github.com/elastic/elasticsearch-mapper-attachments" target="_blank" rel="external">attachment插件</a></li>
</ol>
<ol>
<li>​</li>
</ol>
<p>attachment type 已经被<a href="https://www.elastic.co/guide/en/elasticsearch/plugins/5.6/mapper-attachments.html#mapper-attachments-install" target="_blank" rel="external">抛弃</a>？</p>
<font color="red">5.6ES推出了一个<a href="https://www.elastic.co/guide/en/elasticsearch/plugins/5.6/ingest-attachment.html" target="_blank" rel="external">Ingest Attachment Processor</a></font>





<p>Ref:</p>
<p>[1] <a href="http://www.oschina.net/p/fastdfs" target="_blank" rel="external">http://www.oschina.net/p/fastdfs</a></p>
<p>[2] <a href="https://github.com/mongodb-labs/mongo-connector/wiki/Usage%20with%20ElasticSearch" target="_blank" rel="external">https://github.com/mongodb-labs/mongo-connector/wiki/Usage%20with%20ElasticSearch</a></p>
<p>[3] <a href="http://blog.csdn.net/WK313753744/article/details/49943155" target="_blank" rel="external">FastDFS 介绍</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;FastDFS与GridFS的选择&quot;&gt;&lt;a href=&quot;#FastDFS与GridFS的选择&quot; class=&quot;headerlink&quot; title=&quot;FastDFS与GridFS的选择&quot;&gt;&lt;/a&gt;FastDFS与GridFS的选择&lt;/h3&gt;&lt;h4 id=&quot;FastD
    
    </summary>
    
      <category term="filesystem" scheme="http://www.pirrla.cn/categories/filesystem/"/>
    
    
      <category term="filesystem" scheme="http://www.pirrla.cn/tags/filesystem/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统5</title>
    <link href="http://www.pirrla.cn/2017/09/05/rs/rs_5/"/>
    <id>http://www.pirrla.cn/2017/09/05/rs/rs_5/</id>
    <published>2017-09-05T06:23:06.000Z</published>
    <updated>2017-09-08T05:24:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="假设已经得出了目标用户的相似用户，现做出推荐"><a href="#假设已经得出了目标用户的相似用户，现做出推荐" class="headerlink" title="假设已经得出了目标用户的相似用户，现做出推荐"></a>假设已经得出了目标用户的相似用户，现做出推荐</h3><h3 id="1-推荐目标用户已购买的产品相似产品"><a href="#1-推荐目标用户已购买的产品相似产品" class="headerlink" title="1.推荐目标用户已购买的产品相似产品"></a>1.推荐目标用户已购买的产品相似产品</h3><p>由于用户在购买了产品后，当产品过了存续期后，可能需要继续购买同类型的产品，所以我们需要对用户之前购买的产品进行统计分析，继续推荐相似的产品给用户。</p>
<p><strong>1.大类</strong></p>
<p>当用户购买了多次相同大类的产品之后，我们可以认为该用户对该大类的风险程度、收益情况比较认可，所以有较大的可能性会再次购买，所以我们主要统计用户已购买产品大类的情况。</p>
<p><strong>2.天数</strong></p>
<p>由于用户对资金的灵活程度有自己的偏好，所以用户购买产品的天数比较固定或者有规律性，例如用户如果认为91天的产品的灵活程度和收益情况互相权衡之下最理想，那么用户对91天的产品的偏好是存在的。同时用户初期对产品的信任程度没有达到一定的高度，购买的天数可能会比较短，所以如果用户多次购买了同一类产品后，可以推荐同样的天数<strong>或更长的天数</strong>的产品。</p>
<p><strong>3.收益利率</strong></p>
<p>由于前两个属性产品大类和产品天数就决定了产品的收益情况，所以可以直接根据前两个属性直接得到用户的投资偏好。</p>
<p><strong>4.综上所述</strong></p>
<p>我们将统计用户购买过最多的产品类型和产品天数，然后将开放日期在未来或今日的产品选择出来，推荐给用户。</p>
<h3 id="2-推荐用户尝试其他类型产品"><a href="#2-推荐用户尝试其他类型产品" class="headerlink" title="2.推荐用户尝试其他类型产品"></a>2.推荐用户尝试其他类型产品</h3><p>统计相似用户前100位的购买习惯，然后推荐该用户未购买过的产品或者排名第一的产品。</p>
<p>因为统计前100位相似用户的时候已经筛选掉了只购买过一款产品的用户，所以不会出现无法推荐的问题。</p>
<p><strong>问题：如果购买习惯完全相同怎么处理？</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1a6726cef907827da0411d9f107550b4fcfd2feb</div><div class="line">9.43% GF1806 0.250494227106 新睿利优先91天 债券型 91 6.55</div><div class="line">9.46% GF1807 0.228637469027 新睿利优先91天 债券型 91 6</div><div class="line">9.44% GF1805 0.377176516585 新睿利优先91天 债券型 91 4.35</div><div class="line">9.53% GF1802 0.256939429748 新睿利优先91天 债券型 91 5.5</div><div class="line">9.33% GF180F 0.758798112353 新睿利优先91天 债券型 91 3.8</div><div class="line">13.81% 879003 0.0578450717465 多添利14天 短期理财类 14 4.3</div><div class="line">10.56% GF1811 0.288599403176 新睿利优先91天 债券型 91 4.8</div><div class="line">9.71% GF180L 1.38227279375 新睿利优先91天 债券型 91 4.7</div><div class="line">9.40% 879005 0.0835590588465 多添利56天 短期理财类 56 5.2</div><div class="line">9.33% 879049 4.02077615455 多添利X36天 短期理财类 36 4.7</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">879002 54 多添利7天 短期理财类 7 4.4</div><div class="line">879004 42 多添利28天 短期理财类 28 4.6</div><div class="line">GF1808 23 新睿利优先91天 债券型 91 5.4</div><div class="line">GF1810 21 新睿利优先91天 债券型 91 </div><div class="line">879006 21 多添利91天 短期理财类 91 4.6</div><div class="line">GF1814 19 新睿利优先91天 债券型 91 6.2</div><div class="line">GF1804 14 新睿利优先91天 债券型 91 5.6</div><div class="line">GF1809 12 新睿利优先91天 债券型 91 3.6</div><div class="line">GF1803 11 新睿利优先91天 债券型 91 6</div><div class="line">GF1813 8 新睿利优先91天 债券型 91 6.2</div><div class="line">GF1812 8 新睿利优先91天 债券型 91 4.8</div><div class="line">GF1815 6 新睿利优先91天 债券型 91 5.3</div><div class="line">879007 5 多添利182天 短期理财类 182 4.75</div><div class="line">879287 3 多添利X28天 短期理财类 28 5.5</div><div class="line">879610 3 多添利X364天 短期理财类 364 4.8</div><div class="line">879114 3 多添利X182天 短期理财类 182 4.4</div><div class="line">879620 2 多添利X364天 短期理财类 364 4.9</div><div class="line">879119 2 多添利X364天 短期理财类 364 5.25</div><div class="line">GF1884 2 新睿利优先X189天 债券型 189 6.1</div><div class="line">GF1823 2 新睿利优先X126天 债券型 126 6</div><div class="line">879008 2 多添利364天 短期理财类 364 </div><div class="line">879208 2 多添利X126天 短期理财类 126 5.3</div><div class="line">879277 2 多添利X56天 短期理财类 56 4.6</div><div class="line">GF1887 1 新睿利优先X182天 债券型 182 4.9</div><div class="line">87953P 1 多添利X56天 短期理财类 56 4.45</div><div class="line">879579 1 多添利X364天 短期理财类 364 4.9</div><div class="line">879341 1 多添利X182天15 短期理财类 182 5.1</div><div class="line">879162 1 多添利X182天 短期理财类 182 4.1</div><div class="line">87913I 1 多添利X35天 短期理财类 35 4.5</div><div class="line">GF1821 1 新睿利优先X182天 债券型 182 5.25</div><div class="line">GF1894 1 新睿利优先X182天 债券型 182 5.3</div><div class="line">879218 1 多添利X28天 短期理财类 28 4.2</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;假设已经得出了目标用户的相似用户，现做出推荐&quot;&gt;&lt;a href=&quot;#假设已经得出了目标用户的相似用户，现做出推荐&quot; class=&quot;headerlink&quot; title=&quot;假设已经得出了目标用户的相似用户，现做出推荐&quot;&gt;&lt;/a&gt;假设已经得出了目标用户的相似用户，现做出
    
    </summary>
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/categories/recommendationsystem/"/>
    
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/tags/recommendationsystem/"/>
    
  </entry>
  
  <entry>
    <title>文件系统1</title>
    <link href="http://www.pirrla.cn/2017/09/05/fs/fs1/"/>
    <id>http://www.pirrla.cn/2017/09/05/fs/fs1/</id>
    <published>2017-09-05T06:23:06.000Z</published>
    <updated>2017-09-13T08:32:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库选择"><a href="#数据库选择" class="headerlink" title="数据库选择"></a>数据库选择</h3><p><strong>关系型数据库 - Oracle</strong></p>
<p>基础事务有四个特性：</p>
<ul>
<li>原子性：整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回复 （Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li>
<li>一致性：在事务开始之前和事务结束以后，数据库的完整性限制没有被破坏。</li>
<li>隔离性：两个事务的执行是互不干扰的，一个事务不可能看到其他事务运行时，中间某一时刻的数据。</li>
<li>持久性：在事务完成以后，该事务对数据库所作的更改便持久地保存在数据库之中，并不会被回复。</li>
</ul>
<p>对网站来说，关系型数据库的很多特性不再需要了：</p>
<ul>
<li>事务一致性</li>
</ul>
<p>关系型数据库在对事物一致性的维护中有很大的开销，而现在很多web系统对事物的读写一致性都不高</p>
<ul>
<li>读写实时性</li>
</ul>
<p>对关系数据库来说，插入一条数据之后立刻查询，是肯定可以读出这条数据的，但是对于很多web应用来说，并不要求这么高的实时性，比如发一条消息之后，过几秒乃至十几秒之后才看到这条动态是完全可以接受的</p>
<ul>
<li>复杂SQL，特别是多表关联查询</li>
</ul>
<p>任何大数据量的web系统，都非常忌讳多个大表的关联查询，以及复杂的数据分析类型的复杂SQL报表查询，特别是SNS类型的网站，从需求以及产品阶级角度，就避免了这种情况的产生。往往更多的只是单表的主键查询，以及单表的简单条件分页查询，SQL的功能极大的弱化了</p>
<p><strong>NoSQL - MongoDB</strong></p>
<p>由于在本项目中，数据是新闻资讯的存储，而新闻资讯相互之间是相对独立的，所以不需要使用到关系型数据库。</p>
<p>非关系型数据库相当于是简化版的关系型数据库，减少了一些相对少用到的功能，提升了产品的性能。相对于关系型数据库，抛弃了ACID特性。</p>
<p>但是由于是基于键值对的特性，所以非常容易进行扩展，可拓展性强。</p>
<h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>但是MongoDB也有一个问题。由于MongoDB的文档结构为BJSON格式（BJSON全称：Binary JSON），而BJSON格式本身就支持保存二进制格式的数据，因此可以把文件的二进制格式的数据直接保存到MongoDB的文档结构中。但是由于一个BJSON的最大长度不能超过16M，所以限制了单个文档中能存入的最大文件不能超过<font color="red">16M</font></p>
<p>为了提供对大容量文件存取的支持，samus驱动提供了“GridFS”方式来支持。</p>
<p><strong>BJSON</strong></p>
<p><a href="http://blog.csdn.net/kwsy2008/article/details/48969607" target="_blank" rel="external">python 实现</a></p>
<p><strong>GridDFS</strong></p>
<p>MongoDB内置功能。</p>
<p>GridFS是一种在MongoDB中存储大二进制文件的机制。使用GridFS存文件有如下几个原因：</p>
<p>利用Grid可以简化需求。要是已经用了MongoDB，GridFS就可以不需要使用独立文件存储架构。</p>
<p>基本原理是将文件存储在两个Collection之中，一个保存文件索引，一个保存文件内容。4MB每一块。</p>
<table>
<thead>
<tr>
<th>指标</th>
<th>适合类型</th>
<th>文件分布</th>
<th>系统性能</th>
<th>复杂度</th>
<th>FUSE</th>
<th>POSIX</th>
<th>备份机制</th>
<th>通讯协议接口</th>
<th>社区支持</th>
<th></th>
<th>开发语言</th>
</tr>
</thead>
<tbody>
<tr>
<td>FastDFS</td>
<td>4KB~500MB</td>
<td>小文件合并存储不分片处理</td>
<td>很高</td>
<td>简单</td>
<td>不支持</td>
<td>不支持</td>
<td>组内冗余备份</td>
<td>ApiHTTP</td>
<td>国内用户群</td>
<td></td>
<td>C语言</td>
</tr>
<tr>
<td>TFS</td>
<td>所有文件</td>
<td>小文件合并，以block组织分片</td>
<td></td>
<td>复杂</td>
<td>不支持</td>
<td>不支持</td>
<td>Block存储多份,主辅灾备</td>
<td>APIhttp</td>
<td>少</td>
<td></td>
<td>C++</td>
</tr>
<tr>
<td>MFS</td>
<td>大于64K</td>
<td>分片存储</td>
<td>Master占内存多</td>
<td></td>
<td>支持</td>
<td>支持</td>
<td>多点备份动态冗余</td>
<td>使用fuse挂在</td>
<td>较多</td>
<td></td>
<td>Perl</td>
</tr>
<tr>
<td>HDFS</td>
<td>大文件</td>
<td>大文件分片分块存储</td>
<td></td>
<td>简单</td>
<td>支持</td>
<td>支持</td>
<td>多副本</td>
<td>原生api</td>
<td>较多</td>
<td></td>
<td>java</td>
</tr>
<tr>
<td>Ceph</td>
<td>对象文件块</td>
<td>OSD一主多从</td>
<td></td>
<td>复杂</td>
<td>支持</td>
<td>支持</td>
<td>多副本</td>
<td>原生api</td>
<td>较少</td>
<td></td>
<td>C++</td>
</tr>
<tr>
<td>MogileFS</td>
<td>海量小图片</td>
<td></td>
<td>高</td>
<td>复杂</td>
<td>可以支持</td>
<td>不支持</td>
<td>动态冗余</td>
<td>原生api</td>
<td>文档少</td>
<td></td>
<td>Perl</td>
</tr>
<tr>
<td>ClusterFS</td>
<td>大文件</td>
<td></td>
<td></td>
<td>简单</td>
<td>支持</td>
<td>支持</td>
<td>镜像</td>
<td></td>
<td>多</td>
<td></td>
<td>C</td>
</tr>
</tbody>
</table>
<p><strong>HDFS</strong></p>
<p>还是适合大数据处理，附件等文档太小，不适合使用HDFS。</p>
<p><strong>FastDFS</strong></p>
<ol>
<li>为互联网量身定制，海量数据文件存储。</li>
<li>高可用(同组备份机制)。</li>
<li>FastDFS不是通用的文件系统，只能通过api来访问，目前提供c,java,php客户端。phtyon由第三方开发者提供。</li>
<li>FastDFS可以看作是基于key/value pair存储系统，也许称为分布式文件存储服务更合适。</li>
<li>支持高并发(这个好像没体现出支持什么高并发,这个是nginx的功劳吧)</li>
</ol>
<h3 id="从MongoDB到ElasticSearch"><a href="#从MongoDB到ElasticSearch" class="headerlink" title="从MongoDB到ElasticSearch"></a>从MongoDB到ElasticSearch</h3><p>MongoDB 本身是自带文本索引功能的，但是，不支持中文。<strong>术业有专攻</strong>，MongoDB 是数据存储应用，那么全文检索就使用专业的全文搜索引擎吧。</p>
<p><strong>0.River</strong></p>
<p>由于只支持ES 2.0 以下版本，已弃用。</p>
<p><strong>1.<a href="https://github.com/mongodb-labs/mongo-connector" target="_blank" rel="external">Mongo-Connector</a></strong></p>
<p>实时</p>
<ul>
<li>MongoDB必须开启复制集[2]</li>
</ul>
<p>This assumes there is a MongoDB replica set running on port 27017 and that Elasticsearch is running on port 9200 both on the local machine.</p>
<ul>
<li>安装mongo-connector</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install &apos;mongo-connector[elastic5]&apos;</div></pre></td></tr></table></figure>
<ul>
<li>运行mongo-connector</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo-connector -m 127.0.0.1:27017 -t 127.0.0.1:9200 -d elastic_doc_manager</div></pre></td></tr></table></figure>
<p>启动之后，现在开始，在mongoDB上的操作，都会同步到elasticsearch之中了。</p>
<p>（对旧数据无影响）</p>
<p>问题：根据其他用户的评价，mongo-conncetor会出现延迟和退出的现象</p>
<p><strong>2.<a href="https://github.com/keenwon/mongodb-to-elasticsearch" target="_blank" rel="external">mongodb to elasticsearch</a></strong></p>
<p>非实时，应对一天更新一次的场景</p>
<p>使用了mongoose</p>
<p>一个node.js写的小程序，可以将mongodb的数据输入到es。</p>
<p>Ref:</p>
<p>[1] <a href="https://segmentfault.com/a/1190000003773614" target="_blank" rel="external">MongoDB 数据自动同步到 ElasticSearch</a></p>
<p>[2] <a href="http://www.runoob.com/mongodb/mongodb-replication.html" target="_blank" rel="external">副本集设置</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据库选择&quot;&gt;&lt;a href=&quot;#数据库选择&quot; class=&quot;headerlink&quot; title=&quot;数据库选择&quot;&gt;&lt;/a&gt;数据库选择&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;关系型数据库 - Oracle&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基础事务有四个特性：&lt;/p&gt;
&lt;ul
    
    </summary>
    
      <category term="filesystem" scheme="http://www.pirrla.cn/categories/filesystem/"/>
    
    
      <category term="filesystem" scheme="http://www.pirrla.cn/tags/filesystem/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统4</title>
    <link href="http://www.pirrla.cn/2017/08/31/rs/rs_4/"/>
    <id>http://www.pirrla.cn/2017/08/31/rs/rs_4/</id>
    <published>2017-08-31T06:17:36.000Z</published>
    <updated>2017-09-04T02:13:59.000Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>

<h3 id="数据归一化"><a href="#数据归一化" class="headerlink" title="数据归一化"></a>数据归一化</h3><p>现在每个用户的属性变为了持有产品的份额：</p>
<p>直接使用份额计算会出现偏差化：</p>
<p>例如购买了一款产品金额较大，那么权重就会偏大</p>
<p>那么就将份额标准化</p>
<p><strong>1.固定阈值</strong></p>
<p>例如（万分之X）</p>
<table>
<thead>
<tr>
<th>方案</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
</tr>
</thead>
<tbody>
<tr>
<td>方案1</td>
<td>0-0.03</td>
<td>0.03-0.1</td>
<td>0.1-0.3</td>
<td>0.3-1.0</td>
<td>1.0+</td>
</tr>
<tr>
<td>方案2</td>
<td>0-0.01</td>
<td>0.01-0.1</td>
<td>0.1-1.0</td>
<td>1.0-2.0</td>
<td>2.0+</td>
</tr>
</tbody>
</table>
<p>划分为五个评分，0分则是没有持仓过该产品</p>
<p><strong>2.平均持仓数</strong></p>
<p>计算出每个产品的用户平均持仓数，然后根据平均持仓倍数去划分数据：</p>
<table>
<thead>
<tr>
<th>方案</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
</tr>
</thead>
<tbody>
<tr>
<td>方案1</td>
<td>0-0.5倍</td>
<td>0.5-1.0倍</td>
<td>1.0-1.5倍</td>
<td>1.5-2.0倍</td>
<td>2.0+倍</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>3.排序划分</strong></p>
<p>将一款产品的所有用户进行排序，然后根据排序去划分数据</p>
<table>
<thead>
<tr>
<th>方案</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
</tr>
</thead>
<tbody>
<tr>
<td>方案1</td>
<td>20%</td>
<td>20%</td>
<td>20%</td>
<td>20%</td>
<td>20%</td>
</tr>
<tr>
<td>方案</td>
<td>10%</td>
<td>25%</td>
<td>30%</td>
<td>25%</td>
<td>10%</td>
</tr>
</tbody>
</table>
<p><strong>4.（0，1）标准化（max-min）</strong></p>
<p>$${x}_{normalization}=\frac{x-Min}{Max-Min}$$</p>
<p>然后将得到的结果乘以5，得到投资偏好。</p>
<p><strong>5.Z-score标准化</strong></p>
<p>将数据划分为正态分布化的数据</p>
<p>$${x}_{normalization}=\frac{x-\mu }{\sigma }$$</p>
<p>其中的u是平均数，sigma是标准差</p>
<h3 id="实验结果："><a href="#实验结果：" class="headerlink" title="实验结果："></a>实验结果：</h3><p><strong>0.不进行归一化</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">目标客户</div><div class="line">产品1 0.250494227106 新睿利优先91天 债券型 91</div><div class="line">产品2 0.228637469027 新睿利优先91天 债券型 91</div><div class="line">产品3 0.377176516585 新睿利优先91天 债券型 91</div><div class="line">产品4 0.256939429748 新睿利优先91天 债券型 91</div><div class="line">产品5 0.758798112353 新睿利优先91天 债券型 91</div><div class="line">产品6 0.0578450717465 多添利14天 短期理财类 14</div><div class="line">产品7 0.288599403176 新睿利优先91天 债券型 91</div><div class="line">产品8 1.38227279375 新睿利优先91天 债券型 91</div><div class="line">产品9 0.0835590588465 多添利56天 短期理财类 56</div><div class="line">产品10 4.02077615455 多添利X36天 短期理财类 36</div><div class="line">***********************************</div><div class="line">d96e788472f4d36ae9163192f84635d2b3332ced</div><div class="line">产品1 0.249496242138 新睿利优先91天 债券型 91</div><div class="line">产品5 0.758798112353 新睿利优先91天 债券型 91</div><div class="line">879002 0.0262265839131 多添利7天 短期理财类 7</div><div class="line">产品6 0.0390845079368 多添利14天 短期理财类 14</div><div class="line">产品9 0.0828958917128 多添利56天 短期理财类 56</div><div class="line">产品10 4.02077615455 多添利X36天 短期理财类 36</div><div class="line">***********************************</div><div class="line">b598fb7de5df3b8a73c5c23c98fb3c73483b020b</div><div class="line">产品1 0.249496242138 新睿利优先91天 债券型 91</div><div class="line">产品2 0.226822885939 新睿利优先91天 债券型 91</div><div class="line">产品3 0.374926954856 新睿利优先91天 债券型 91</div><div class="line">产品7 0.259999462321 新睿利优先91天 债券型 91</div><div class="line">GF1809 0.306768321508 新睿利优先91天 债券型 91</div><div class="line">879002 0.0233817984367 多添利7天 短期理财类 7</div><div class="line">879006 0.115620874347 多添利91天 短期理财类 91</div><div class="line">产品10 4.02077615455 多添利X36天 短期理财类 36</div><div class="line">***********************************</div><div class="line">36e64d058bd7a6c387ffe388179d4639749cc44f</div><div class="line">产品1 0.249496242138 新睿利优先91天 债券型 91</div><div class="line">GF1814 0.249990015339 新睿利优先91天 债券型 91</div><div class="line">GF1804 0.351223807748 新睿利优先91天 债券型 91</div><div class="line">产品3 0.375676808766 新睿利优先91天 债券型 91</div><div class="line">产品7 0.323959330052 新睿利优先91天 债券型 91</div><div class="line">GF1803 0.407730728967 新睿利优先91天 债券型 91</div><div class="line">产品2 0.229544760571 新睿利优先91天 债券型 91</div><div class="line">GF1812 0.355765682516 新睿利优先91天 债券型 91</div><div class="line">879119 0.729319808632 多添利X364天 短期理财类 364</div><div class="line">GF1809 0.311063078009 新睿利优先91天 债券型 91</div><div class="line">产品5 0.770938882151 新睿利优先91天 债券型 91</div><div class="line">879162 1.2696774613 多添利X182天 短期理财类 182</div><div class="line">879002 0.020420103968 多添利7天 短期理财类 7</div><div class="line">产品6 0.0394753530162 多添利14天 短期理财类 14</div><div class="line">产品8 1.38227279375 新睿利优先91天 债券型 91</div><div class="line">产品9 0.0830616834962 多添利56天 短期理财类 56</div><div class="line">879004 0.0871009660079 多添利28天 短期理财类 28</div><div class="line">产品10 4.02077615455 多添利X36天 短期理财类 36</div></pre></td></tr></table></figure>
<p>1.固定值归一化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">目标客户</div><div class="line">产品1 0.250494227106 3 新睿利优先91天 债券型 91</div><div class="line">产品2 0.228637469027 3 新睿利优先91天 债券型 91</div><div class="line">产品3 0.377176516585 4 新睿利优先91天 债券型 91</div><div class="line">产品4 0.256939429748 3 新睿利优先91天 债券型 91</div><div class="line">产品5 0.758798112353 4 新睿利优先91天 债券型 91</div><div class="line">产品6 0.0578450717465 2 多添利14天 短期理财类 14</div><div class="line">产品7 0.288599403176 3 新睿利优先91天 债券型 91</div><div class="line">产品8 1.38227279375 5 新睿利优先91天 债券型 91</div><div class="line">产品9 0.0835590588465 2 多添利56天 短期理财类 56</div><div class="line">产品10 4.02077615455 5 多添利X36天 短期理财类 36</div><div class="line">***********************************</div><div class="line">bb7a0f6f5d59a3bfcca72a685810c38c2bc8e3a3</div><div class="line">产品1 0.262470046729 3 新睿利优先91天 债券型 91</div><div class="line">产品3 0.451412053647 4 新睿利优先91天 债券型 91</div><div class="line">产品4 0.299002492211 3 新睿利优先91天 债券型 91</div><div class="line">产品6 0.101619720636 3 多添利14天 短期理财类 14</div><div class="line">产品8 1.38227279375 5 新睿利优先91天 债券型 91</div><div class="line">产品9 0.146891520115 3 多添利56天 短期理财类 56</div><div class="line">***********************************</div><div class="line">d96e788472f4d36ae9163192f84635d2b3332ced</div><div class="line">产品1 0.249496242138 3 新睿利优先91天 债券型 91</div><div class="line">产品5 0.758798112353 4 新睿利优先91天 债券型 91</div><div class="line">879002 0.0262265839131 1 多添利7天 短期理财类 7</div><div class="line">产品6 0.0390845079368 2 多添利14天 短期理财类 14</div><div class="line">产品9 0.0828958917128 2 多添利56天 短期理财类 56</div><div class="line">产品10 4.02077615455 5 多添利X36天 短期理财类 36</div><div class="line">***********************************</div><div class="line">f0f5de95640aabbb217a35a7b141b2bae46783aa</div><div class="line">产品5 4.58465819484 5 新睿利优先91天 债券型 91</div><div class="line">产品8 3.31469015941 5 新睿利优先91天 债券型 91</div><div class="line">产品3 0.374926954856 4 新睿利优先91天 债券型 91</div></pre></td></tr></table></figure>
<p>2.平均持仓数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">目标客户</div><div class="line">产品1 1 新睿利优先91天 债券型 91</div><div class="line">产品2 1 新睿利优先91天 债券型 91</div><div class="line">产品3 1 新睿利优先91天 债券型 91</div><div class="line">产品4 1 新睿利优先91天 债券型 91</div><div class="line">产品5 1 新睿利优先91天 债券型 91</div><div class="line">产品6 1 多添利14天 短期理财类 14</div><div class="line">产品7 1 新睿利优先91天 债券型 91</div><div class="line">产品8 1 新睿利优先91天 债券型 91</div><div class="line">产品9 1 多添利56天 短期理财类 56</div><div class="line">产品10 1 多添利X36天 短期理财类 36</div><div class="line">***********************************</div><div class="line">bb7a0f6f5d59a3bfcca72a685810c38c2bc8e3a3</div><div class="line">产品1 1 新睿利优先91天 债券型 91</div><div class="line">产品3 1 新睿利优先91天 债券型 91</div><div class="line">产品4 1 新睿利优先91天 债券型 91</div><div class="line">产品6 1 多添利14天 短期理财类 14</div><div class="line">产品8 1 新睿利优先91天 债券型 91</div><div class="line">产品9 1 多添利56天 短期理财类 56</div><div class="line">***********************************</div><div class="line">7b0fa22fec8c28836d6a52cd35aa818218cd4021</div><div class="line">产品1 1 新睿利优先91天 债券型 91</div><div class="line">产品2 1 新睿利优先91天 债券型 91</div><div class="line">产品7 1 新睿利优先91天 债券型 91</div><div class="line">产品4 1 新睿利优先91天 债券型 91</div><div class="line">产品6 1 多添利14天 短期理财类 14</div><div class="line">***********************************</div><div class="line">21cfa76118cad37e9af116b01ca19230b5def327</div><div class="line">产品1 1 新睿利优先91天 债券型 91</div><div class="line">产品2 1 新睿利优先91天 债券型 91</div><div class="line">产品7 1 新睿利优先91天 债券型 91</div><div class="line">产品4 1 新睿利优先91天 债券型 91</div></pre></td></tr></table></figure>
<p>3.(0,1)归一化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">目标客户</div><div class="line">产品1 0.00250205597229 新睿利优先91天 债券型 91</div><div class="line">产品2 0.00611680178649 新睿利优先91天 债券型 91</div><div class="line">产品3 0.00628624275145 新睿利优先91天 债券型 91</div><div class="line">产品4 0.00281313461987 新睿利优先91天 债券型 91</div><div class="line">产品5 0.0110457409948 新睿利优先91天 债券型 91</div><div class="line">产品6 9.96838674323e-05 多添利14天 短期理财类 14</div><div class="line">产品7 0.00168125266956 新睿利优先91天 债券型 91</div><div class="line">产品8 0.0126821535272 新睿利优先91天 债券型 91</div><div class="line">产品9 0.000251958300901 多添利56天 短期理财类 56</div><div class="line">产品10 0.00139546358688 多添利X36天 短期理财类 36</div><div class="line">***********************************</div><div class="line">53685bbde6333d222b00c006f27ef581c88a4b1d</div><div class="line">产品1 0.00330949236175 新睿利优先91天 债券型 91</div><div class="line">产品2 0.00606825574057 新睿利优先91天 债券型 91</div><div class="line">产品4 0.00277429449691 新睿利优先91天 债券型 91</div><div class="line">GF1808 0.0049099997054 新睿利优先91天 债券型 91</div><div class="line">产品5 0.0110457409948 新睿利优先91天 债券型 91</div><div class="line">产品8 0.0126821535272 新睿利优先91天 债券型 91</div><div class="line">879004 0.000391751898821 多添利28天 短期理财类 28</div><div class="line">***********************************</div><div class="line">2ff657077263d4833bad7d8c8035c623e336c977</div><div class="line">GF1814 0.00701227648786 新睿利优先91天 债券型 91</div><div class="line">产品2 0.00646876061945 新睿利优先91天 债券型 91</div><div class="line">产品3 0.00624875024995 新睿利优先91天 债券型 91</div><div class="line">产品4 0.00280203744188 新睿利优先91天 债券型 91</div><div class="line">879637 0.0 多添利X97天 短期理财类 97</div><div class="line">GF1812 0.00261713803293 新睿利优先91天 债券型 91</div><div class="line">87905M 0.0 多添利X181天 短期理财类 181</div><div class="line">87913V 0.0 多添利X90天 短期理财类 90</div><div class="line">GF1808 0.00505729969656 新睿利优先91天 债券型 91</div><div class="line">产品5 0.0110457409948 新睿利优先91天 债券型 91</div><div class="line">产品1 0.0025718344257 新睿利优先91天 债券型 91</div><div class="line">产品7 0.00151464204465 新睿利优先91天 债券型 91</div><div class="line">产品8 0.0126821535272 新睿利优先91天 债券型 91</div><div class="line">879580 0.0 多添利X91天 短期理财类 91</div><div class="line">87907S 0.0 多添利X181天 短期理财类 181</div><div class="line">879410 0.0 多添利X90天 短期理财类 90</div><div class="line">***********************************</div><div class="line">ece0720feb0ff36294d63aef73021496db43f7b3</div><div class="line">产品5 0.0111852661442 新睿利优先91天 债券型 91</div><div class="line">879002 4.82520920901e-05 多添利7天 短期理财类 7</div><div class="line">产品8 0.0126821535272 新睿利优先91天 债券型 91</div></pre></td></tr></table></figure>
<p>4.Z-score</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">目标客户</div><div class="line">产品1 -0.319787520279</div><div class="line">产品2 -0.40743813927</div><div class="line">产品3 -0.349684885459</div><div class="line">产品4 -0.359717190383</div><div class="line">产品5 -0.405274114882</div><div class="line">产品6 -0.0725244748709</div><div class="line">产品7 -0.262125545055</div><div class="line">产品8 -0.441496892426</div><div class="line">产品9 -0.133596718487</div><div class="line">产品10 -0.266415990907</div><div class="line">***********************************</div><div class="line">da7ab1c15153fcf193a6fc7d754ae0d3c4d598af</div><div class="line">产品1 -0.218140849102</div><div class="line">产品2 -0.179129356215</div><div class="line">产品4 -0.331388969459</div><div class="line">GF1810 -0.268200096133</div><div class="line">产品5 -0.405274114882</div><div class="line">产品8 -0.441496892426</div><div class="line">***********************************</div><div class="line">bd086050bbaec0d4f07094224c4bf46cf64d057c</div><div class="line">产品1 -0.320230425164</div><div class="line">产品2 -0.40743813927</div><div class="line">87911V -0.247691581664</div><div class="line">产品3 -0.350590828042</div><div class="line">产品4 -0.356399470815</div><div class="line">GF1814 -0.0395975964336</div><div class="line">产品5 -0.404049998232</div><div class="line">GF1874 -0.30671101606</div><div class="line">产品6 -0.0764411040059</div><div class="line">产品7 -0.267856858948</div><div class="line">***********************************</div><div class="line">2681a76a23e95e26c0a84029644bb510547ee7cd</div><div class="line">产品1 -0.320230425164</div><div class="line">产品2 -0.511840648104</div><div class="line">产品7 -0.316486188947</div><div class="line">产品5 -0.488208017918</div><div class="line">879002 -0.0736386038632</div><div class="line">产品4 -0.432451811674</div></pre></td></tr></table></figure>
<h3 id="时间权重："><a href="#时间权重：" class="headerlink" title="时间权重："></a>时间权重：</h3><p>建立一个字典</p>
<p>{</p>
<p>“user1”:</p>
<p>{“87006”：“2017-01-03”</p>
<p>}</p>
<p>}</p>
<p>然后 在计算金额权重的时候，再乘以这个权重。</p>
]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;数据归一化&quot;&gt;&lt;a href=&quot;#数据归
    
    </summary>
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/categories/recommendationsystem/"/>
    
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/tags/recommendationsystem/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统3</title>
    <link href="http://www.pirrla.cn/2017/08/30/rs/rs_3/"/>
    <id>http://www.pirrla.cn/2017/08/30/rs/rs_3/</id>
    <published>2017-08-30T01:12:35.000Z</published>
    <updated>2017-08-30T05:46:23.000Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>

<h3 id="现在使用协同过滤方法"><a href="#现在使用协同过滤方法" class="headerlink" title="现在使用协同过滤方法"></a>现在使用协同过滤方法</h3><p><strong>数据概况</strong></p>
<p>“持有过.csv”</p>
<p>目前只调用了2016年年度数据。</p>
<p>统计用户在该年度中，曾经持仓过哪些产品，用于分析用户投资偏好。</p>
<p>数据约190w条。</p>
<p>每一条数据分别代表一位用户一个产品在该年度的平均持有数量和金额。</p>
<p>通过初步分析，得知，数据共包含125w位用户。</p>
<p><strong>子代码情况</strong></p>
<p>其中约有<font color="red">96w</font>的用户在该年度内只购买过<font color="red">一款产品</font>（不计购买次数）</p>
<font color="red">29w</font>用户购买过两款产品以上。<br><br>平均每位用户购买<strong>1.52</strong>款子产品<br><br><strong>母代码情况</strong><br><br>其中约有<font color="red">121w</font>的用户在该年度内只购买过<font color="red">一款产品</font>（不计购买次数）<br><br>只有<font color="red">4w</font>用户购买过两款产品以上。<br><br>平均每位用户购买<strong>1.03</strong>款母产品<br><br><br><br><strong>初步构建</strong><br><br>为了简化该问题，所以首先只考虑用户曾经持仓的产品，忽略<font color="red"><strong>购买次数、购买金额、购买日期、卖出</strong></font>等数据。建立一个用户-产品的矩阵（如下）。<br><br>| 表格   | 产品1  | 产品2  | 产品3  | 产品4  | 产品5  |<br>| —- | —- | —- | —- | —- | —- |<br>| 用户1  | 0    | 0    | 0    | 0    | 1    |<br>| 用户2  | 0    | 1    | 0    | 1    | 0    |<br>| 用户3  | 0    | 0    | 1    | 1    | 0    |<br>| 用户4  | 0    | 0    | 0    | 0    | 1    |<br>| 用户5  | 0    | 1    | 0    | 1    | 0    |<br><br>1则表示在该年度（目前只统计了2016年年度数据），该用户曾经持仓过该产品。<br><br>0则表示没有。<br><br>通过建立这个矩阵之后，计算不同用户之间的相似度。<br><br><br><br>相似度计算使用<a href="https://en.wikipedia.org/wiki/Jaccard_index" target="_blank" rel="external">Jaccard Similarity</a><br><br>$$similarity=\frac{USER1 \cap USER2}{USER1 \cup USER2}$$<br><br>（问题：是否需要在分子分母上加1）<br><br>即是计算两个用户之间购买了相同产品的数量，再除以两个用户共购买了多少款产品，即得到相似度。<br><br><font color="red">问题：用母代码还是子代码？</font>

<p>但是由于之前描述的数据概况，大部分用户都只购买了一款产品，所以计算相似度时很大概率得到的结果是1和0。（完全相同和完全不相同）</p>
<p><strong>针对只购买了一款产品的用户</strong></p>
<p>所以为了实现协同过滤的效果，我们需要先挑选出<strong>购买过两款产品或以上</strong>的用户出来，然后再根据这些用户与其他用户进行重合，进行推荐。</p>
<p>首先，根据统计一共有125款母代码产品。</p>
<p>制作一份字典，遍历一遍记录，然后对于购买了两款产品以上的用户加入到字典里，索引是购买产品的产品代码。</p>
<p>然后对于每一个只购买了一款产品的用户就可以到这份字典去索引，根据已经购买了的产品代码，可以得到与其相似的用户群，然后根据用户群进行推荐。</p>
<p>这样，计算量可以离线完成，对于大部分的用户（只买过一款产品的），推荐系统的结果可以直接存取，快捷。</p>
<p><strong>对于购买了两款产品或以上的用户</strong></p>
<p>可以直接使用Jaccard Similarity 的计算方法，计算两位用户之间的相似度。</p>
<p>设定一个阈值（threshold），当两位用户相似度超过这个阈值之后（去除相似度1.0的用户，以为完全相同没有推荐的意义），则认定这两位用户为相似用户。然后根据相似用户的其他喜好，进行推荐。</p>
<h3 id="后期完善"><a href="#后期完善" class="headerlink" title="后期完善"></a>后期完善</h3><p><strong>1.使用时间字段</strong></p>
<p>根据购买时间与现在时间的差值，赋予用户一个权重，标识这个用户近期对该产品的偏好程度。</p>
<p>可以参考ES中的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/query-dsl-function-score-query.html#function-decay" target="_blank" rel="external">decay_function</a>。</p>
<p><img src="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/images/decay_2d.png" alt="">根据时间差，套入不同的计算公式中，得出一个权重。</p>
<p><strong>2.购买数量与金额</strong></p>
<p>由于每个客户的购买金额和购买次数是不一样的。在初步构建的当中，我们忽略了购买的金额和次数，均算作1。所以我们现在需要将购买金额和次数考虑进去。</p>
<p>想法是：</p>
<p>$$金额权重=\frac{购买总金额}{该产品的最低购买金额}$$</p>
<p>由于每个产品的规模大小都不一样，所以不能单纯以购买金额去衡量用户与产品之间的关系。所以我们使用到客户购买的总金额除以最低购买门槛金额，得到一个倍数，然后再辅以一个函数，达到实现权重的目的。</p>
<p>其次，由于某一个客户可能会购买一款母代码的多款子产品，所以购买次数也会反应该用户的投资偏好，我们可以再设定一个函数，去控制该权重。</p>
<p><strong>3.结合</strong></p>
<p>根据上述两个字段的影响，每个用户-产品矩阵的内容可以为上述两个字段的权重相加相乘，然后就能计算更加准确的用户相似度。</p>
<p><strong>4.已找出相似用户后的推荐想法</strong></p>
<p>如果已经找出了相似的用户，那么就以这群用户对产品的购买次数进行统计，给出一个排名，然后相应地推荐排名第一的产品和后续产品中，客户尚未购买过的产品。</p>
]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;现在使用协同过滤方法&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/categories/recommendationsystem/"/>
    
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/tags/recommendationsystem/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统1</title>
    <link href="http://www.pirrla.cn/2017/08/21/rs/rs_1/"/>
    <id>http://www.pirrla.cn/2017/08/21/rs/rs_1/</id>
    <published>2017-08-21T06:56:01.000Z</published>
    <updated>2017-08-30T01:41:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目前大部分舆论："><a href="#目前大部分舆论：" class="headerlink" title="目前大部分舆论："></a>目前大部分舆论：</h3><p>目前，大多数的资料（知乎等）显示，工业界和学术界的鸿沟还是比较大的，工业界通常使用</p>
<p><strong>精细的特征工程+简单可行的模型+各种Trick+CF协同过滤</strong></p>
<p>即可以实现比较好的效果。</p>
<p>其中，大部分人认为其中重要性是：</p>
<p><strong>用户交互界面UI &gt; 数据 &gt; 算法</strong></p>
<font color="red">所以我们是否需要进行UI的调研？（淘宝、其他公司的同类产品等?）</font>

<font color="red">其次，我们的推荐页面是已什么形式展现给客户？</font>

<p>是直接在目前的基础上，进行排序展示？（推荐的产品在最前面）</p>
<p>现有的第三方库：<strong>Java-mahout, Python-Crab</strong></p>
<p>特征工程分为：静态特征、行为特征、Item特征、上下文特征</p>
<p>特镇工程操作有：转换、切分、叠加、离散化、组合</p>
<p>大数据不一定有效，提高维度则有一定的帮助，数据量太大可以随机从原始数据中采样。</p>
<h3 id="USER表"><a href="#USER表" class="headerlink" title="USER表"></a>USER表</h3><p>对于USER，我们设计了一个表去存储用户的信息。</p>
<p>信息来源暂定是用户自己填写的信息、问卷调查获得的风险偏好和从身份证号所获取的信息（出生地、年龄、性别等）。</p>
<p>开户日期指的是用户已经在网站注册的时长。</p>
<font color="red">金额方面，暂时还需要解决，是什么金额？</font>

<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>userid</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>金额</td>
<td>NUMBER</td>
</tr>
<tr>
<td>风险偏好</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>已购产品</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>年龄</td>
<td>NUMBER</td>
</tr>
<tr>
<td>性别</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>职业</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>电话</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>出生地</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>邮箱</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>开户日期</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
</tbody>
</table>
<h3 id="ITEM表"><a href="#ITEM表" class="headerlink" title="ITEM表"></a>ITEM表</h3><p>对于ITEM，我们同样将它存储在数据库中。</p>
<p>这个数据来源我们可以从自身获取。</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>itemid</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>风险</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>起购额</td>
<td>NUMBER</td>
</tr>
<tr>
<td>产品类型</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
</tbody>
</table>
<p>两个表中，有<strong>关联的是风险和风险偏好，起购额和金额</strong>。因为这两个字段的数值是硬性要求，起到了一个Filter的作用。</p>
<h3 id="可能添加的字段（增加维度，提高准度）"><a href="#可能添加的字段（增加维度，提高准度）" class="headerlink" title="可能添加的字段（增加维度，提高准度）"></a>可能添加的字段（增加维度，提高准度）</h3><table>
<thead>
<tr>
<th>字段</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>用户行为-退款行为</td>
<td>用户是否发生退款行为，退款产品为</td>
</tr>
<tr>
<td>用户行为-投诉行为</td>
<td>用户是否对某款产品进行过投诉</td>
</tr>
<tr>
<td>用户-是否有亲戚好友购买过相关产品</td>
<td>对于熟人推荐的会比较信任（但是亲戚好友的信息比较难获取，推荐码？）</td>
</tr>
<tr>
<td>产品-描述</td>
<td>对描述进行NLP，得出一个向量</td>
</tr>
<tr>
<td>产品-投资经理</td>
<td>对于不同的投资经理，会有不同的喜好（例如已经购买的产品的同一位投资经理，但是要确定是否前一款产品是否亏损）</td>
</tr>
<tr>
<td>产品-目前盈亏</td>
<td>目前产品的盈亏情况，是否会推荐亏损的产品给客户</td>
</tr>
<tr>
<td>产品-行业归属</td>
<td>投资详情</td>
</tr>
<tr>
<td>产品-开始销售日期</td>
<td>长期稳定的产品会让客户偏喜爱</td>
</tr>
<tr>
<td>网页动作</td>
<td>是否能捕捉到用户的网页动作？（例如在某一个产品页面逗留很久，多次点击同一款产品的详情）</td>
</tr>
</tbody>
</table>
<h3 id="相关论文"><a href="#相关论文" class="headerlink" title="相关论文"></a>相关论文</h3><p><a href="http://www.cin.ufpe.br/~idal/rs/Amazon-Recommendations.pdf" target="_blank" rel="external">Amazon CF</a></p>
<p>基础的推荐算法有：</p>
<p><strong>1.传统的协同过滤</strong></p>
<p>其中，分为寻找相似的用户和相似的产品。</p>
<p>计算相似度的基本都是使用向量之间的cos距离</p>
<p>推荐相似用户购买的产品或者推荐相似产品的产品</p>
<p><strong>2.Cluster Models</strong></p>
<p>将用户分类成几个类，然后对新来的用户同样进行分类，然后推荐同一个分类用户的购买的产品信息</p>
<p>其中分类的算法可以有：KNN, LogisticRegression, NeuralNetwork, DecesionTree, K-Means</p>
<p><strong>3.Search-Based Methods</strong></p>
<p>将item进行细分，划分出目录、类别、作者等信息，然后推荐相关目录、相关作者的其他作品等。</p>
<p><strong>4.亚马逊Item-to-item 协同过滤</strong></p>
<p>基于庞大的用户数量和商品数量，一个一个算相似度计算量非常庞大，同时不能满足业务要求的0.5秒内给用户推荐信息的要求，所以亚马逊按照传统的协同过滤进行优化，只计算购买过某一产品的用户们的购买记录中商品的相似度，然后推荐相似度最高的产品。</p>
<p><a href="https://datajobs.com/data-science-repo/Recommender-Systems-%5BNetflix%5D.pdf" target="_blank" rel="external">matrix factorization</a></p>
<p>Neighborhodd methods - 计算产品与产品之间，用户与用户之间的关系，例如某一个用户喜欢3部电影，则选择出一组用户也同时喜欢这三部作品，然后推荐这组用户最喜爱的电影作为推荐系统推荐</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/1.png" alt=""></p>
<p>Lantent factore models - 将用户或产品的属性进行建模，数值化，然后根据用户的偏好和产品的属性的数值，去作推荐</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/2.png" alt=""></p>
<p><a href="http://cs.rochester.edu/twiki/pub/Main/HarpSeminar/Factorization_Meets_the_Neighborhood-_a_Multifaceted_Collaborative_Filtering_Model.pdf" target="_blank" rel="external">Factorization Meets the Neighborhood: a Multifaceted Collaborative Filtering Model</a></p>
<p>定义相似度：</p>
<p>用户：</p>
<h3 id="想法："><a href="#想法：" class="headerlink" title="想法："></a>想法：</h3><h3 id="1-直接将已购产品当做Training-data"><a href="#1-直接将已购产品当做Training-data" class="headerlink" title="1.直接将已购产品当做Training data"></a>1.直接将已购产品当做Training data</h3><p>是否可以直接将客户已经购买的产品记录当做training data放进神经网络</p>
<p>然后把产品当成ont-hot型的向量输出（或者把金额当成输出）</p>
<h3 id="2-将用户分类"><a href="#2-将用户分类" class="headerlink" title="2.将用户分类"></a>2.将用户分类</h3><p>将用户分成某几类用户，然后进来一个用户则根据模型，将该用户分配到不同的组里面。</p>
<p>然后推荐系统将推荐组内用户最常购买的产品。</p>
<h3 id="3-将产品分类"><a href="#3-将产品分类" class="headerlink" title="3.将产品分类"></a>3.将产品分类</h3><p>由于产品比较少，所以是否直接人工分类？</p>
<p>或者根据投资经理（用户是否有投资经理偏好）进行分类？</p>
<h3 id="目前难题："><a href="#目前难题：" class="headerlink" title="目前难题："></a>目前难题：</h3><p>1.冷启动？（完全新用户进入，没有任何数据，是否能找出新用户最多购买的产品）（例如注册时间小于30天的用户，购买最多的产品是？）</p>
<p>2.推荐系统的目标是？推荐用户最喜爱的产品，最有可能购买的产品？还是将冷门的产品推销出去？</p>
<p>3.是否要将客户引导到高风险的产品上去？</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目前大部分舆论：&quot;&gt;&lt;a href=&quot;#目前大部分舆论：&quot; class=&quot;headerlink&quot; title=&quot;目前大部分舆论：&quot;&gt;&lt;/a&gt;目前大部分舆论：&lt;/h3&gt;&lt;p&gt;目前，大多数的资料（知乎等）显示，工业界和学术界的鸿沟还是比较大的，工业界通常使用&lt;/p&gt;

    
    </summary>
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/categories/recommendationsystem/"/>
    
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/tags/recommendationsystem/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统2</title>
    <link href="http://www.pirrla.cn/2017/08/21/rs/rs_2/"/>
    <id>http://www.pirrla.cn/2017/08/21/rs/rs_2/</id>
    <published>2017-08-21T06:54:08.000Z</published>
    <updated>2017-08-30T01:41:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="想法1"><a href="#想法1" class="headerlink" title="想法1:"></a>想法1:</h3><p>根据用户的属性来进行用户分类器的建立。</p>
<p>从client和client_info两个表查看，可以得出信息。</p>
<p>目前初步选择的属性有：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>解释</th>
<th>如何向量化</th>
</tr>
</thead>
<tbody>
<tr>
<td>client_id</td>
<td>用来区别用户的唯一属性，应为主键</td>
<td>不用</td>
</tr>
<tr>
<td>birthday</td>
<td>生日，用于计算年龄，或者计算星座？</td>
<td>计算年龄，然后根据问卷的划分，划分为四个等级</td>
</tr>
<tr>
<td>address</td>
<td>住址，不同区域的人群有不同的投资观念</td>
<td>根据省份划分？</td>
</tr>
<tr>
<td>mobile</td>
<td>手机号码，可以查询归属地？</td>
<td>归属地</td>
</tr>
<tr>
<td>email</td>
<td>可以查看邮箱的地址属性</td>
<td>email服务商</td>
</tr>
<tr>
<td>degree</td>
<td>学历</td>
<td>学历代码</td>
</tr>
<tr>
<td>profession</td>
<td>职业</td>
<td>职业代码</td>
</tr>
<tr>
<td>income</td>
<td>收入</td>
<td>收入可以去除</td>
</tr>
<tr>
<td>marriage</td>
<td>婚否</td>
<td>1、0</td>
</tr>
<tr>
<td>risk_level</td>
<td>风险偏好</td>
<td>不需要</td>
</tr>
<tr>
<td>gender</td>
<td>性别</td>
<td>1、0</td>
</tr>
<tr>
<td>id_type</td>
<td>证件类型</td>
<td></td>
</tr>
<tr>
<td>id_no</td>
<td>证件号码</td>
<td></td>
</tr>
<tr>
<td>open_date</td>
<td>开户日期</td>
<td>计算开户总时长</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>可能有用的字段，尚未加入</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>id_address</td>
<td>身份证地址</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>用户之间的相似度：</p>
<p>将所有的属性向量化（normalize），然后用cos计算两个向量之间的距离，距离小于一定的阈值则确定为相似。</p>
<p>然后推荐系统推荐相似用户中，最喜爱的产品。</p>
<h3 id="想法2"><a href="#想法2" class="headerlink" title="想法2:"></a>想法2:</h3><p>于想法一同样，计算产品之间的相似度，但是由于产品的数量不多，所以是否可以直接人工分类？这样更加准确？</p>
<h3 id="想法3："><a href="#想法3：" class="headerlink" title="想法3："></a>想法3：</h3><p>建立一个三层的简单的全连接神经网络，然后根据购买记录，将购买记录作为训练集。</p>
<p>用户的各种信息作为向量输入，然后输出则是一个产品数量维度的向量，购买了产品为1，其他为0。</p>
<p>然后根据这个分类器就可以softmax去得出最后输出是什么。</p>
<h3 id="想法4："><a href="#想法4：" class="headerlink" title="想法4："></a>想法4：</h3><p>根据购买记录，建立一个用户-产品的Matrix，单元格是购买产品的数，根据Factorization、SVD、NMF等算法，补全矩阵。</p>
<h3 id="想法5："><a href="#想法5：" class="headerlink" title="想法5："></a>想法5：</h3><p>将用户或产品，分为大几类，然后将用户或产品进行归类，然后推荐相同类别用户购买的产品或相同类别的产品</p>
<h3 id="想法6："><a href="#想法6：" class="headerlink" title="想法6："></a>想法6：</h3><p>根据用户的开户日期和产品的购买日期，去得出新用户最喜欢的产品</p>
<p>init_date or business_date or valid_date?</p>
<p>问题：由于用户数据太多，是否需要采样？</p>
<p>问题：risk_level是否是硬性规定</p>
<p>问题：推荐系统的目标是？推荐用户最喜爱的产品，最有可能购买的产品？还是将冷门的产品推销出去？</p>
<p>问题：用户的购买记录是以购买金额来分类还是简单以1，0划分</p>
<p>问题：是否有用户投诉、退款的数据</p>
<p>问题：是否有用户网站点击，停留时间的数据？</p>
<p>问题：解析身份证是否合法？</p>
<h3 id="客户简单维度分析："><a href="#客户简单维度分析：" class="headerlink" title="客户简单维度分析："></a>客户简单维度分析：</h3><p>男性用户最喜爱的产品：</p>
<p>女性用户最喜爱的产品：</p>
<p>问题：是否需要区分不同风险用户的喜好?</p>
<p>年龄段最喜欢产品</p>
<p>决策树参数：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>性别</td>
<td>男、女</td>
</tr>
<tr>
<td>年龄</td>
<td>18-22，22-35，35-60，60+</td>
</tr>
<tr>
<td>星座</td>
<td>12星座</td>
</tr>
</tbody>
</table>
<p>876017无法分类</p>
<p>计算产品相似度：</p>
<p>涉及字段：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>excel</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>产品编号</td>
<td>4</td>
<td></td>
</tr>
<tr>
<td>产品名称</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>产品创建日期</td>
<td>7</td>
<td></td>
</tr>
<tr>
<td>投资经理</td>
<td>10</td>
<td></td>
</tr>
<tr>
<td>托管银行</td>
<td>12</td>
<td></td>
</tr>
<tr>
<td>存续期</td>
<td>18</td>
<td></td>
</tr>
<tr>
<td>产品成立日期</td>
<td>19</td>
<td></td>
</tr>
<tr>
<td>成立规模</td>
<td>20</td>
<td></td>
</tr>
<tr>
<td>产品类型</td>
<td>21</td>
<td></td>
</tr>
<tr>
<td>产品风险等级</td>
<td>22</td>
<td></td>
</tr>
<tr>
<td>产品集合类型</td>
<td>32</td>
<td></td>
</tr>
<tr>
<td>最小投资额</td>
<td>34</td>
<td></td>
</tr>
<tr>
<td>获利类型</td>
<td>35</td>
<td></td>
</tr>
<tr>
<td>产品类型</td>
<td>38</td>
<td></td>
</tr>
<tr>
<td>天数</td>
<td>40</td>
<td></td>
</tr>
<tr>
<td>代理机构</td>
<td>41</td>
<td></td>
</tr>
<tr>
<td>产品模型</td>
<td>43</td>
<td></td>
</tr>
<tr>
<td>利率</td>
<td>44</td>
<td></td>
</tr>
<tr>
<td>阈值</td>
<td>45</td>
<td></td>
</tr>
<tr>
<td>单客户购买上限</td>
<td>46</td>
<td></td>
</tr>
<tr>
<td>开放日期</td>
<td>49</td>
<td></td>
</tr>
<tr>
<td>到期日期</td>
<td>50</td>
<td></td>
</tr>
<tr>
<td>总额</td>
<td>51</td>
<td></td>
</tr>
<tr>
<td>广发直销规模</td>
<td>52</td>
<td></td>
</tr>
<tr>
<td>投资经理名称</td>
<td>56</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;想法1&quot;&gt;&lt;a href=&quot;#想法1&quot; class=&quot;headerlink&quot; title=&quot;想法1:&quot;&gt;&lt;/a&gt;想法1:&lt;/h3&gt;&lt;p&gt;根据用户的属性来进行用户分类器的建立。&lt;/p&gt;
&lt;p&gt;从client和client_info两个表查看，可以得出信息。&lt;/p&gt;

    
    </summary>
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/categories/recommendationsystem/"/>
    
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/tags/recommendationsystem/"/>
    
  </entry>
  
  <entry>
    <title>MacOS安装Oracle客户端Client</title>
    <link href="http://www.pirrla.cn/2017/08/10/other/mac_oracle/"/>
    <id>http://www.pirrla.cn/2017/08/10/other/mac_oracle/</id>
    <published>2017-08-10T02:56:39.000Z</published>
    <updated>2017-08-10T03:02:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装客户端只需要简单的几步！！！"><a href="#安装客户端只需要简单的几步！！！" class="headerlink" title="安装客户端只需要简单的几步！！！"></a>安装客户端只需要简单的几步！！！</h1><h1 id="如果你按照官网的方法会一直都失败！！！！"><a href="#如果你按照官网的方法会一直都失败！！！！" class="headerlink" title="如果你按照官网的方法会一直都失败！！！！"></a>如果你按照<a href="https://oracle.github.io/odpi/doc/installation.html#macos" target="_blank" rel="external">官网的方法</a>会一直都失败！！！！</h1><h1 id="首先是安装anaconda（安装第三方库lxml等难安装的库巨有用）"><a href="#首先是安装anaconda（安装第三方库lxml等难安装的库巨有用）" class="headerlink" title="首先是安装anaconda（安装第三方库lxml等难安装的库巨有用）"></a>首先是安装anaconda（安装第三方库lxml等难安装的库巨有用）</h1><h1 id="然后在anaconda中安装cx-oracle第三方库"><a href="#然后在anaconda中安装cx-oracle第三方库" class="headerlink" title="然后在anaconda中安装cx_oracle第三方库"></a>然后在anaconda中安装cx_oracle第三方库</h1><h1 id="然后再官网下载两个相对应的包（位数与python相对应）"><a href="#然后再官网下载两个相对应的包（位数与python相对应）" class="headerlink" title="然后再官网下载两个相对应的包（位数与python相对应）"></a>然后再<a href="http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html" target="_blank" rel="external">官网</a>下载两个相对应的包（位数与python相对应）</h1><h1 id="instantclient-basic-和-instantclient-sqlplus"><a href="#instantclient-basic-和-instantclient-sqlplus" class="headerlink" title="instantclient-basic 和 instantclient-sqlplus"></a>instantclient-basic 和 instantclient-sqlplus</h1><h1 id="然后只需要把两个包的东西解压出来，全部文件放到"><a href="#然后只需要把两个包的东西解压出来，全部文件放到" class="headerlink" title="然后只需要把两个包的东西解压出来，全部文件放到"></a>然后只需要把两个包的东西解压出来，全部文件放到</h1><h1 id="lib-目录里面即可！！！！！"><a href="#lib-目录里面即可！！！！！" class="headerlink" title="~/lib/目录里面即可！！！！！"></a><font color="red">~/lib/</font>目录里面即可！！！！！</h1><p>~就是当前用户名的文件夹</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装客户端只需要简单的几步！！！&quot;&gt;&lt;a href=&quot;#安装客户端只需要简单的几步！！！&quot; class=&quot;headerlink&quot; title=&quot;安装客户端只需要简单的几步！！！&quot;&gt;&lt;/a&gt;安装客户端只需要简单的几步！！！&lt;/h1&gt;&lt;h1 id=&quot;如果你按照官网的方
    
    </summary>
    
      <category term="oracle" scheme="http://www.pirrla.cn/categories/oracle/"/>
    
    
      <category term="oracle" scheme="http://www.pirrla.cn/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>ES搜索笔记</title>
    <link href="http://www.pirrla.cn/2017/08/04/es/es_query/"/>
    <id>http://www.pirrla.cn/2017/08/04/es/es_query/</id>
    <published>2017-08-04T02:08:20.000Z</published>
    <updated>2017-08-09T08:49:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先，了解<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html" target="_blank" rel="external">QUERY结构体</a>的写法：</p>
<h3 id="1-最基础的是“Query”字段"><a href="#1-最基础的是“Query”字段" class="headerlink" title="1.最基础的是“Query”字段"></a>1.最基础的是<strong>“Query”字段</strong></h3><p>它包含最基础的搜索内容和其他设置。(后面再具体介绍内容写法)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//最简单的结构体</div><div class="line">GET /_search</div><div class="line">&#123;</div><div class="line">    "query" : &#123;</div><div class="line">        "term" : &#123; "user" : "kimchy" &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-from-和-size-字段"><a href="#2-from-和-size-字段" class="headerlink" title="2.from 和 size 字段"></a>2.<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-from-size.html" target="_blank" rel="external"><strong>from 和 size 字段</strong></a></h5><p>控制显示搜索结果的数量和页数</p>
<h5 id="3-sort-字段"><a href="#3-sort-字段" class="headerlink" title="3.sort 字段"></a>3.<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html" target="_blank" rel="external"><strong>sort 字段</strong></a></h5><p>例子如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">GET /my_index/my_type/_search</div><div class="line">&#123;</div><div class="line">    "sort" : [</div><div class="line">        &#123; "post_date" : &#123;"order" : "asc"&#125;&#125;,</div><div class="line">        "user",</div><div class="line">        &#123; "name" : "desc" &#125;,</div><div class="line">        &#123; "age" : "desc" &#125;,</div><div class="line">        "_score"</div><div class="line">    ],</div><div class="line">    "query" : &#123;</div><div class="line">        "term" : &#123; "user" : "kimchy" &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过一个列表，控制排列顺序，如果遇到相同的则比较下一项。</p>
<h5 id="4-source"><a href="#4-source" class="headerlink" title="4._source "></a>4.<strong>_source </strong></h5><p>由于es的索引不是所有字段我们都需要，所以需要进行字段筛选，同时由于使用了highlight功能，所以我们可能只需要将hightlight字段筛选出来即可。（可使用正则表达式匹配字段名）</p>
<h5 id="5-script-fields"><a href="#5-script-fields" class="headerlink" title="5.script_fields"></a>5.<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-script-fields.html" target="_blank" rel="external"><strong>script_fields</strong></a></h5><p>用于编写函数，并返回到搜索结果中</p>
<h5 id="6-highlight"><a href="#6-highlight" class="headerlink" title="6.highlight"></a>6.<strong>highlight</strong></h5><p>用于高亮显示某些搜索结果，例子如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">GET /_search</div><div class="line">&#123;</div><div class="line">    "query" : &#123;</div><div class="line">        "match": &#123; "user": "kimchy" &#125;</div><div class="line">    &#125;,</div><div class="line">    "highlight" : &#123;</div><div class="line">        "pre_tags" : ["&lt;tag1&gt;"],</div><div class="line">        "post_tags" : ["&lt;/tag1&gt;"],</div><div class="line">        "fields" : &#123;</div><div class="line">            "_all" : &#123;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="7-rescore"><a href="#7-rescore" class="headerlink" title="7.rescore"></a>7.<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-rescore.html" target="_blank" rel="external">rescore</a></h5><p>用于在返回的搜索结果中再次进行得分计算，并重新计算得分，可用于在搜索相关性后，在根据资讯的日期进行二次排序</p>
<h5 id="8-search-type"><a href="#8-search-type" class="headerlink" title="8.search type"></a>8.search type</h5><p>用于决定是全局搜索并计算得分，还是在各自的分片上进行分布式得分计算和搜索</p>
<h5 id="9-scroll"><a href="#9-scroll" class="headerlink" title="9.scroll"></a>9.<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html" target="_blank" rel="external">scroll</a></h5><p>设定搜索结果的存活时间，避免重复搜索浪费资源，只用于在可以滑动搜索窗口的客户端中，如Python</p>
<h5 id="10-preference"><a href="#10-preference" class="headerlink" title="10.preference"></a>10.preference</h5><p>分片喜好</p>
<h5 id="11-version"><a href="#11-version" class="headerlink" title="11.version"></a>11.version</h5><p>返回每一个hit的版本号</p>
<h5 id="12-min-score"><a href="#12-min-score" class="headerlink" title="12.min_score"></a>12.min_score</h5><p>只有超过某个数值的_score才会返回在搜索结果中</p>
<h5 id="13-collapse"><a href="#13-collapse" class="headerlink" title="13.collapse"></a>13.collapse</h5><p>selecting only the top sorted document per collapse key</p>
<p>用于收集某一个关键词的最高分的文档，例如检索每个用户最多like的tweet（必须包含sort）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">GET /twitter/tweet/_search</div><div class="line">&#123;</div><div class="line">    "query": &#123;</div><div class="line">        "match": &#123;</div><div class="line">            "message": "elasticsearch"</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    "collapse" : &#123;</div><div class="line">        "field" : "user" </div><div class="line">    &#125;,</div><div class="line">    "sort": ["likes"], </div><div class="line">    "from": 10 </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="14-search-after"><a href="#14-search-after" class="headerlink" title="14.search_after"></a>14.search_after</h5><p>也用于翻页，将本页的最后一个搜索结果填入参数则进入下一页（from必须是0）</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>是否需要</th>
</tr>
</thead>
<tbody>
<tr>
<td>query</td>
<td>必须，基础字段（后表续query字段具体写法）</td>
</tr>
<tr>
<td>from/size</td>
<td>需要，用于管理用户的搜索页的页码</td>
</tr>
<tr>
<td>sort</td>
<td>不需要，用于控制排列顺序，首先是比对_score字段，如果相同则比较date，日期较新的排列较前（但是由于我们是match搜索，非term搜索，所以出现_score相同的情况较少，不能使用此字段）</td>
</tr>
<tr>
<td>_source</td>
<td>需要，进行字段筛选</td>
</tr>
<tr>
<td>script_fields</td>
<td>不需要，暂时不需要编写函数</td>
</tr>
<tr>
<td>highlight</td>
<td>需要，进行搜索字段标红</td>
</tr>
<tr>
<td>rescore</td>
<td>可能需要</td>
</tr>
<tr>
<td>search_type</td>
<td>需要</td>
</tr>
<tr>
<td>scroll</td>
<td>可能需要</td>
</tr>
<tr>
<td>preference</td>
<td>不需要</td>
</tr>
<tr>
<td>version</td>
<td>可能需要</td>
</tr>
<tr>
<td>min_score</td>
<td>不需要</td>
</tr>
<tr>
<td>collapse</td>
<td>可能需要</td>
</tr>
<tr>
<td>search_after</td>
<td>可能需要</td>
</tr>
</tbody>
</table>
<h3 id="Query字段内部的编写方式"><a href="#Query字段内部的编写方式" class="headerlink" title="Query字段内部的编写方式"></a>Query字段内部的编写方式</h3><p>叶语句：</p>
<p>几乎语句都能写成match的形式，所以使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html" target="_blank" rel="external">match</a></p>
<table>
<thead>
<tr>
<th>match方法</th>
<th>是否采用</th>
</tr>
</thead>
<tbody>
<tr>
<td>match</td>
<td></td>
</tr>
<tr>
<td>match_phrase</td>
<td></td>
</tr>
<tr>
<td>multi_match</td>
<td></td>
</tr>
<tr>
<td>query_string</td>
<td></td>
</tr>
<tr>
<td>simple_query_string</td>
</tr>
</tbody>
</table>
<p>聚合语句：</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html" target="_blank" rel="external">bool</a></p>
<p>匹配到越多，越高分，不同的match之间得分相加</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-dis-max-query.html" target="_blank" rel="external">dis_max</a></p>
<p>是disjunctionmax 各自的match执行，然后最高分的为最终得分，通过设置tie_breaker来调参</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html" target="_blank" rel="external">function score</a></p>
<p>参考<a href="http://pirrla.cn/2017/07/12/es_similarity/" target="_blank" rel="external">前文</a>，运用了离当前时间越近，则score更高的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/query-dsl-function-score-query.html#function-decay" target="_blank" rel="external">衰减函数</a></p>
<p>我认为的搜索语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">GET /windxw/_search?search_type=dfs_query_then_fetch&amp;explain</div><div class="line">&#123;</div><div class="line">  "from": 0,</div><div class="line">  "size": 20,</div><div class="line">  "_source": ["title","content"], </div><div class="line">  "highlight": &#123;</div><div class="line">    "pre_tags": ["&lt;font color=\"red\"&gt;"],</div><div class="line">    "post_tags": ["&lt;/font&gt;"],</div><div class="line">    "fields": &#123;</div><div class="line">      "content": &#123;&#125;,</div><div class="line">      "title": &#123;&#125;</div><div class="line">    &#125;</div><div class="line">  &#125;, </div><div class="line">  "query": &#123;</div><div class="line">    "function_score": &#123;</div><div class="line">      "query": &#123;</div><div class="line">        "bool": &#123;</div><div class="line">      "should": [</div><div class="line">        &#123;"match": &#123;</div><div class="line">          "title": &#123;</div><div class="line">            "query": "uber",</div><div class="line">            "boost":2,</div><div class="line">            "operator": "and"</div><div class="line">          &#125;</div><div class="line">        &#125;&#125;,</div><div class="line">        &#123;"match": &#123;</div><div class="line">          "content": &#123;</div><div class="line">            "query": "uber",</div><div class="line">            "boost":1,</div><div class="line">            "operator": "and"</div><div class="line">          &#125;</div><div class="line">        &#125;&#125;,</div><div class="line">        &#123;"match": &#123;</div><div class="line">          "keywords": &#123;</div><div class="line">            "query": "uber",</div><div class="line">            "boost":2,</div><div class="line">            "operator": "and"</div><div class="line">          &#125;</div><div class="line">        &#125;&#125;</div><div class="line">      ],</div><div class="line">      "minimum_should_match": 1 </div><div class="line">    &#125;</div><div class="line">      &#125;,</div><div class="line">       "functions": [ </div><div class="line">            &#123;</div><div class="line">                    "exp": &#123;</div><div class="line">                        "publishdate" : &#123;</div><div class="line">                            "origin": "now",</div><div class="line">                            "offset": "1h",</div><div class="line">                            "scale" : "30d",</div><div class="line">                            "decay": 0.2</div><div class="line">                        &#125;</div><div class="line">                    &#125;,</div><div class="line">                    "weight": 200</div><div class="line">                &#125;</div><div class="line">        ],</div><div class="line">        "boost_mode": "sum"</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我认为目前需要解决的问题：</p>
<p>1.如何实现翻页（from/size，scroll，search_after）</p>
<p>2.权衡时间与搜索匹配度的权重（通过调整boost和weight）</p>
<p>3.是否需要用rescore参数来进行二次排序（根据时间排序）</p>
<p>4.search_type是使用全局搜索还是分片搜索</p>
<p>5.三个字段（title,content,keyword）之间的权重</p>
<p>6.三个字段的match得分是使用bool相加还是dis_max取最大值</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，了解&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;QU
    
    </summary>
    
      <category term="elasticsearch" scheme="http://www.pirrla.cn/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://www.pirrla.cn/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ES输入设置</title>
    <link href="http://www.pirrla.cn/2017/08/03/es/es_input/"/>
    <id>http://www.pirrla.cn/2017/08/03/es/es_input/</id>
    <published>2017-08-03T02:31:08.000Z</published>
    <updated>2017-08-07T08:58:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h1><h3 id="1-安装PDFMiner"><a href="#1-安装PDFMiner" class="headerlink" title="1.安装PDFMiner"></a>1.安装PDFMiner</h3><p>从<a href="http://www.unixuser.org/~euske/python/pdfminer/" target="_blank" rel="external">官网</a>上下载源安装包。</p>
<p>通过命令行，运行安装安装包。(注意需要到解压后安装包的根目录)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python setup.py install</div></pre></td></tr></table></figure>
<p>测试是否安装成功，可以紧接着运行以下的代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pdf2txt.py samples/simple1.pdf</div></pre></td></tr></table></figure>
<p>如果能读取PDF内容则安装成功。</p>
<p>如果是中文、韩文、日文等特殊文字PDF，则需要额外安装特殊文字补充包。</p>
<p>紧接着上述的安装程序，也是在根目录下运行以下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ make cmap</div><div class="line">...</div><div class="line">$ python setup.py install</div></pre></td></tr></table></figure>
<p>运行完这两行之后，则可以正常运行PDFMiner了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> pdfminer.converter <span class="keyword">import</span> PDFPageAggregator</div><div class="line"><span class="keyword">from</span> pdfminer.pdfparser <span class="keyword">import</span> PDFParser</div><div class="line"><span class="keyword">from</span> pdfminer.pdfdocument <span class="keyword">import</span> PDFDocument</div><div class="line"><span class="keyword">from</span> pdfminer.pdfpage <span class="keyword">import</span> PDFPage</div><div class="line"><span class="keyword">from</span> pdfminer.pdfpage <span class="keyword">import</span> PDFTextExtractionNotAllowed</div><div class="line"><span class="keyword">from</span> pdfminer.pdfinterp <span class="keyword">import</span> PDFResourceManager</div><div class="line"><span class="keyword">from</span> pdfminer.pdfinterp <span class="keyword">import</span> PDFPageInterpreter</div><div class="line"><span class="keyword">from</span> pdfminer.layout <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"><span class="comment">#打开一个pdf文件</span></div><div class="line">fp = open(<span class="string">u'F:\\pdf\\2013\\000001_平安银行_2013年年度报告_2562.pdf'</span>, <span class="string">'rb'</span>)</div><div class="line"><span class="comment">#创建一个PDF文档解析器对象</span></div><div class="line">parser = PDFParser(fp)</div><div class="line"><span class="comment">#创建一个PDF文档对象存储文档结构</span></div><div class="line"><span class="comment">#提供密码初始化，没有就不用传该参数</span></div><div class="line"><span class="comment">#document = PDFDocument(parser, password)</span></div><div class="line">document = PDFDocument(parser)</div><div class="line"><span class="comment">#检查文件是否允许文本提取</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> document.is_extractable:</div><div class="line">    <span class="keyword">raise</span> PDFTextExtractionNotAllowed</div><div class="line"><span class="comment">#创建一个PDF资源管理器对象来存储共享资源</span></div><div class="line"><span class="comment">#caching = False不缓存</span></div><div class="line">rsrcmgr = PDFResourceManager(caching = <span class="keyword">False</span>)</div><div class="line"><span class="comment"># 创建一个PDF设备对象</span></div><div class="line">laparams = LAParams()</div><div class="line"><span class="comment"># 创建一个PDF页面聚合对象</span></div><div class="line">device = PDFPageAggregator(rsrcmgr, laparams=laparams)</div><div class="line"><span class="comment">#创建一个PDF解析器对象</span></div><div class="line">interpreter = PDFPageInterpreter(rsrcmgr, device)</div><div class="line"><span class="comment">#处理文档当中的每个页面</span></div><div class="line"></div><div class="line"><span class="comment"># doc.get_pages() 获取page列表</span></div><div class="line"><span class="comment">#for i, page in enumerate(document.get_pages()):</span></div><div class="line"><span class="comment">#PDFPage.create_pages(document) 获取page列表的另一种方式</span></div><div class="line">replace=re.compile(<span class="string">r'\s+'</span>);</div><div class="line"><span class="comment"># 循环遍历列表，每次处理一个page的内容</span></div><div class="line"><span class="keyword">for</span> page <span class="keyword">in</span> PDFPage.create_pages(document):</div><div class="line">    interpreter.process_page(page)</div><div class="line">    <span class="comment"># 接受该页面的LTPage对象</span></div><div class="line">    layout=device.get_result()</div><div class="line">    <span class="comment"># 这里layout是一个LTPage对象 里面存放着 这个page解析出的各种对象</span></div><div class="line">    <span class="comment"># 一般包括LTTextBox, LTFigure, LTImage, LTTextBoxHorizontal 等等</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> layout:</div><div class="line">        <span class="comment">#如果x是水平文本对象的话</span></div><div class="line">        <span class="keyword">if</span>(isinstance(x,LTTextBoxHorizontal)):</div><div class="line">            text=re.sub(replace,<span class="string">''</span>,x.get_text())</div><div class="line">            <span class="keyword">if</span> len(text)!=<span class="number">0</span>:</div><div class="line">                <span class="keyword">print</span> text</div></pre></td></tr></table></figure>
<p>可是如果内容物是中文的话，解析出来的结果是cid编码（adobe公司特有编码）</p>
<p>同时需要解析出文档的目录：</p>
<p>使用document.get_outlines()获取并另存为</p>
<h1 id="DOC-amp-DOCX"><a href="#DOC-amp-DOCX" class="headerlink" title="DOC&amp;DOCX"></a>DOC&amp;DOCX</h1><p>pip install python-docx</p>
<p>安装第三方库<a href="https://python-docx.readthedocs.io/" target="_blank" rel="external">python-docx</a></p>
<p>直接使用可以读取.docx文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</div><div class="line">doc = Document(<span class="string">r'/Users/alan/Downloads/123.docx'</span>)</div><div class="line">para = doc.paragraphs</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> para:</div><div class="line">    <span class="keyword">print</span> i.text</div></pre></td></tr></table></figure>
<p>.doc（word2003之前版本）的处理方法则比较复杂</p>
<p>Linux用户可以下载<a href="http://www.winfield.demon.nl/#Programmer" target="_blank" rel="external">antiword</a>第三方包进行直接读取。（未验证）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">安装antiword官方站：http://www.winfield.demon.nl/</div><div class="line">下载地：http://www.winfield.demon.nl/linux/antiword-0.37.tar.gz</div><div class="line">下载完，解压，进入目录使用命令 </div><div class="line">make &amp;&amp; make install</div><div class="line"></div><div class="line">#!/usr/bin/env python</div><div class="line"># coding:utf-8</div><div class="line">import subprocess</div><div class="line">word = &quot;test.doc&quot;</div><div class="line">output = subprocess.check_output([&quot;antiword&quot;, word])</div><div class="line">print(output)</div><div class="line"></div><div class="line">作者：Jun</div><div class="line">链接：https://www.zhihu.com/question/56834115/answer/158115736</div><div class="line">来源：知乎</div><div class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</div></pre></td></tr></table></figure>
<p><a href="https://www.zhihu.com/question/56834115/answer/150658178" target="_blank" rel="external">用LibreOffice(Ubuntu自带)直接转docx再用python-docx，蠢了点但还能用</a></p>
<h1 id="PPTX"><a href="#PPTX" class="headerlink" title="PPTX"></a>PPTX</h1><p>pip install python-pptx</p>
<p>安装第三方库<a href="https://python-pptx.readthedocs.io/en/latest/index.html" target="_blank" rel="external">python-pptx</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pptx <span class="keyword">import</span> Presentation</div><div class="line">ppt = Presentation(<span class="string">'1.pptx'</span>)</div><div class="line">text_runs = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> slide <span class="keyword">in</span> prs.slides:</div><div class="line">    <span class="keyword">for</span> shape <span class="keyword">in</span> slide.shapes:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> shape.has_text_frame:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">for</span> paragraph <span class="keyword">in</span> shape.text_frame.paragraphs:</div><div class="line">            <span class="keyword">for</span> run <span class="keyword">in</span> paragraph.runs:</div><div class="line">                text_runs.append(run.text)</div><div class="line"><span class="keyword">print</span> text_runs</div></pre></td></tr></table></figure>
<p>xls2csv</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PDF&quot;&gt;&lt;a href=&quot;#PDF&quot; class=&quot;headerlink&quot; title=&quot;PDF&quot;&gt;&lt;/a&gt;PDF&lt;/h1&gt;&lt;h3 id=&quot;1-安装PDFMiner&quot;&gt;&lt;a href=&quot;#1-安装PDFMiner&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="python" scheme="http://www.pirrla.cn/categories/python/"/>
    
    
      <category term="python" scheme="http://www.pirrla.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Javascript学习笔记</title>
    <link href="http://www.pirrla.cn/2017/07/21/other/js_notes/"/>
    <id>http://www.pirrla.cn/2017/07/21/other/js_notes/</id>
    <published>2017-07-21T08:36:48.000Z</published>
    <updated>2017-07-24T06:21:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript不区分整数和浮点数，统一用Number表示</p>
<p>JavaScript 大小写敏感</p>
<p>用  // 和 /<em> </em>/ 做注释</p>
<p>&amp;&amp; 与运算 ||或运算</p>
<p>==比较，会自动转换类型 ， === 比较不会转换类型，不同类型false</p>
<p>NaN 不与其他数值相等，判断非数值用isNaN()</p>
<p>js 用null 表空值</p>
<p>js 列表[] 可以由多种不同类型的数值</p>
<p>pop and push 对列表的尾部进行操作</p>
<p>unshift给列表头添加数据，shift = pop 头部版</p>
<p>splice 对列表各种操作</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="string">'Microsoft'</span>, <span class="string">'Apple'</span>, <span class="string">'Yahoo'</span>, <span class="string">'AOL'</span>, <span class="string">'Excite'</span>, <span class="string">'Oracle'</span>];</div><div class="line"><span class="comment">// 从索引2开始删除3个元素,然后再添加两个元素:</span></div><div class="line">arr.splice(<span class="number">2</span>, <span class="number">3</span>, <span class="string">'Google'</span>, <span class="string">'Facebook'</span>); <span class="comment">// 返回删除的元素 ['Yahoo', 'AOL', 'Excite']</span></div><div class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></div><div class="line"><span class="comment">// 只删除,不添加:</span></div><div class="line">arr.splice(<span class="number">2</span>, <span class="number">2</span>); <span class="comment">// ['Google', 'Facebook']</span></div><div class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Oracle']</span></div><div class="line"><span class="comment">// 只添加,不删除:</span></div><div class="line">arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">'Google'</span>, <span class="string">'Facebook'</span>); <span class="comment">// 返回[],因为没有删除任何元素</span></div><div class="line">arr; <span class="comment">// ['Microsoft', 'Apple', 'Google', 'Facebook', 'Oracle']</span></div></pre></td></tr></table></figure>
<p>新浏览器才能用map和set</p>
<p>将所有数值绑定到一个全局变量中，这样避免命名空间重用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 唯一的全局变量MYAPP:</span></div><div class="line"><span class="keyword">var</span> MYAPP = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 其他变量:</span></div><div class="line">MYAPP.name = <span class="string">'myapp'</span>;</div><div class="line">MYAPP.version = <span class="number">1.0</span>;</div><div class="line"></div><div class="line"><span class="comment">// 其他函数:</span></div><div class="line">MYAPP.foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'foo'</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>for (xxx of xxx) { } 遍历用</p>
<p>构造原型</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//原型函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">std</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = std.name || <span class="string">"xiaoming"</span>;</div><div class="line">  <span class="keyword">this</span>.grade = std.grade || <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//定义公用函数</span></div><div class="line">Student.prototype.hello()&#123;</div><div class="line">  alert(<span class="string">"Hello, "</span>+<span class="keyword">this</span>.name+<span class="string">"!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//定义构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStudent</span>(<span class="params">std</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Student(std || &#123;&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有class但是很多浏览器不支持</p>
<p>要加载一个新页面，可以调用<code>location.assign()</code>。如果要重新加载当前页面，调用<code>location.reload()</code>方法非常方便。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript不区分整数和浮点数，统一用Number表示&lt;/p&gt;
&lt;p&gt;JavaScript 大小写敏感&lt;/p&gt;
&lt;p&gt;用  // 和 /&lt;em&gt; &lt;/em&gt;/ 做注释&lt;/p&gt;
&lt;p&gt;&amp;amp;&amp;amp; 与运算 ||或运算&lt;/p&gt;
&lt;p&gt;==比较，会自动转换类型 ，
    
    </summary>
    
      <category term="javascript" scheme="http://www.pirrla.cn/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://www.pirrla.cn/tags/javascript/"/>
    
      <category term="node.js" scheme="http://www.pirrla.cn/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch笔记</title>
    <link href="http://www.pirrla.cn/2017/07/14/es/es_notes/"/>
    <id>http://www.pirrla.cn/2017/07/14/es/es_notes/</id>
    <published>2017-07-14T01:28:34.000Z</published>
    <updated>2017-07-21T08:36:27.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Elasticsearch-5-5-文档"><a href="#Elasticsearch-5-5-文档" class="headerlink" title="Elasticsearch 5.5 文档"></a><strong>Elasticsearch 5.5 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html" target="_blank" rel="external">文档</a></strong></h3><h3 id="Set-up-Elasticsearch"><a href="#Set-up-Elasticsearch" class="headerlink" title="Set up Elasticsearch"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup.html" target="_blank" rel="external">Set up Elasticsearch</a></h3><ul>
<li>ES目录下config/elasticsearch.yml 是ES的配置文件</li>
</ul>
<p>配置如下：详细设置看<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html" target="_blank" rel="external">这里</a></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Cluster</span></div><div class="line"><span class="comment"># 设置cluster的名称</span></div><div class="line"><span class="string">cluster.name:</span> <span class="string">my-application</span></div><div class="line"><span class="comment"># Node</span></div><div class="line"><span class="comment"># 设置node的名称</span></div><div class="line"><span class="string">node.name:</span> <span class="string">node-1</span></div><div class="line"><span class="comment"># 添加node自定义属性</span></div><div class="line"><span class="string">node.attr.rack:</span> <span class="string">r1</span></div><div class="line"><span class="comment"># 存储数据的路径</span></div><div class="line"><span class="comment"># Path to log files:</span></div><div class="line"><span class="string">path.logs:</span> <span class="string">/path/to/logs</span></div><div class="line"><span class="string">...</span></div></pre></td></tr></table></figure>
<p>如需要在ES启动时，再输入node名称等信息可以以下配置：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#text是直接输入数据并显示</span></div><div class="line"><span class="attr">node:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">$&#123;prompt.text&#125;</span></div><div class="line"><span class="comment">#secret则是输入的数据不会在终端上显示</span></div><div class="line"><span class="attr">node:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">$&#123;prompt.secret&#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Enter value for [node.name]:</div></pre></td></tr></table></figure>
<p>这样在启动ES时就需要输入名称了。</p>
<ul>
<li>ES目录下config/log4j2.properties 是ES的日志配置文件</li>
</ul>
<p>注意日志配置文件对多余的<font color="red">空格</font>会解析错误，所以需要保证没有多余的空格。</p>
<h3 id="Set-up-X-Pack"><a href="#Set-up-X-Pack" class="headerlink" title="Set up X-Pack"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-xpack.html" target="_blank" rel="external">Set up X-Pack</a></h3><h3 id="API-Conventions"><a href="#API-Conventions" class="headerlink" title="API Conventions"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/api-conventions.html" target="_blank" rel="external">API Conventions</a></h3><h5 id="Multiple-Indices"><a href="#Multiple-Indices" class="headerlink" title="Multiple Indices"></a>Multiple Indices</h5><p>后文所用的API基本都涉及到<strong>索引名称</strong></p>
<ul>
<li>_all 指所有的索引</li>
<li>索引名称同时支持通配符，如test<em>,te\</em>t</li>
<li>索引名称还支持筛选，如+test*,-test3</li>
</ul>
<p>包含多个索引操作的API支持以下参数：</p>
<ul>
<li>ignore_unavailable - 是否忽略索引如索引名称不存在</li>
<li>allow_no_indices - 当通配符匹配失败后，是否整条request都失败</li>
<li>expand_wildcards - open/close 设置通配符匹配的索引的开关状态</li>
</ul>
<h5 id="Date-math-support-in-index-names"><a href="#Date-math-support-in-index-names" class="headerlink" title="Date math support in index names"></a>Date math support in index names</h5><p>如果需要根据日期去匹配索引，可以使用以下通配符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;static_name&#123;date_math_expr&#123;date_format|time_zone&#125;&#125;&gt;</div></pre></td></tr></table></figure>
<ul>
<li>static_name - 固定的文字部分</li>
<li>date_math_expr - 日期表达式，通常使用now/d</li>
<li>date_format - 日期的显示格式</li>
<li>time_zone - 时区</li>
</ul>
<p>例子：</p>
<table>
<thead>
<tr>
<th>Expression</th>
<th>Resolves to</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;logstash-{now/d}&gt;</code></td>
<td><code>logstash-2024.03.22</code></td>
</tr>
<tr>
<td><code>&lt;logstash-{now/M}&gt;</code></td>
<td><code>logstash-2024.03.01</code></td>
</tr>
<tr>
<td><code>&lt;logstash-{now/M{YYYY.MM}}&gt;</code></td>
<td><code>logstash-2024.03</code></td>
</tr>
<tr>
<td><code>&lt;logstash-{now/M-1M{YYYY.MM}}&gt;</code></td>
<td><code>logstash-2024.02</code></td>
</tr>
<tr>
<td>`&lt;logstash-{now/d{YYYY.MM.dd</td>
<td>+12:00}}&gt;`</td>
<td><code>logstash-2024.03.23</code></td>
</tr>
</tbody>
</table>
<p>其中，由于url需要进行标准化，所以需要对符号进行百分号化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># GET /&lt;logstash-&#123;now/d&#125;&gt;/_search</div><div class="line">GET /%3Clogstash-%7Bnow%2Fd%7D%3E/_search</div><div class="line">&#123;</div><div class="line">  &quot;query&quot; : &#123;</div><div class="line">    &quot;match&quot;: &#123;</div><div class="line">      &quot;test&quot;: &quot;data&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>百分号编码如下：</p>
<table>
<thead>
<tr>
<th><code>&lt;</code></th>
<th><code>%3C</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&gt;</code></td>
<td><code>%3E</code></td>
</tr>
<tr>
<td><code>/</code></td>
<td><code>%2F</code></td>
</tr>
<tr>
<td><code>{</code></td>
<td><code>%7B</code></td>
</tr>
<tr>
<td><code>}</code></td>
<td><code>%7D</code></td>
</tr>
<tr>
<td>`</td>
<td>`</td>
<td><code>%7C</code></td>
</tr>
<tr>
<td><code>+</code></td>
<td><code>%2B</code></td>
</tr>
<tr>
<td><code>:</code></td>
<td><code>%3A</code></td>
</tr>
<tr>
<td><code>,</code></td>
<td><code>%2C</code></td>
</tr>
</tbody>
</table>
<h5 id="Common-options"><a href="#Common-options" class="headerlink" title="Common options"></a>Common options</h5><ul>
<li>美化输出，可以使用 <code>?pretty=true</code>参数</li>
<li>为了将时间、大小（1h,1kb）等变得可读，可以使用<code>?human=true</code>参数</li>
<li>日期时间</li>
<li><ul>
<li>+1h = 加一小时</li>
<li>-1d = 减一天</li>
<li>/d = 取整最近的一天</li>
</ul>
</li>
</ul>
<p>具体的日期表达式如下：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>代表</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>y</code></td>
<td>years</td>
</tr>
<tr>
<td><code>M</code></td>
<td>months</td>
</tr>
<tr>
<td><code>w</code></td>
<td>weeks</td>
</tr>
<tr>
<td><code>d</code></td>
<td>days</td>
</tr>
<tr>
<td><code>h</code></td>
<td>hours</td>
</tr>
<tr>
<td><code>H</code></td>
<td>hours</td>
</tr>
<tr>
<td><code>m</code></td>
<td>minutes</td>
</tr>
<tr>
<td><code>s</code></td>
<td>seconds</td>
</tr>
<tr>
<td><code>ms</code></td>
<td>milliseconds</td>
</tr>
<tr>
<td><code>micros</code></td>
<td>microseconds</td>
</tr>
<tr>
<td><code>nanos</code></td>
<td>nanoseconds</td>
</tr>
</tbody>
</table>
<ul>
<li>错误回溯，可以使用<code>?error_trace=true</code>参数</li>
</ul>
<h3 id="Document-APIs"><a href="#Document-APIs" class="headerlink" title="Document APIs"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs.html" target="_blank" rel="external">Document APIs</a></h3><h5 id="Reading-and-Writing-documents"><a href="#Reading-and-Writing-documents" class="headerlink" title="Reading and Writing documents"></a>Reading and Writing documents</h5><p><strong>基础写操作</strong>：</p>
<p>首先，每一个索引操作来到ES都会首先被送去不同的复制组（复制组指的是ES内含有很多的分片，包括主分片和主分片的复制分片，每一个主分片和其复制分片构成一个复制组）。而分组方法，则是通过路由（路由一般指将文档的ID进行哈希操作，从而根据结果分配到不同的复制组中）分配到不同的复制组中。</p>
<p>进入到一个复制组中，操作将会发送给主分片，主分片将进行以下操作：</p>
<ol>
<li>验证来到的操作，如操作非法则拒绝此操作；</li>
<li>在主分片内进行本地操作，这同样会检查数值域的合法性，如果非法也会拒绝操作；</li>
<li>转发这个操作至复制组中的复制分片，这个操作将是平行进行的；</li>
<li>当整个复制组的复制分片都已经完成了操作，将会通知主分片，主分片将会通知客户端操作的完成性。</li>
</ol>
<p>失败处理：</p>
<ul>
<li>当主分片崩溃了，主持节点将会将一个复制分片提升为主分片</li>
<li>当主分片转发操作给复制分片时，将会检查自己是否还是主分片，否则将造成数据不同步</li>
<li>当主分片转发操作给复制分片，但复制分片崩溃了，主分片将会对master节点进行报告，同时会开始进行新的复制分片的制作流程</li>
</ul>
<p><strong>基础读操作</strong></p>
<p>读操作相对于写操作来说，将轻量很多。</p>
<p>当一个节点解说道了读操作，节点将操作转发到该操作的相关分片中，对应的分片将对该操作负责，不需要一定要主分片进行操作：</p>
<ol>
<li>解析读操作，并转发给相关的复制组；</li>
<li>从复制组选择任一活动的分片，主分片或复制分片都可以；</li>
<li>将分片领域的操作进行执行；</li>
<li>将结果进行汇总，并呈献给客户端。</li>
</ol>
<p><del>待续。待继续整理</del>。</p>
<h5 id="Index-API"><a href="#Index-API" class="headerlink" title="Index API"></a>Index API</h5><p>基础操作</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">PUT twitter/tweet/1</div><div class="line">&#123;</div><div class="line">    "user" : "kimchy",</div><div class="line">    "post_date" : "2009-11-15T14:12:12",</div><div class="line">    "message" : "trying out Elasticsearch"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当该索引不存在时，系统会自动创建索引，并且自动设置mapping。如不想要系统自动创建索引，那么可以将参数<code>action.auto_create_index</code>设置为<code>false</code>。</p>
<p>同时，如果不希望自动设置mapping(设置各个域的数值类型和分析器等参数)，可以在索引创建时设置settings<code>index.mapper.dynamic</code>设置为<code>false</code>。</p>
<p>版本控制</p>
<p>每一次创建文档成功，文档将会自带一个<code>version</code>字段。通过该字段的控制，则可以实现版本控制。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PUT twitter/tweet/1?version=2</div><div class="line">&#123;</div><div class="line">    "message" : "elasticsearch now has versioning support, double cool!"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当需要系统自动创建文档ID时可以使用<strong>POST</strong>方法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">POST twitter/tweet/</div><div class="line">&#123;</div><div class="line">    "user" : "kimchy",</div><div class="line">    "post_date" : "2009-11-15T14:12:12",</div><div class="line">    "message" : "trying out Elasticsearch"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>======================================================</p>
<p>以下为简单笔记</p>
<p>GET 获取信息，HEAD检测是否存在。</p>
<p>批量搜索删除</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">POST twitter/_delete_by_query</div><div class="line">&#123;</div><div class="line">  "query": &#123; </div><div class="line">    "match": &#123;</div><div class="line">      "message": "some message"</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更新数据</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">POST test/type1/1/_update</div><div class="line">&#123;</div><div class="line">    "script" : &#123;</div><div class="line">        "inline": "ctx._source.counter += params.count",</div><div class="line">        "lang": "painless",</div><div class="line">        "params" : &#123;</div><div class="line">            "count" : 4</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>批量筛选更新：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">POST twitter/_update_by_query</div><div class="line">&#123;</div><div class="line">  "script": &#123;</div><div class="line">    "inline": "ctx._source.likes++",</div><div class="line">    "lang": "painless"</div><div class="line">  &#125;,</div><div class="line">  "query": &#123;</div><div class="line">    "term": &#123;</div><div class="line">      "user": "kimchy"</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>reindex</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">POST _reindex</div><div class="line">&#123;</div><div class="line">  "source": &#123;</div><div class="line">    "index": "twitter",</div><div class="line">    "type": "tweet",</div><div class="line">    "query": &#123;</div><div class="line">      "term": &#123;</div><div class="line">        "user": "kimchy"</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  "dest": &#123;</div><div class="line">    "index": "new_twitter"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完整的source_filter 支持通配符</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">GET /_search</div><div class="line">&#123;</div><div class="line">    "_source": &#123;</div><div class="line">        "includes": [ "obj1.*", "obj2.*" ],</div><div class="line">        "excludes": [ "*.description" ]</div><div class="line">    &#125;,</div><div class="line">    "query" : &#123;</div><div class="line">        "term" : &#123; "user" : "kimchy" &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>自定义字段，并输出</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">GET /_search</div><div class="line">&#123;</div><div class="line">    "query" : &#123;</div><div class="line">        "match_all": &#123;&#125;</div><div class="line">    &#125;,</div><div class="line">    "script_fields" : &#123;</div><div class="line">        "test1" : &#123;</div><div class="line">            "script" : &#123;</div><div class="line">                "lang": "painless",</div><div class="line">                "inline": "doc['my_field_name'].value * 2"</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        "test2" : &#123;</div><div class="line">            "script" : &#123;</div><div class="line">                "lang": "painless",</div><div class="line">                "inline": "doc['my_field_name'].value * factor",</div><div class="line">                "params" : &#123;</div><div class="line">                    "factor"  : 2.0</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-preference.html" target="_blank" rel="external">选择在什么分片执行操作</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET /_search?preference=xyzabc123</div><div class="line">&#123;</div><div class="line">    "query": &#123;</div><div class="line">        "match": &#123;</div><div class="line">            "title": "elasticsearch"</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>agg-<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-cardinality-aggregation.html" target="_blank" rel="external">cardinality</a></p>
<p>对多set的可能会出错，对少的比较正确</p>
<p>聚合例子</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">POST /sales/_search?size=0</div><div class="line">&#123;</div><div class="line">    "aggs" : &#123;</div><div class="line">        "t_shirts" : &#123;</div><div class="line">            "filter" : &#123; "term": &#123; "type": "t-shirt" &#125; &#125;,</div><div class="line">            "aggs" : &#123;</div><div class="line">                "avg_price" : &#123; "avg" : &#123; "field" : "price" &#125; &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>自动建立条状图聚类</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">POST /sales/_search?size=0</div><div class="line">&#123;</div><div class="line">    "aggs" : &#123;</div><div class="line">        "prices" : &#123;</div><div class="line">            "histogram" : &#123;</div><div class="line">                "field" : "price",</div><div class="line">                "interval" : 50,</div><div class="line">                "min_doc_count" : 1</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>聚类 stats字段一键显示各种avg/sum/…</p>
<p>In order to disable allowing to delete indices via wildcards or <code>_all</code>, set <code>action.destructive_requires_name</code> setting in the config to <code>true</code>. </p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-rollover-index.html#indices-rollover-index" target="_blank" rel="external">转移不同index内的数据（index太大）</a></p>
<p>添加alias</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">POST /_aliases</div><div class="line">&#123;</div><div class="line">    "actions" : [</div><div class="line">        &#123; "add" : &#123; "indices" : ["test1", "test2"], "alias" : "alias1" &#125; &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>移除alias</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">POST /_aliases</div><div class="line">&#123;</div><div class="line">    "actions" : [</div><div class="line">        &#123; "remove" : &#123; "index" : "test1", "alias" : "alias1" &#125; &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>索引模板</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">PUT _template/template_1</div><div class="line">&#123;</div><div class="line">  "template": "te*",</div><div class="line">  "settings": &#123;</div><div class="line">    "number_of_shards": 1</div><div class="line">  &#125;,</div><div class="line">  "mappings": &#123;</div><div class="line">    "type1": &#123;</div><div class="line">      "_source": &#123;</div><div class="line">        "enabled": false</div><div class="line">      &#125;,</div><div class="line">      "properties": &#123;</div><div class="line">        "host_name": &#123;</div><div class="line">          "type": "keyword"</div><div class="line">        &#125;,</div><div class="line">        "created_at": &#123;</div><div class="line">          "type": "date",</div><div class="line">          "format": "EEE MMM dd HH:mm:ss Z YYYY"</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>三倍重要搜索</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">GET /_search</div><div class="line">&#123;</div><div class="line">  "query": &#123;</div><div class="line">    "multi_match" : &#123;</div><div class="line">      "query" : "this is a test",</div><div class="line">      "fields" : [ "subject^3", "message" ] </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>多个field同用一个名字</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">PUT my_index</div><div class="line">&#123;</div><div class="line">  "mappings": &#123;</div><div class="line">    "my_type": &#123;</div><div class="line">      "properties": &#123;</div><div class="line">        "first_name": &#123;</div><div class="line">          "type": "text",</div><div class="line">          "copy_to": "full_name" </div><div class="line">        &#125;,</div><div class="line">        "last_name": &#123;</div><div class="line">          "type": "text",</div><div class="line">          "copy_to": "full_name" </div><div class="line">        &#125;,</div><div class="line">        "full_name": &#123;</div><div class="line">          "type": "text"</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>master node 个数</p>
<p>最少discovery.zen.minimum_master_nodes=(master_eligible_nodes / 2) + 1</p>
<p>脚本语言（默认painless）</p>
<table>
<thead>
<tr>
<th>Language</th>
<th>Sandboxed</th>
<th>Required plugin</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-painless.html" target="_blank" rel="external"><code>painless</code></a></td>
<td>yes</td>
<td>built-in</td>
</tr>
<tr>
<td><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-groovy.html" target="_blank" rel="external"><code>groovy</code></a></td>
<td><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-security.html" target="_blank" rel="external">no</a></td>
<td>built-in</td>
</tr>
<tr>
<td><a href="https://www.elastic.co/guide/en/elasticsearch/plugins/5.5/lang-javascript.html" target="_blank" rel="external"><code>javascript</code></a></td>
<td><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-security.html" target="_blank" rel="external">no</a></td>
<td><a href="https://www.elastic.co/guide/en/elasticsearch/plugins/5.5/lang-javascript.html" target="_blank" rel="external"><code>lang-javascript</code></a></td>
</tr>
<tr>
<td><a href="https://www.elastic.co/guide/en/elasticsearch/plugins/5.5/lang-python.html" target="_blank" rel="external"><code>python</code></a></td>
<td><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-security.html" target="_blank" rel="external">no</a></td>
<td><a href="https://www.elastic.co/guide/en/elasticsearch/plugins/5.5/lang-python.html" target="_blank" rel="external"><code>lang-python</code></a></td>
</tr>
</tbody>
</table>
<p>By far the fastest most efficient way to access a field value from a script is to use the <code>doc[&#39;field_name&#39;]</code> syntax,</p>
<p>基本概念**</p>
<p>一个cluster是一个或多个node的集合，一个node可以存储index，一个index可以有多个type。</p>
<p><strong>索引</strong></p>
<p>不输入id</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">POST /customer/external</div><div class="line">&#123;</div><div class="line">  "name": "Jane Doe"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>自定id</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PUT /customer/external/2</div><div class="line">&#123;</div><div class="line">  "name": "Jane Doe"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>更新数据</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">POST /customer/external/1/_update</div><div class="line">&#123;</div><div class="line">  "script" : "ctx._source.age += 5"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Note that as of this writing, updates can only be performed on a single document at a time. In the future, Elasticsearch might provide the ability to update multiple documents given a query condition (like an <code>SQL UPDATE-WHERE</code> statement).</p>
<p><strong>批量操作</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">POST /customer/external/_bulk</div><div class="line">&#123;"update":&#123;"_id":"1"&#125;&#125;</div><div class="line">&#123;"doc": &#123; "name": "John Doe becomes Jane Doe" &#125; &#125;</div><div class="line">&#123;"delete":&#123;"_id":"2"&#125;&#125;</div></pre></td></tr></table></figure>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/date-math-index-names.html" target="_blank" rel="external">批量操作日期格式的index</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Elasticsearch-5-5-文档&quot;&gt;&lt;a href=&quot;#Elasticsearch-5-5-文档&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch 5.5 文档&quot;&gt;&lt;/a&gt;&lt;strong&gt;Elasticsearch 5.5 
    
    </summary>
    
      <category term="elasticsearch" scheme="http://www.pirrla.cn/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://www.pirrla.cn/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch股票分析</title>
    <link href="http://www.pirrla.cn/2017/07/13/es/es_stocks/"/>
    <id>http://www.pirrla.cn/2017/07/13/es/es_stocks/</id>
    <published>2017-07-12T16:00:00.000Z</published>
    <updated>2017-07-14T06:25:25.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-制作股票代号-股票名称同义词词典，并添加入路径（同时需要将股票名称添加进拓展词典）"><a href="#1-制作股票代号-股票名称同义词词典，并添加入路径（同时需要将股票名称添加进拓展词典）" class="headerlink" title="1.制作股票代号-股票名称同义词词典，并添加入路径（同时需要将股票名称添加进拓展词典）"></a>1.制作股票代号-股票名称同义词词典，并添加入路径（同时需要将股票名称添加进拓展词典）</h3><p>首先，通过Python，我们将收集股票名称和股票代码来制作同义词词典。</p>
<p>股票数据来源来自于<a href="http://quote.eastmoney.com/stocklist.html" target="_blank" rel="external">东方财富网</a>。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"><span class="comment">#用两个列表分别存储上证和深证各支股票的信息</span></div><div class="line">sh = []</div><div class="line">sz = []</div><div class="line"><span class="keyword">with</span> requests.Session() <span class="keyword">as</span> s:</div><div class="line">    html = s.get(<span class="string">r'http://quote.eastmoney.com/stocklist.html'</span>)</div><div class="line">    soup = BeautifulSoup(html.content, <span class="string">'lxml'</span>)</div><div class="line">    sh_stocks =soup.find_all(<span class="string">'ul'</span>)[<span class="number">7</span>]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sh_stocks.find_all(<span class="string">'li'</span>):</div><div class="line">        sh.append(i.a.text)</div><div class="line">    sz_stocks =soup.find_all(<span class="string">'ul'</span>)[<span class="number">8</span>]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sz_stocks.find_all(<span class="string">'li'</span>):</div><div class="line">        sz.append(i.a.text)</div></pre></td></tr></table></figure>
<p>输出的本文结果为如下格式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">501001,财通精选</div><div class="line">501002,能源互联</div><div class="line">501003,上海改革</div><div class="line">501005,精准医疗</div><div class="line">...</div><div class="line">510190,龙头etf</div><div class="line">510210,综指etf</div><div class="line">510220,中小etf</div><div class="line">510230,金融etf</div><div class="line">...</div></pre></td></tr></table></figure>
<p><img src="http://mednoter.com/media/files/2014/Sep/2014-09-07-flow.png" alt=""></p>
<p>首先，由于分词ik不能识别股票名称（不能正确分词），即使添加了同义词词典也无法检索到，所以需要在拓展词库中添加全部股票名称。</p>
<p>其中，由于用户输入一般是忽略大小写的，为了方便用户能够输入大小写都能匹配到股票信息，我们将拓展词典、同义词词典的股票名称信息都更改为小写，这样无论用户输入大写还是小写都能匹配到股票。</p>
<p><del>暂时没有找到关闭 filter <em> 号的方法，所以搜索不了 </em>stXX股票</del></p>
<p><del>有没有可能去除st等标记，因标记是在原股票名称前添加，不改变原股票名称</del></p>
<h3 id="2-学习使用html-strip-filter"><a href="#2-学习使用html-strip-filter" class="headerlink" title="2.学习使用html_strip filter"></a>2.学习使用html_strip filter</h3><p>html strip filter 代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">"char_filter": &#123;</div><div class="line">        "my_html": &#123;</div><div class="line">          "type": "html_strip",</div><div class="line">          "escaped_tags": []</div><div class="line">        &#125;</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<p>其中<strong>escaped_tags</strong>字段表示该列表之中的标签不用去除</p>
<h3 id="3-创建索引，并设置IK为Tokenizer，Filter包括同义词和html-strip"><a href="#3-创建索引，并设置IK为Tokenizer，Filter包括同义词和html-strip" class="headerlink" title="3.创建索引，并设置IK为Tokenizer，Filter包括同义词和html_strip"></a>3.创建索引，并设置IK为Tokenizer，Filter包括同义词和html_strip</h3><p>完整设置和mapping如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    "settings": &#123;</div><div class="line">        "index" : &#123;</div><div class="line">            "analysis" : &#123;</div><div class="line">                "analyzer" : &#123;</div><div class="line">                    "my_analyzer" : &#123;</div><div class="line">                        "tokenizer" : "my_ik",</div><div class="line">                        "filter" : ["my_stop","synonym"],</div><div class="line">                        "char_filter":  ["my_html"]</div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                "char_filter": &#123;</div><div class="line">                    "my_html": &#123;</div><div class="line">                      "type": "html_strip",</div><div class="line">                      "escaped_tags": []</div><div class="line">                    &#125;</div><div class="line">                  &#125;,</div><div class="line">                "filter" : &#123;</div><div class="line">                    "synonym" : &#123;</div><div class="line">                        "type" : "synonym",</div><div class="line">                        "synonyms_path" : "synonym.txt"</div><div class="line">                    &#125;,</div><div class="line">                    "my_stop":&#123;</div><div class="line">                      "type":"stop",</div><div class="line">                      "stopwords":"_none_"</div><div class="line">                    &#125;</div><div class="line">                  &#125;,</div><div class="line">                  "tokenizer":&#123;</div><div class="line">                  "my_ik":&#123;</div><div class="line">                    "type":"ik_max_word",</div><div class="line">                    "enable_lowercase":true</div><div class="line">                &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    "mappings":&#123;</div><div class="line">    "news":&#123; //类型名，这里为news</div><div class="line">    "properties": &#123;</div><div class="line">        "title": &#123;</div><div class="line">            "type":      "text",</div><div class="line">            "analyzer":  "my_analyzer"</div><div class="line">        &#125;,</div><div class="line">        "keywords":&#123;</div><div class="line">            "type":      "text",</div><div class="line">            "analyzer":  "my_analyzer"</div><div class="line">        &#125;,</div><div class="line">        "content":&#123;</div><div class="line">            "type":      "text",</div><div class="line">            "analyzer":  "my_analyzer"</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还需要完善：</p>
<ul>
<li>对于不需要和不希望加入搜索的字段进行not_analyze设置</li>
<li>设置日期字段的数值类型date</li>
</ul>
<h3 id="4-对已有数据进行reindex-约34w数据"><a href="#4-对已有数据进行reindex-约34w数据" class="headerlink" title="4.对已有数据进行reindex(约34w数据)"></a>4.对已有数据进行reindex(约34w数据)</h3><p>之前进行reindex速度明显比这次高，原因是上次没有使用analyzer。</p>
<p>此次reindex <strong>34w</strong>数据共用时<strong>793</strong>秒，每1秒操作<strong>428</strong>个文档。</p>
<p>如无analyzer，则每一秒操作<strong>1581</strong>个文档。</p>
<h3 id="5-使用function-score进行filter检索，发布时间越靠前的得分越高"><a href="#5-使用function-score进行filter检索，发布时间越靠前的得分越高" class="headerlink" title="5.使用function_score进行filter检索，发布时间越靠前的得分越高"></a>5.使用function_score进行filter检索，发布时间越靠前的得分越高</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">GET test/news/_search?search_type=dfs_query_then_fetch</div><div class="line">&#123;</div><div class="line">  "_source": ["title","publishdate"], </div><div class="line">  "query": &#123;</div><div class="line">    "function_score": &#123;</div><div class="line">        "query":&#123;</div><div class="line">          "match": &#123;</div><div class="line">            "title": "600340"</div><div class="line">          &#125;</div><div class="line">        &#125; ,</div><div class="line">         "functions": [ </div><div class="line">            &#123;</div><div class="line">                    "exp": &#123;</div><div class="line">                        "publishdate" : &#123;</div><div class="line">                            "origin": "now",</div><div class="line">                            "offset": "1h",</div><div class="line">                            "scale" : "30d",</div><div class="line">                            "decay": 0.2</div><div class="line">                        &#125;</div><div class="line">                    &#125;,</div><div class="line">                    "weight": 200</div><div class="line">                &#125;</div><div class="line">        ],</div><div class="line">        "boost_mode": "sum"</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>其中使用的是<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/query-dsl-function-score-query.html#_supported_fields_for_decay_functions" target="_blank" rel="external">function score query</a> 的 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/query-dsl-function-score-query.html#function-decay" target="_blank" rel="external">decayfunction</a>(衰减函数)。</p>
<p>各参数设置如图：</p>
<p><img src="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/images/decay_2d.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-制作股票代号-股票名称同义词词典，并添加入路径（同时需要将股票名称添加进拓展词典）&quot;&gt;&lt;a href=&quot;#1-制作股票代号-股票名称同义词词典，并添加入路径（同时需要将股票名称添加进拓展词典）&quot; class=&quot;headerlink&quot; title=&quot;1.制作股票
    
    </summary>
    
      <category term="elasticsearch" scheme="http://www.pirrla.cn/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://www.pirrla.cn/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch相关性</title>
    <link href="http://www.pirrla.cn/2017/07/12/es/es_similarity/"/>
    <id>http://www.pirrla.cn/2017/07/12/es/es_similarity/</id>
    <published>2017-07-11T16:00:00.000Z</published>
    <updated>2017-07-14T00:55:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ElasticSearch-相关性"><a href="#ElasticSearch-相关性" class="headerlink" title="ElasticSearch 相关性"></a>ElasticSearch 相关性</h1><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>Elasticsearch版本：5.4.2</p>
<p>Kibana版本：5.4.2</p>
<p>Logstash版本：5.4.2</p>
<p>Elasticsearch在执行搜索后，返回结果的排序是根据字段<strong>_score</strong>决定的。排序结果是倒序排列，得分越高，越在前面。</p>
<p><strong>_score</strong>字段即量化表明查询语句与文档内容的相似性与匹配度，为了更好地显示搜索结果，我们需要深入了解该数值的来源与相关算法，本文讨论的相关性则为此。</p>
<h3 id="2-语句"><a href="#2-语句" class="headerlink" title="2.语句"></a>2.语句</h3><p>本文通过调用<strong>_search</strong>的<strong>explain</strong>参数进行调试。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">GET /_search?explain</div><div class="line">&#123;</div><div class="line">  "query":&#123;</div><div class="line">    "match":&#123;</div><div class="line">      "title":"a"</div><div class="line">  &#125;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-经典TF-IDF算法"><a href="#3-经典TF-IDF算法" class="headerlink" title="3.经典TF/IDF算法"></a>3.经典TF/IDF算法</h3><p>在Elasticsearch 5.X 版本前，Elasticsearch默认使用的是经典的TF/IDF算法，即：</p>
<p><strong>检索词频率（TermFrequency）</strong></p>
<p>检索词在该字段出现的频率？出现频率越高，相关性也越高。 字段中出现过 5 次要比只出现过 1 次的相关性高。当然，词频不是在score计算中直接使用的。通常是取词频（TermFrequency）的平方根。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TF_Score = sqrt(termFreq)</div></pre></td></tr></table></figure>
<p><strong>反向文档频率（InverseDocumentFrequency）</strong></p>
<p>每个检索词在索引中出现的频率？频率越高，相关性越低。检索词出现在多数文档中会比出现在少数文档中的权重更低。例如中文中，“的”、“得”，“不”等词因在大多数文档中出现，所以相关性较低。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IDF_Score = log(maxDocs/docFreq+1)+1</div></pre></td></tr></table></figure>
<p><strong>字段长度准则（FieldNorms）</strong></p>
<p>字段的长度是多少？长度越长，相关性越低。 检索词出现在一个短的 title 要比同样的词出现在一个长的 content 字段权重更大。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FieldNorms = 1 / sqrt(length)</div></pre></td></tr></table></figure>
<p>所以最终得分为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Score = TF_Score*IDF_Score*FieldNorms</div><div class="line">      = log(maxDocs / (docFreq + 1)) * sqrt(termFreq) * (1/sqrt(length))</div></pre></td></tr></table></figure>
<p>*maxDocs有可能会数到已删除文档！</p>
<h3 id="4-BM25算法"><a href="#4-BM25算法" class="headerlink" title="4.BM25算法"></a>4.BM25算法</h3><p>BM25是Elasticsearch5.X的默认相关性算法，它根据TF/IDF算法改进而来。它由两部分组成，分别是IDF和TFNorm.</p>
<p>其中，根据不同的检索方法，数值各不相同，由于Elasticsearch是分布式系统，所以默认的检索方法为Query_Then_Search（该方法为在各自分片内进行检索，然后各分片返回各自的搜索结果至协调分片，非全局检索，当数据量充足时，效果良好，但当数据量较少时，应使用全局检索，请参看后文DFS_Query_Then_Search方法）</p>
<p><strong>单词检索</strong>（即检索内容只包含单个英语单词（空格间隔）或单个中文分词（由Tokenizer划分））：</p>
<p>IDF</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5))</div></pre></td></tr></table></figure>
<p>TFNorm</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">termfreq * (k1 + 1)) / (termfreq + k1 * (1 - b + b * fieldLength / avgFieldLength)</div></pre></td></tr></table></figure>
<ul>
<li>docCount - 该索引该分片的文档总数</li>
<li>docFreq - 该索引内该分片内，含有检索内容的文档的数量</li>
<li>termFreq - 包含该检索内容的文档的检索内容出现次数</li>
<li>k1 &amp; b - BM25参数，常分别设为 1.2 和 0.75</li>
<li>fieldLength - 包含该检索内容的文档的长度</li>
<li>avgFieldLength - 该索引该分片的平均文档长度</li>
</ul>
<p><strong>多词检索</strong></p>
<p>如果检索内容为一段话或多个词语，首先通过Analyzer将一段话或多个词语进行筛选和划分，包括大小写转换、停用词去除、词根筛选、同义词转换、分词（英文根据空格划分，中文根据Tokenizer划分，本文使用中文分词工具ik）。然后将得到的多个词语逐个进行单词检索，然后最终得分为多个词语的得分的总和。</p>
<h3 id="5-其他算法"><a href="#5-其他算法" class="headerlink" title="5.其他算法"></a>5.其他算法</h3><p>如果需要更换算法，可以在创建索引的时候，添加settings设置，更改默认的相关性算法。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">PUT /test</div><div class="line">&#123;</div><div class="line">  "settings": &#123;</div><div class="line">    "index": &#123;</div><div class="line">      "similarity": &#123;</div><div class="line">        "default": &#123;</div><div class="line">          "type": "classic"</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可选算法有</p>
<ul>
<li>“BM25” - 如无设置算法，则默认为BM25算法</li>
<li>“classic” - 经典TF/IDF算法</li>
</ul>
<p>除了以上的两种算法，其他的算法需要<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules-similarity.html#lm_dirichlet" target="_blank" rel="external">配置参数</a></p>
<ul>
<li>“<a href="http://lucene.apache.org/core/5_2_1/core/org/apache/lucene/search/similarities/DFRSimilarity.html" target="_blank" rel="external">DFR</a>“  / “<a href="http://trec.nist.gov/pubs/trec21/papers/irra.web.nb.pdf" target="_blank" rel="external">DFI</a>“  / “<a href="http://lucene.apache.org/core/5_2_1/core/org/apache/lucene/search/similarities/IBSimilarity.html" target="_blank" rel="external">IB</a>“ / “<a href="http://lucene.apache.org/core/5_2_1/core/org/apache/lucene/search/similarities/LMDirichletSimilarity.html" target="_blank" rel="external">LMDirichlet</a>“ / “<a href="http://lucene.apache.org/core/5_2_1/core/org/apache/lucene/search/similarities/LMJelinekMercerSimilarity.html" target="_blank" rel="external">LMJelinekMercer</a>“</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">"similarity" : &#123;</div><div class="line">  "my_similarity" : &#123;</div><div class="line">    "type" : "DFR",</div><div class="line">    "basic_model" : "g",</div><div class="line">    "after_effect" : "l",</div><div class="line">    "normalization" : "h2",</div><div class="line">    "normalization.h2.c" : "3.0"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再在索引中设置mapping以应用算法</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"book"</span> : &#123;</div><div class="line">    <span class="attr">"properties"</span> : &#123;</div><div class="line">      <span class="attr">"title"</span> : &#123; <span class="attr">"type"</span> : <span class="string">"text"</span>, <span class="attr">"similarity"</span> : <span class="string">"my_similarity"</span> &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6-Function-Score"><a href="#6-Function-Score" class="headerlink" title="6.Function Score"></a>6.Function Score</h3><p>首先，function score的语句如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">GET test6/test/_search?search_type=dfs_query_then_fetch</div><div class="line">&#123;</div><div class="line">  "query": &#123;</div><div class="line">    "function_score": &#123;</div><div class="line">        "query":&#123; //首先是检索体</div><div class="line">          "match_all": &#123;</div><div class="line">          &#125;</div><div class="line">        &#125;,</div><div class="line">         "functions": [  //Functions可以添加多种脚本和过滤器</div><div class="line">          &#123;              //使用一个数组将各个function结合起来</div><div class="line">            "filter": &#123;  // 过滤器</div><div class="line">              "match": &#123; "title": "a" &#125; &#125;,</div><div class="line">              "weight": 23 // weight 直接给符合过滤器的文档权重分</div><div class="line">          &#125;,</div><div class="line">          &#123;</div><div class="line">            "script_score": &#123; //脚本打分器</div><div class="line">              "script": &#123;     //只能对字段类型为数值的进行数学操作</div><div class="line">               "inline": "Math.log(2 + doc['votes'].value)"</div><div class="line">          &#125; </div><div class="line">         &#125;</div><div class="line">        &#125;</div><div class="line">        ],</div><div class="line">      "boost":5, //将该数值影响得分</div><div class="line">      "score_mode":"multiply", //functions内多个脚本的得分处理办法</div><div class="line">      "boost_mode":"multiply", //检索得分和函数得分的处理办法</div><div class="line">      "min_score":40, //返回搜索结果所需要的最少得分</div><div class="line">      "random_score":&#123;&#125;, //生成一个随机数，影响得分</div><div class="line">      "max_boost":10 //无论函数、脚本如何影响得分，最终得分最大值为此</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>其中<strong>boost_mode</strong>（检索得分与函数得分d的处理方式）的模式有：</p>
<ul>
<li><p>multiply - 检索得分和函数得分的积（默认）</p>
</li>
<li><p>sum - 检索得分和函数得分的和</p>
</li>
<li><p>min - 检索得分和函数得分之中的较小值</p>
</li>
<li><p>max - 检索得分和函数得分之中的较大值</p>
</li>
<li><p>replace - 函数得分代替检索得分</p>
<p>​</p>
</li>
</ul>
<p>而后在函数内部中不同脚本、函数和过滤器也需要进行得分处理，<strong>score_mode</strong>:</p>
<ul>
<li><p>multiply - 函数结果求积（默认）</p>
</li>
<li><p>sum - 函数结果求和</p>
</li>
<li><p>min - 函数结果最小值</p>
</li>
<li><p>max - 函数结果最大值</p>
</li>
<li><p>avg - 函数结果平均值</p>
</li>
<li><p>first - 首个函数结果作为最终结果</p>
<p>​</p>
</li>
</ul>
<p><strong>脚本评分</strong>（script_score）例子中使用的是简洁版本，其完整版本为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">"script_score": &#123;</div><div class="line">          "params": &#123;  // 参数字段，以","分隔</div><div class="line">            "threshold": 80,</div><div class="line">            "discount": 0.1,</div><div class="line">            "target": 10</div><div class="line">          &#125;,</div><div class="line">  		  //脚本字段，以";"分隔语句</div><div class="line">          "script": "price  = doc['price'].value; margin = doc['margin'].value;</div><div class="line">          if (price &lt; threshold) &#123; return price * margin / target &#125;;</div><div class="line">          return price * (1 - discount) * margin / target;" </div><div class="line">        &#125;</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<h3 id="7-同义词"><a href="#7-同义词" class="headerlink" title="7.同义词"></a>7.同义词</h3><p>使用同义词进行检索时，部分数据会发生变化，以BM25算法为例：</p>
<p>b,c为同义词</p>
<ul>
<li>docCount - 文档总数不变</li>
<li>docFreq - 所有包含b或c的文档的数量</li>
<li>termFreq - 如有一次b或c出现，则算双倍次数</li>
<li>k1 &amp; b - 不变</li>
<li>fieldLength - <del>不变</del> 经测试，目前认为是取同义词中，长度最长的为该文档长度</li>
<li>avgFieldLength - 每个b或c算双倍大小</li>
</ul>
<h3 id="8-DFS-Query-Then-Fetch"><a href="#8-DFS-Query-Then-Fetch" class="headerlink" title="8.DFS Query Then Fetch"></a>8.DFS Query Then Fetch</h3><p>可以全局搜索，当数据量较少时可以使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET /_search?search_type=dfs_query_then_fetch</div></pre></td></tr></table></figure>
<h3 id="资料参考："><a href="#资料参考：" class="headerlink" title="资料参考："></a>资料参考：</h3><p>[1] <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/relevance-intro.html" target="_blank" rel="external">Elasticsearch文档-什么是相关性？</a></p>
<p>[2] <a href="http://opensourceconnections.com/blog/2015/10/16/bm25-the-next-generation-of-lucene-relevation/" target="_blank" rel="external">BM25 The Next Generation of Lucene Relevance</a></p>
<p>[3] <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules-similarity.html" target="_blank" rel="external">Elasticsearch文档-Similarity module</a></p>
<p>[4] <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html" target="_blank" rel="external">Elasticsearch文档-Function Score Query</a></p>
<p>[5] <a href="https://www.elastic.co/blog/understanding-query-then-fetch-vs-dfs-query-then-fetch" target="_blank" rel="external">Elasticsearch文档-DFS-DFS Query Then Fetch</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ElasticSearch-相关性&quot;&gt;&lt;a href=&quot;#ElasticSearch-相关性&quot; class=&quot;headerlink&quot; title=&quot;ElasticSearch 相关性&quot;&gt;&lt;/a&gt;ElasticSearch 相关性&lt;/h1&gt;&lt;h3 id=&quot;1-简介&quot;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://www.pirrla.cn/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://www.pirrla.cn/tags/elasticsearch/"/>
    
  </entry>
  
</feed>
