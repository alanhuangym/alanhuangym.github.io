<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Note down something</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.pirrla.cn/"/>
  <updated>2017-12-27T07:22:08.000Z</updated>
  <id>http://www.pirrla.cn/</id>
  
  <author>
    <name>Alan Wong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jenkins学习笔记7-Docker WebGUI管理</title>
    <link href="http://www.pirrla.cn/2017/12/24/jenkins/jenkins7/"/>
    <id>http://www.pirrla.cn/2017/12/24/jenkins/jenkins7/</id>
    <published>2017-12-23T16:00:00.000Z</published>
    <updated>2017-12-27T07:22:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Docker-WebGUI管理"><a href="#1-Docker-WebGUI管理" class="headerlink" title="1. Docker WebGUI管理"></a>1. Docker WebGUI管理</h3><ol>
<li><p><a href="https://github.com/shipyard/shipyard" target="_blank" rel="external">shipyard</a>国产，但是20天前刚刚宣布停止更新</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins22.png" alt=""></p>
</li>
<li><p><a href="http://rancher.com/" target="_blank" rel="external">rancher</a> 硬性条件：需要一台linux服务器做主机，至少2G内存和20G硬盘，较少更新</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins23.png" alt=""></p>
</li>
<li><p><a href="https://github.com/kevana/ui-for-docker" target="_blank" rel="external">kevana</a>已停止更新</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins24.png" alt=""></p>
</li>
<li><p><a href="https://portainer.io/" target="_blank" rel="external">portainer</a>比较轻量，github显示更新及时</p>
</li>
</ol>
<p>此处选择了portainer。</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins19.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-Docker-WebGUI管理&quot;&gt;&lt;a href=&quot;#1-Docker-WebGUI管理&quot; class=&quot;headerlink&quot; title=&quot;1. Docker WebGUI管理&quot;&gt;&lt;/a&gt;1. Docker WebGUI管理&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p
    
    </summary>
    
      <category term="jenkins" scheme="http://www.pirrla.cn/categories/jenkins/"/>
    
    
      <category term="jenkins" scheme="http://www.pirrla.cn/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins学习笔记6-搭建gitlabs仓库&amp;Gtilab实现代码质量管理（提交到代码仓库前）</title>
    <link href="http://www.pirrla.cn/2017/12/23/jenkins/jenkins6/"/>
    <id>http://www.pirrla.cn/2017/12/23/jenkins/jenkins6/</id>
    <published>2017-12-22T16:00:00.000Z</published>
    <updated>2018-01-05T01:14:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-搭建gitlab仓库"><a href="#1-搭建gitlab仓库" class="headerlink" title="1. 搭建gitlab仓库"></a>1. 搭建gitlab仓库</h3><h5 id="1-1-安装前准备工作"><a href="#1-1-安装前准备工作" class="headerlink" title="1.1 安装前准备工作"></a>1.1 安装前准备工作</h5><p>由于需要实现代码仓库的质量管理操作，所以我们需要搭建一个gitlab的仓库。</p>
<blockquote>
<p>GitLab是一个利用 <code>Ruby on Rails</code> 开发的开源应用程序，实现一个自托管的Git项目仓库，可通过Web界面进行访问公开的或者私人项目。 </p>
<p>　　GitLab拥有与Github类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。</p>
</blockquote>
<p>在<a href="http://pirrla.cn/2017/12/21/jenkins/jenkins4/" target="_blank" rel="external">之前的教程</a>里，我们已经装好了docker，现在有了docker，所以搭建运行环境都比较方便，我们这里直接使用docker进行gitlab的搭建。</p>
<p>使用以下命令拉取所需要的docker镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker pull sameersbn/redis</div><div class="line">docker pull sameersbn/postgresql</div><div class="line">docker pull sameersbn/gitlab</div></pre></td></tr></table></figure>
<p>这里由于docker的官方镜像服务器在国外，所以访问速度比较慢。我们可以选择使用阿里云的镜像服务器进行加速。</p>
<p><a href="http://www.cnblogs.com/anliven/p/6218741.html" target="_blank" rel="external">http://www.cnblogs.com/anliven/p/6218741.html</a></p>
<h5 id="1-2-PostgreSQL介绍"><a href="#1-2-PostgreSQL介绍" class="headerlink" title="1.2 PostgreSQL介绍"></a>1.2 PostgreSQL介绍</h5><p>docker运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">docker run --name postgresql -d \</div><div class="line">-e &apos;DB_NAME=gitlabhq_production&apos; \</div><div class="line">-e &apos;DB_USER=gitlab&apos; \</div><div class="line">-e &apos;DB_PASS=password&apos; \</div><div class="line">-e &apos;DB_EXTENSION=pg_trgm&apos; \</div><div class="line">-v /Users/alan/postgresql/data:/var/lib/postgresql \</div><div class="line">sameersbn/postgresql</div></pre></td></tr></table></figure>
<h5 id="1-3-Redis介绍"><a href="#1-3-Redis介绍" class="headerlink" title="1.3 Redis介绍"></a>1.3 Redis介绍</h5><p>docker运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker run --name redis -d \</div><div class="line">-v /Users/alan/redis/data:/var/lib/redis \</div><div class="line">sameersbn/redis</div></pre></td></tr></table></figure>
<h5 id="1-4-搭建Gitlab"><a href="#1-4-搭建Gitlab" class="headerlink" title="1.4 搭建Gitlab"></a>1.4 搭建Gitlab</h5><p>当我们将PostgreSQL和redis跑起来之后，我们就可以进行gitlab的启动了。</p>
<p>docker运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">docker run --name gitlab -d \</div><div class="line">--link postgresql:postgresql --link redis:redisio \</div><div class="line">-p 10022:22 -p 10080:80 \</div><div class="line">-e &apos;GITLAB_PORT=10080&apos; \</div><div class="line">-e &apos;GITLAB_SSH_PORT=10022&apos; \</div><div class="line">-e &apos;GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alpha-numeric-string&apos; \</div><div class="line">-e &apos;GITLAB_SECRETS_SECRET_KEY_BASE=long-and-random-alpha-numeric-string&apos; \</div><div class="line">-e &apos;GITLAB_SECRETS_OTP_KEY_BASE=long-and-random-alpha-numeric-string&apos; \</div><div class="line">-e &apos;GITLAB_HOST=服务器地址&apos; \</div><div class="line">-e &apos;GITLAB_EMAIL=邮箱地址&apos; \</div><div class="line">-e &apos;SMTP_ENABLED=true&apos; \</div><div class="line">-e &apos;SMTP_DOMAIN=www.sina.com&apos; \</div><div class="line">-e &apos;SMTP_HOST=smtp.sina.com&apos; \</div><div class="line">-e &apos;SMTP_STARTTLS=false&apos;  \</div><div class="line">-e &apos;SMTP_USER=邮箱地址&apos; \</div><div class="line">-e &apos;SMTP_PASS=邮箱密码&apos; \</div><div class="line">-e &apos;SMTP_AUTHENTICATION=login&apos; \</div><div class="line">-e &apos;GITLAB_BACKUP_SCHEDULE=daily&apos; \</div><div class="line">-e &apos;GITLAB_BACKUP_TIME=10:30&apos; \</div><div class="line">-v /home/root/opt/gitlab/data:/home/git/data \</div><div class="line">sameersbn/gitlab</div></pre></td></tr></table></figure>
<h5 id="1-5gitlab配置"><a href="#1-5gitlab配置" class="headerlink" title="1.5gitlab配置"></a>1.5gitlab配置</h5><p>当我们把gitlab运行起来之后，就可以访问默认的10080端口访问gitlab了。</p>
<font color="red">注意到可能初次访问有时会出现502错误，多试几次即可</font>

<p>当初次进入gitlab的页面时，需要重置管理员密码，然后跳转到登录界面。</p>
<p>默认用户名是root，密码为刚刚设置的密码。</p>
<p>登录完成之后就可以进入gitlab页面，具体使用跟github网站类似。</p>
<p>首先需要将本机的公钥输入到设置当中进行身份验证。</p>
<p>右上角找到<strong>settings</strong></p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins26.png" alt=""></p>
<p>左侧找到<strong>SSH Keys</strong></p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins27.png" alt=""></p>
<p>将本机的公钥填入即可，生成公钥可参考<a href="http://blog.csdn.net/qaz13177_58_/article/details/27544177" target="_blank" rel="external">如何生成ssh公钥</a></p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins28.png" alt=""></p>
<p>现在即可如github一般使用gitlab了，可参考我的<a href="http://pirrla.cn/2017/03/16/other/GitTutorial_ByLiaoxuefeng/" target="_blank" rel="external">GIT学习笔记</a>，除了有一点不同</p>
<p>在github时，我们对github的访问是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git@github.com:alanhuangym/learngit.git</div></pre></td></tr></table></figure>
<p>现在使用gitlab我们使用ssh（10022端口）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh://git@localhost:10022/root/test.git</div></pre></td></tr></table></figure>
<p>当然也可以使用http连接（10080端口）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:10080/root/test.git</div></pre></td></tr></table></figure>
<h3 id="2-搭建基于git的代码质量管理"><a href="#2-搭建基于git的代码质量管理" class="headerlink" title="2.搭建基于git的代码质量管理"></a>2.搭建基于git的代码质量管理</h3><p>对于git，我们主要使用的是git hook对git进行代码质量管理。</p>
<p>代码质量管理不仅仅是指希望对代码可以执行，没有语法错误，我们更希望能实现例如代码注释率、代码重复率等高级指标，从而提高代码仓库的代码质量的目的，避免低质量、错误的代码入库。</p>
<blockquote>
<p>Git 钩子是在 Git 仓库中特定事件发生时自动运行的脚本。它可以让你自定义 Git 内部的行为，在开发周期中的关键点触发自定义的行为。</p>
<p>Git 钩子最常见的使用场景包括推行提交规范，根据仓库状态改变项目环境，和接入持续集成工作流。但是，因为脚本可以完全定制，你可以用 Git 钩子来自动化或者优化你开发工作流中任意部分。</p>
</blockquote>
<p>我们知道，git有两个仓库，一个是本地仓库，一个是远程仓库。所以对git的代码质量管理也有两个层面，一个是本地层面的<strong>Client-Side Hooks</strong>，另一个则是服务器层面的<strong>Server-Side Hooks</strong>。</p>
<h5 id="2-1-本地仓库管理"><a href="#2-1-本地仓库管理" class="headerlink" title="2.1 本地仓库管理"></a>2.1 本地仓库管理</h5><p>不论使用的是gitlab或者github，都有本地仓库hook管理。</p>
<p>在每一个git的项目中，都有一个<code>.git</code>隐藏文件夹，进入到里面的<code>hook</code>文件夹就可以看到一些已经预设好的hook脚本。</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins29.png" alt=""></p>
<p>他们都带着<code>.sample</code>的后缀，证明他们是供我们参考的，拓展名防止它们默认被执行，如果希望执行这些hook，可以将<code>.sample</code>后缀去除。</p>
<p>这里钩子的脚本语言没有限制，一般的shell，ruby，python都可以。</p>
<p><strong>命名方式</strong>是决定他们在Git的哪一步被执行，所以命名方式需要注意，例如<code>pre-commit</code>钩子就是在用户进行commit操作的时候，在进行commit操作之前运行，详细的每个钩子的执行位置可以查看<a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks" target="_blank" rel="external">官方文档</a>，这里介绍一些比较实用的。</p>
<ul>
<li><code>pre-commit</code>是我们希望实现的代码质量管理的一个好钩子，它在用户在进行<code>git commit -m &quot;注释&quot;</code>提交修改到本地仓库时执行，在提交操作之前执行脚本，如果脚本没有通过，则不会执行提交修改操作，返回错误。</li>
</ul>
<p>这样的话我们就可以通过<code>pre-commit</code>钩子实现代码质量管理了，在<code>pre-commit</code>中写入代码质量管理的脚本，当质量过关时，返回<code>0</code>，即脚本已通过，可以执行<code>commit</code>操作，当质量不过关时，返回<code>非0数值</code>，此时脚本未通过，<code>commit</code>操作未成功，即实现了阻止错误、低质量代码进入代码库的操作。</p>
<p><font color="red">但是</font>我们需要注意到，<code>.git</code>文件是不会提交到远程仓库的，所以<code>pre-commit</code>脚本是不能同步到所有的协作者<code>.git</code>文件夹中的。</p>
<p>即是<code>pre-commit</code>脚本的作用域只在本机，且不受服务器控制（可以被本机删除而不执行）。所以，如果希望通过<code>pre-commit</code>进行版本质量管理，只能将脚本放在<code>.git</code>文件夹外，提交到远程仓库，同时需要复制文件进每一个协作者的<code>.git/hook</code>文件夹中。这样是一种<strong>鼓励形式</strong>的代码质量管理，可行性不高。</p>
<h5 id="2-2-远程仓库管理（重点）"><a href="#2-2-远程仓库管理（重点）" class="headerlink" title="2.2 远程仓库管理（重点）"></a>2.2 远程仓库管理（重点）</h5><p>由于本地仓库的钩子不能实现我们希望的效果，所以我们选择在服务端进行钩子脚本构建。在服务器端构建钩子有以下好处：</p>
<ul>
<li>无法被本地修改，强制进行质量管理</li>
<li>可以统一在服务器进行对质量管理阈值的修改</li>
</ul>
<p>同时也有部分的缺点：</p>
<ul>
<li>没有一个通用的代码质量管理软件，只能对应每一个项目建立相对语言的代码质量管理</li>
</ul>
<h6 id="2-2-1-全局钩子"><a href="#2-2-1-全局钩子" class="headerlink" title="2.2.1 全局钩子"></a>2.2.1 全局钩子</h6><p>当使用docker构建gitlab时，远程仓库的脚本存在于docker容器内的<code>/home/git/gitlab-shell/hooks</code>路径当中。</p>
<p>进入docker容器内可以使用命令<code>docker exec -it 容器ID /bin/bash</code></p>
<p>这个路径下存放有三个钩子，分别是<code>pre-receive</code>，<code>post-receive</code>和<code>update</code>。</p>
<p>这三个是<font color="red">gitlab全局的钩子脚本</font>，就是这三个脚本对gitlab内的所有项目启用。他们三个的运行顺序如下</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins32.png" alt=""></p>
<p>他们各自代表的步骤是：</p>
<ul>
<li><p>pre-receive</p>
<p>在服务器收到用户推送的代码之前，进行操作</p>
</li>
</ul>
<ul>
<li><p>update</p>
<p>服务器已经收到代码之后，对分支进行更新的操作，如果有多个分支则会运行多次update，且update操作之间<font color="red">相互独立</font>，失败不影响其他</p>
</li>
</ul>
<ul>
<li><p>post-receive</p>
<p>在服务器已经更新完服务器端的代码之后的操作，一般是对客户返回信息</p>
</li>
</ul>
<p>所以如果我们需要对代码进行质量管理，应该选择的是<code>update</code>钩子。</p>
<h6 id="2-2-2-项目钩子"><a href="#2-2-2-项目钩子" class="headerlink" title="2.2.2 项目钩子"></a>2.2.2 项目钩子</h6><p>但是如果我们想用这三个全局钩子对所有的项目进行质量管理是不科学的，首先是因为没有一个通用的全代码质量管理工具，所以不能对全局使用同一个脚本，需要对不同的编程语言使用不同的脚本，其次，每一个项目可能会有特殊的需求，使用全局脚本不现实。所以我们需要找到每个脚本各自的<code>pre-receive</code>钩子。</p>
<p>每一个项目各自的钩子可以在路径<code>/home/git/data/repositories/用户名/项目名.git</code>或者<code>/home/git/repositories/&lt;group&gt;/&lt;project&gt;.git</code>路径中找到。</p>
<p>文件夹当中有一个<code>hooks</code>文件夹，<font color="red">但是</font>这个是一个超链接，跳转到的是全局钩子的地址<code>/home/git/gitlab-shell/hooks</code>。</p>
<p>我们就可以知道，项目是通过这个超链接去调用全局脚本的，所以如果我们希望项目能调用自己的脚本，那么我们可以创建一个同名的<code>hooks</code>文件夹替代，从而实现项目的个性化处理。</p>
<p><font color="red">不过需要注意的是</font>，当我们使用自定义的脚本的时候 ，如果将全局脚本当做模板进行改写的时候，全局脚本内有一些关联路径的语句，例如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require_relative &apos;../lib/gitlab_custom_hook</div></pre></td></tr></table></figure>
<p>这里是定义了全局脚本的<font color="red">相对地址</font>，所以我们需要更改为<font color="red">绝对地址</font>，例如改为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require_relative &apos;/home/git/gitlab-shell/lib/gitlab_custom_hook</div></pre></td></tr></table></figure>
<p>为了实现我们的项目钩子的编写，查看<a href="https://docs.gitlab.com/ee/administration/custom_hooks.html" target="_blank" rel="external">官方文档</a>，我们了解到自定义钩子的写法是在<code>/home/git/repositories/&lt;group&gt;/&lt;project&gt;.git</code>文件夹内创建一个名为<code>custome_hooks</code>的文件夹，然后再文件夹内放置脚本，放置脚本的方法也有两种：</p>
<ul>
<li><p>直接创建同名的<font color="red">可执行</font>脚本</p>
<p>例如直接创建一个名为<code>pre-receive</code>的<font color="red">可执行</font>脚本</p>
</li>
</ul>
<ul>
<li><p>创建同名后缀为<code>.d</code>的文件夹，文件夹内放置脚本（命名随意）</p>
<p>例如创建一个<code>pre-receive.d</code>文件夹，在文件夹内放入一些<font color="red">可执行</font>脚本，则会按照命名顺序，顺序执行</p>
</li>
</ul>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins35.png" alt=""></p>
<p><font color="red">**</font>这里我们遇到的可执行脚本的问题，可以通过命令行解决，只需要一行命令<code>chmod +x 文件名</code>即可以将脚本变为可执行脚本</p>
<p><font color="red">需要注意的是</font>，如果没有将脚本变为可执行，那么脚本将不会在自定义钩子中生效。</p>
<p>我们的自定义钩子是在官方的脚本运行结束后运行的，但是因为自定义钩子的写法也有不同，所以运行自定义钩子的顺序也有所不同，通过实验（通过对所有脚本加上一个命令行输出查看），我们了解到顺序如下：</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins33.png" alt=""></p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins34.png" alt=""></p>
<h3 id="3-钩子脚本编写"><a href="#3-钩子脚本编写" class="headerlink" title="3.钩子脚本编写"></a>3.钩子脚本编写</h3><p>当我们了解完全局钩子和自定义钩子的写法和执行顺序之后，我们就可以开始部署我们的代码质量检查钩子的编写了。由于没有一个统一的软件对全部代码进行统一的代码检测，所以我们将针对不同语言的项目进行不同的代码质量管理部署。</p>
<h5 id="3-1-服务器代码存放问题"><a href="#3-1-服务器代码存放问题" class="headerlink" title="3.1 服务器代码存放问题"></a>3.1 服务器代码存放问题</h5><p>首先，由于在gitlab上存储的是每一个项目的.git文件夹，即<font color="red">服务器端没有存放除.git文件夹内容外真实存在的代码</font>，数据文件只有.git文件夹的objects文件（文件包含提交信息、项目树信息，代码信息、标签信息）。</p>
<p>所以如果我们希望在服务器端实现代码质量审查，那么我们就首先需要将代码从objects文件夹中提取出来，再进行代码质量审查。</p>
<h5 id="3-2-Git的数据存放原理"><a href="#3-2-Git的数据存放原理" class="headerlink" title="3.2 Git的数据存放原理"></a>3.2 Git的数据存放原理</h5><p>Git 存储数据内容的方式──为每份内容生成一个文件，取得该内容与头信息的 SHA-1 校验和，创建以该校验和前两个字符为名称的子目录，并以 (校验和) 剩下 38 个字符为文件命名 (保存至子目录下)。每当文件有改动之后，SHA-1值都会变动，所以我们可以通过SHA-1值找到不同版本的代码。</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins37.jpg" alt=""></p>
<p>对于SHA-1数据类型的文件，我们主要使用<code>git cat-file</code>命令对文件进行解析读取。</p>
<p>Git中有四种基本的对象类型，这四种基本类型组成了Git更高级的数据结构。</p>
<ul>
<li><p>blob</p>
<p>每一个blob文件储存着一个（版本的）文件，blob文件只包含文件的数据，而忽略文件的其他元数据，如名字、路径、格式等。</p>
</li>
</ul>
<ul>
<li><p>tree</p>
<p>tree代表了<font color="red">一个目录</font>的信息，包含了该目录下的blob文件和相应的元文件信息和子目录（对应的子tree）。git对项目的管理就是使用嵌套的tree结构对文件进行存储。</p>
</li>
<li><p>commit</p>
<p>每一个commit提交记录都记录着该次提交的一些内容，例如该次提交后的tree的信息，父commit的信息，作者和提交时间的信息，提交日志。</p>
</li>
<li><p>tag</p>
<p>tag通常用于为commit命名一个易于记忆和分辨的名字。</p>
</li>
</ul>
<p>下面用一个例子简单解释一下以上的数据类型</p>
<p>在根目录的tree对象里我们可以看到，这里有两个文件 README和Rakefile都是blob对象，lib是一个子目录，所以是tree对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git cat-file -p master^&#123;tree&#125;</div><div class="line">100644 blob a906cb2a4a904a152e80877d4088654daad0c859      README</div><div class="line">100644 blob 8f94139338f9404f26296befa88755fc2598c289      Rakefile</div><div class="line">040000 tree 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0      lib</div></pre></td></tr></table></figure>
<p>再进入子树lib的查看，可以看到有一个simplegit.rb的rubu文件的blob对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git cat-file -p 99f1a6d12cb4b6f19c8655fca46c3ecf317074e0</div><div class="line">100644 blob 47c6340d6459e05787f644c2447d2595f5d3a54b      simplegit.rb</div></pre></td></tr></table></figure>
<p>结构图如下</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins38.png" alt=""></p>
<h5 id="3-3-通用代码存放脚本"><a href="#3-3-通用代码存放脚本" class="headerlink" title="3.3 通用代码存放脚本"></a>3.3 通用代码存放脚本</h5><p>由于在服务器端没有存放真实的代码，所以我们需要在receive到用户push上来的commit文件之后，对文件进行解析，并将代码读取保存在服务器的临时文件夹中。</p>
<p>所以我们对钩子中的update进行编写，脚本使用的是shell脚本，主要就是解析提交文件，然后将<font color="red">有改动或新增</font>的代码放置入服务器的临时文件夹中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="comment"># 提交分支的名字</span></div><div class="line">ref_name=<span class="variable">$1</span></div><div class="line"><span class="comment"># 上一个commit的ID</span></div><div class="line">old_value=<span class="variable">$2</span></div><div class="line"><span class="comment"># 现在这个commit的ID</span></div><div class="line">new_value=<span class="variable">$3</span></div><div class="line"></div><div class="line"><span class="comment"># 共有四种状态</span></div><div class="line"><span class="comment"># M-修改，A-新增，D-删除，RXXX-重命名 XXX是指重命名前后代码相似度</span></div><div class="line"><span class="comment"># 所以这里选择修改和新增和重命名的进行代码审查</span></div><div class="line"><span class="comment"># （因为重命名会覆盖掉D和M的状态</span></div><div class="line">new_and_modify=`git diff <span class="variable">$old_value</span> <span class="variable">$new_value</span> --raw | grep <span class="string">"\sM\s\|\sA\s"</span> | awk <span class="string">'&#123;print $4"\t"$6&#125;'</span> |  uniq`</div><div class="line">rename=`git diff <span class="variable">$old_value</span> <span class="variable">$new_value</span> --raw | grep <span class="string">"\sR.*\s"</span> | awk <span class="string">'&#123;print $4"\t"$7&#125;'</span> |  uniq`</div><div class="line"><span class="comment"># 检查文件夹和文件的名字是否有空格</span></div><div class="line"><span class="comment"># 有空格则直接提交失败</span></div><div class="line">count=`git show <span class="variable">$new_value</span> --name-only | grep <span class="string">"\s"</span> -c`</div><div class="line"><span class="keyword">if</span> [[ <span class="variable">$count</span> <span class="_">-gt</span> 4 ]]</div><div class="line"><span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"文件/文件夹 名字包含空格，提交失败"</span></div><div class="line">	<span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># 将字符串变为数组</span></div><div class="line">new_and_modify_array=(<span class="variable">$new_and_modify</span>)</div><div class="line">rename_array=(<span class="variable">$rename</span>)</div><div class="line"></div><div class="line">collect_array=(<span class="variable">$&#123;new_and_modify_array[@]&#125;</span> <span class="variable">$&#123;rename_array[@]&#125;</span>)</div><div class="line"></div><div class="line"><span class="comment"># n用于遍历数组</span></div><div class="line">n=0</div><div class="line"><span class="comment"># 遍历数组，提取出需要代码质量管理的文件的blob id和原本的文件名</span></div><div class="line"><span class="keyword">while</span> [ <span class="variable">$n</span> <span class="_">-lt</span> <span class="variable">$&#123;#collect_array[@]&#125;</span> ]</div><div class="line"><span class="keyword">do</span></div><div class="line">	<span class="comment"># blob id 用于提取代码</span></div><div class="line">	blob_id=<span class="variable">$&#123;collect_array[$n]:0:7&#125;</span></div><div class="line">	<span class="comment"># 文件名，由于带有路径，所以将文件名中的/斜杠替换为_下划线</span></div><div class="line">	f_name=<span class="variable">$&#123;collect_array[$&#123;n&#125;</span>+1]////_&#125;</div><div class="line">	<span class="comment"># 将代码保存到临时文件夹中</span></div><div class="line">	git show <span class="variable">$blob_id</span> &gt; temp_files/code_<span class="variable">$&#123;f_name&#125;</span></div><div class="line">	<span class="comment"># n自增，用于遍历</span></div><div class="line">	<span class="built_in">let</span> n+=2</div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line"><span class="comment"># 该标记用于识别是否有代码没用通过，全部通过则为0，只要有一个代码没通过就为1</span></div><div class="line">flag=0</div><div class="line"></div><div class="line"><span class="comment"># 转换工作路径到临时文件夹</span></div><div class="line"><span class="built_in">cd</span> temp_files</div><div class="line"><span class="comment"># 获取临时文件夹里的文件</span></div><div class="line">files=`ls`</div><div class="line"><span class="comment"># 如果临时文件夹里没有内容，则证明没有进行代码修改</span></div><div class="line"><span class="comment"># 不需要进行代码管理，返回0</span></div><div class="line"><span class="keyword">if</span> [[ <span class="variable">$files</span> == <span class="string">""</span> ]]</div><div class="line"><span class="keyword">then</span> </div><div class="line">	<span class="built_in">exit</span> 0</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="comment"># 将文件转换成数组，遍历数组，对每一个文件分别进行代码质量管理操作</span></div><div class="line">files_array=(<span class="variable">$files</span>)</div><div class="line"><span class="comment"># m用于遍历数组</span></div><div class="line">m=0</div><div class="line">files_count=<span class="variable">$&#123;#files_array[@]&#125;</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"此次提交共有 <span class="variable">$files_count</span> 个文件进行过修改/新增/重命名"</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> [ <span class="variable">$m</span> <span class="_">-lt</span> <span class="variable">$&#123;#files_array[@]&#125;</span> ]</div><div class="line"><span class="keyword">do</span></div><div class="line">	<span class="comment"># 文件名</span></div><div class="line">	file_name=<span class="variable">$&#123;files_array[$m]&#125;</span></div><div class="line">	<span class="built_in">let</span> m+=1</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#########################################################</span></div><div class="line"><span class="comment">#此处，不同语言应对不同的代码质量管理程序</span></div><div class="line"><span class="comment">#主要操作是 `操作语句 $file_name` </span></div><div class="line"><span class="comment">#例如python语言使用的是pylint，那么语句就是`pylint $file_name`</span></div><div class="line"><span class="comment">#主要通过设定flag的值操作代码是否通过</span></div><div class="line"><span class="comment">#########################################################</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 文件循环结束</span></div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line"><span class="comment"># 移除临时生成的文件</span></div><div class="line">rm *</div><div class="line"><span class="comment"># 判断标记是否为0</span></div><div class="line"><span class="keyword">if</span> [[ <span class="variable">$flag</span> == 0 ]]</div><div class="line"><span class="keyword">then</span> </div><div class="line">	<span class="built_in">echo</span> <span class="string">"代码全部通过，提交成功"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"有代码未通过，提交失败"</span></div><div class="line">	<span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="built_in">exit</span> 0</div></pre></td></tr></table></figure>
<h5 id="3-4-Python代码质量管理"><a href="#3-4-Python代码质量管理" class="headerlink" title="3.4 Python代码质量管理"></a>3.4 Python代码质量管理</h5><p>脚本如下，使用的是pylint对代码进行审查。pylint会返回一个报告供我们进行修改，然后有一个评分，我们可以根据评分进行阈值设定，例如这里这里设定的是四舍五入之后的评分大于等于5分则通过审查，可以提交成功，flag值为0。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">#########################################################</div><div class="line">#Python 文件</div><div class="line">if [[ $file_name = *.py ]]</div><div class="line">then</div><div class="line"></div><div class="line"># 运行pylint脚本，对代码进行审查</div><div class="line"># 将报告输出在临时文件夹的report.txt中</div><div class="line">pylint $file_name  &gt; report.txt</div><div class="line"></div><div class="line"># 检测是否代码有语法错误，如果有语法错误直接退出</div><div class="line"># （因为有语法错误的话没有评分，无法与阈值比较</div><div class="line">error=`cat report.txt | grep &quot;syntax-error&quot;`</div><div class="line">if [[ $error != &quot;&quot; ]]</div><div class="line">then</div><div class="line">	echo $file_name &quot;有语法错误，提交失败&quot;</div><div class="line">	exit 1</div><div class="line">fi</div><div class="line"></div><div class="line"># 获取评分的语句</div><div class="line">score_senten=`cat report.txt | grep &quot;rated&quot; | awk &apos;&#123;print $7&#125;&apos;`</div><div class="line"></div><div class="line"># 从语句中提取分数</div><div class="line">if [[ &quot;$score_senten&quot; =~ (.*)/10 ]] </div><div class="line">then</div><div class="line">	score=&quot;$&#123;BASH_REMATCH[1]&#125;&quot;</div><div class="line">else</div><div class="line">	score=0</div><div class="line">fi</div><div class="line"></div><div class="line">echo $file_name 程序得分为 $score_senten</div><div class="line">echo 程序分析报告:</div><div class="line">cat report.txt</div><div class="line"></div><div class="line"># 如果分数大于5分，则通过，否则失败</div><div class="line"># 需要更改为单独计分，即每一个.py运行一次pylint</div><div class="line"># 对分数进行四舍五入（因bash不能处理浮点数）</div><div class="line">k=`echo $score|awk &apos;&#123; printf(&quot;%.0f\n&quot;, $0); &#125;&apos;`</div><div class="line">if [[ $&#123;k&#125; -ge 5 ]]</div><div class="line">then</div><div class="line">	echo &quot;该代码通过&quot;</div><div class="line">else</div><div class="line">	echo &quot;该代码评分未通过&quot;</div><div class="line">	let flag=1</div><div class="line">fi</div><div class="line"></div><div class="line">fi</div><div class="line"></div><div class="line">#Python 文件结束</div><div class="line">#########################################################</div></pre></td></tr></table></figure>
<h5 id="3-5-Javascript-代码"><a href="#3-5-Javascript-代码" class="headerlink" title="3.5 Javascript 代码"></a>3.5 Javascript 代码</h5><p>References:</p>
<p>[1] <a href="http://blog.csdn.net/abcdocker/article/category/6638595" target="_blank" rel="external">持续集成 by www.abcdocker.com</a></p>
<p>[2] <a href="https://www.jianshu.com/p/060e7223e211?open_source=weibo_search" target="_blank" rel="external">使用docker搭建gitlab初体验+数据备份</a></p>
<p>[3] <a href="https://www.jianshu.com/p/5531a21afa68" target="_blank" rel="external">Gitlab 服务器端 custom hook 配置</a></p>
<p>[4] <a href="https://github.com/geeeeeeeeek/git-recipes/wiki/5.4-Git-%E9%92%A9%E5%AD%90%EF%BC%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BD%A0%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81" target="_blank" rel="external">Git 钩子</a></p>
<p>[5] <a href="https://docs.gitlab.com/ee/administration/custom_hooks.html" target="_blank" rel="external">Custom Git Hooks </a></p>
<p>[6] <a href="https://www.zhihu.com/question/65604891/answer/232935144" target="_blank" rel="external">https://www.zhihu.com/question/65604891/answer/232935144</a></p>
<p>[7] <a href="https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%AF%B9%E8%B1%A1" target="_blank" rel="external">https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%AF%B9%E8%B1%A1</a></p>
<p>[8] <a href="https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%AF%B9%E8%B1%A1" target="_blank" rel="external">https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%AF%B9%E8%B1%A1</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-搭建gitlab仓库&quot;&gt;&lt;a href=&quot;#1-搭建gitlab仓库&quot; class=&quot;headerlink&quot; title=&quot;1. 搭建gitlab仓库&quot;&gt;&lt;/a&gt;1. 搭建gitlab仓库&lt;/h3&gt;&lt;h5 id=&quot;1-1-安装前准备工作&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="jenkins" scheme="http://www.pirrla.cn/categories/jenkins/"/>
    
    
      <category term="jenkins" scheme="http://www.pirrla.cn/tags/jenkins/"/>
    
      <category term="git" scheme="http://www.pirrla.cn/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins学习笔记5-官方用法pipeline</title>
    <link href="http://www.pirrla.cn/2017/12/22/jenkins/jenkins5/"/>
    <id>http://www.pirrla.cn/2017/12/22/jenkins/jenkins5/</id>
    <published>2017-12-21T16:00:00.000Z</published>
    <updated>2017-12-25T01:20:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>官方的文档是在描述另一种jenkins的用法pipeline。pipeline有其特有的语句，我们以下以一个node.js和npm的例子来进行说明。</p>
<p>Reference:</p>
<p>[1] <a href="http://www.jianshu.com/p/b524b151d35f" target="_blank" rel="external">Jenkins使用简易教程</a></p>
<p>[2] <a href="https://testerhome.com/topics/10003" target="_blank" rel="external">https://testerhome.com/topics/10003</a></p>
<p>[3] <a href="https://personal-notes.me/%E5%9F%BA%E4%BA%8E-jenkinsdocker-%E6%90%AD%E5%BB%BA%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%BA%A4%E4%BB%98%E6%96%B9%E6%A1%88/" target="_blank" rel="external">https://personal-notes.me/%E5%9F%BA%E4%BA%8E-jenkinsdocker-%E6%90%AD%E5%BB%BA%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%BA%A4%E4%BB%98%E6%96%B9%E6%A1%88/</a></p>
<p>[4] <a href="https://yq.aliyun.com/articles/80459" target="_blank" rel="external">https://yq.aliyun.com/articles/80459</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官方的文档是在描述另一种jenkins的用法pipeline。pipeline有其特有的语句，我们以下以一个node.js和npm的例子来进行说明。&lt;/p&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;p&gt;[1] &lt;a href=&quot;http://www.jianshu.com/p
    
    </summary>
    
      <category term="jenkins" scheme="http://www.pirrla.cn/categories/jenkins/"/>
    
    
      <category term="jenkins" scheme="http://www.pirrla.cn/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins学习笔记4-使用Docker对环境和代码打包</title>
    <link href="http://www.pirrla.cn/2017/12/21/jenkins/jenkins4/"/>
    <id>http://www.pirrla.cn/2017/12/21/jenkins/jenkins4/</id>
    <published>2017-12-20T16:00:00.000Z</published>
    <updated>2017-12-27T07:37:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我们已经完成了了尝试重启Node.js服务之后，我们应该发现，远程的代码仓库对于node.js的代码，是没有保存Node Modules的。这个文件夹包含的都是node.js需要的第三方的环境库等的包，所以不适合放入远程仓库里。</p>
<p>于是我们每次都需要执行一次<code>npm install</code>的操作，确保下载全部的包。但是这样的操作十分耗时耗力，所以我们考虑到使用docker对我们的基础环境进行打包，生成dockerfile和dockerimage，从而就不需要每次都对生产环境进行更新操作。</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins11.png" alt=""></p>
<h3 id="1-docker简介"><a href="#1-docker简介" class="headerlink" title="1. docker简介"></a>1. docker简介</h3><p>安装docker就不介绍了，可以直接从<a href="https://www.docker.com" target="_blank" rel="external">官网</a>按照指引安装</p>
<h5 id="1-1-docker的一些基础概念"><a href="#1-1-docker的一些基础概念" class="headerlink" title="1.1 docker的一些基础概念"></a>1.1 docker的一些基础概念</h5><ul>
<li><strong>镜像（image）</strong>：相当于docker容器启动的母版，docker启动的都是从镜像延伸出来的容器，可以自己构建和存储在镜像仓库</li>
<li><strong>容器（container）</strong>：由单一服务构成的针对最基本功能实现的 <strong>服务（service）</strong>（比如Nginx），docker推荐的是一个容器一个服务</li>
</ul>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins18.png" alt=""></p>
<h5 id="1-2-docker基础操作"><a href="#1-2-docker基础操作" class="headerlink" title="1.2 docker基础操作"></a>1.2 docker基础操作</h5><p>docker的具体操作可以查看<a href="https://docs.docker.com/" target="_blank" rel="external">官方文档</a>或者命令行<code>docker —help</code>，这里介绍一些比较常用的</p>
<p><strong>容器生命周期管理</strong></p>
<ul>
<li><p><code>docker run -p 80:80 -v /data:/data -d nginx:latest</code></p>
<p>创建一个新的容器并运行一个命令，通常使用是<code>-p 80:80</code> 将宿主机的80端口与docker容器的80端口绑定，<code>-v /data:/data</code>将宿主机的文件路径与docker容器内部的文件相映射，通常用来存储容器的数据，从而达到增量更新和缓存的目的，<code>-d</code>是后台运行并返回新创建容器的id，<code>nginx:latest</code>是镜像名和标签</p>
</li>
<li><p><code>docker start</code> 启动一个或多少已经被停止的容器</p>
<p><code>docker stop</code> 停止一个运行中的容器</p>
<p><code>docker restart</code>重启容器</p>
</li>
<li><p><code>docker rm</code>移除一个容器，当容器停止之后不会消失，需要手动删除</p>
</li>
</ul>
<p><strong>容器操作</strong></p>
<ul>
<li><code>docker ps</code>查看当前正在运行的容器，<code>-a</code>可以查看所有容器包括未运行的</li>
<li><code>docker cp &lt;containerId&gt;:/file/path/within/container /host/path/target</code> 将容器内的文件拷贝到宿主机中</li>
</ul>
<p><strong>本地镜像管理</strong></p>
<ul>
<li><code>docker build -t 创建的镜像名称和标签 文件路径</code>使用文件路径的Dockerfile创建镜像，如果镜像名称和标签有重复的，则最新的镜像会使用该名称和标签，旧的镜像将变成\<none\>，在后述操作当中可以批量删除。</none\></li>
<li><code>docker rmi</code>移除镜像</li>
</ul>
<p><strong>镜像仓库</strong></p>
<ul>
<li><code>docker push</code></li>
<li><code>docker pull</code></li>
</ul>
<h5 id="1-3-dockerfile构建"><a href="#1-3-dockerfile构建" class="headerlink" title="1.3 dockerfile构建"></a>1.3 dockerfile构建</h5><p>docker可以直接使用官方的镜像，包含基础运行程序的环境，但如果希望创建新的镜像，可以使用dockerfile进行构建。</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 设定镜像的官方运行环境</span></div><div class="line"><span class="keyword">FROM</span> google/nodejs</div><div class="line"><span class="comment"># 设定docker内部工作环境为根目录下的app文件夹</span></div><div class="line"><span class="keyword">WORKDIR</span> /app</div><div class="line"><span class="comment"># 添加宿主机中的package.json文件进入docker内app文件夹</span></div><div class="line"><span class="keyword">ADD</span> package.json /app/</div><div class="line"><span class="comment"># 在docker内部运行npm install命令，根据需要安装第三方库</span></div><div class="line"><span class="keyword">RUN</span> npm install</div><div class="line"><span class="comment"># 添加宿主机当前目录的所有文件进入docker</span></div><div class="line"><span class="keyword">ADD</span> . /app</div><div class="line"><span class="comment"># 暴露docker的8000端口</span></div><div class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></div><div class="line"><span class="comment"># 不运行命令</span></div><div class="line"><span class="keyword">CMD</span> []</div><div class="line"><span class="comment"># 启动服务</span></div><div class="line"><span class="keyword">ENTRYPOINT</span> ["/nodejs/bin/npm", "start"]</div></pre></td></tr></table></figure>
<h5 id="1-4-docker-compose-与jenkins类似"><a href="#1-4-docker-compose-与jenkins类似" class="headerlink" title="1.4 docker compose 与jenkins类似"></a>1.4 docker compose 与jenkins类似</h5><h5 id="1-5-docker-私有仓库搭建"><a href="#1-5-docker-私有仓库搭建" class="headerlink" title="1.5 docker 私有仓库搭建"></a>1.5 docker 私有仓库搭建</h5><p>仓库的搭建也不难，只用使用官方的registry docker即可。</p>
<p>启动代码<code>sudo docker run -d -p 5000:5000 -v /data:/tmp/registry —restart=always --name</code></p>
<p>即在5000端口启动了一个仓库docker</p>
<font color="red">*</font>一般启动registryd docker会遇到https安全传输的问题。<br><br>一般当尝试向服务器push镜像时，会出现错误<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Forbidden. If this private registry supports only HTTP or HTTPS with an unknown CA certificate, please add –insecure-registry 10.0.0.26:5000 to the daemon’s arguments.</div></pre></td></tr></table></figure><br><br>解决这个问题的方法见<a href="http://stackoverflow.com/questions/26710153/remote-access-to-a-private-docker-registry" target="_blank" rel="external">StackOverflow</a><br>最快最简单的方法是将如下行添加到<code>/etc/default/docker</code>，然后重启Docker Daemon：<br><code>DOCKER_OPTS=&quot;--insecure-registry localhost:5000&quot;</code><br><br>##### 1.6 Swarm集群拓展<br><br>##### 1.7 小问题：<br><br>- 当docker启动后，希望添加docker与宿主机的端口映射<br><br>  docker容器的操作变换很方便快捷，同时消耗比较少，所以如果希望更改端口映射，不建议手工添加，最好还是重新开启一个容器，使用docker官方的用法<code>-p 5000:5000</code><br><br>  如果容器内有工作内容需要保存，可以commit一个docker image保存数据，然后再启动一个新的容器<br><br><br>- docker容器启动的后的进入方法<br><br>  docker还是提倡一个容器一个进程的理念，但是有时还是需要进入docker容器中，进行一些配置，所以我们需要一个方法进入已经启动的docker容器内，同时需要一个终端进行交互<br><br>  - docker attach<br>  - docker 第三方工具(nsenter、nsinit)<br>  - docker exec<font color="“red”">（推荐）</font>

<h5 id="1-8-Docker镜像仓库国内加速"><a href="#1-8-Docker镜像仓库国内加速" class="headerlink" title="1.8 Docker镜像仓库国内加速"></a>1.8 Docker镜像仓库国内加速</h5><p><a href="http://www.cnblogs.com/anliven/p/6218741.html" target="_blank" rel="external">http://www.cnblogs.com/anliven/p/6218741.html</a></p>
<h3 id="2-APACHE服务器"><a href="#2-APACHE服务器" class="headerlink" title="2.APACHE服务器"></a><del>2.APACHE服务器</del></h3><h3 id="3-Jenkins持续化集成"><a href="#3-Jenkins持续化集成" class="headerlink" title="3.Jenkins持续化集成"></a>3.Jenkins持续化集成</h3><p>介绍完docker和apache，我们希望能够通过jenkins进行一个集成，能够自动化实现在docker容器中的apache服务器的重启操作。</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins16.png" alt=""></p>
<h5 id="3-1-在jenkins中使用docker有两种方法"><a href="#3-1-在jenkins中使用docker有两种方法" class="headerlink" title="3.1 在jenkins中使用docker有两种方法"></a>3.1 在jenkins中使用docker有两种方法</h5><ol>
<li>为jenkins添加用户权限，直接在命令行执行</li>
<li>使用docker build step plugin 插件进行docker操作</li>
</ol>
<p>因为插件操作比较麻烦，所以我们选择给jenkins添加用户权限，从而直接在命令行中编写脚本</p>
<p><font color="red">*</font>为macos添加jenkins用户权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 使用id查看自己的群组和用户名称</div><div class="line">$ id</div><div class="line">uid=501(alan) gid=20(staff)  ...</div><div class="line"></div><div class="line"># 获取之后，先停止jenkins服务</div><div class="line">$ sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist</div></pre></td></tr></table></figure>
<p>然后通过命令行或者直接修改<code>/Library/LaunchDaemons/org.jenkins-ci.plist</code>文件</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins20.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 然后添加权限</div><div class="line">$ sudo chown -R userName /Users/Shared/Jenkins</div><div class="line">$ sudo chown -R userName /var/log/jenkins</div><div class="line"></div><div class="line">#重启Jenkins</div><div class="line">$ sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist</div></pre></td></tr></table></figure>
<h5 id="3-2-编写jenkins设置"><a href="#3-2-编写jenkins设置" class="headerlink" title="3.2 编写jenkins设置"></a>3.2 编写jenkins设置</h5><p>之前的设置跟<a href="http://pirrla.cn/2017/12/18/jenkins/jenkins1/" target="_blank" rel="external">第一篇</a>设置一样，设定好每分钟自动从代码库获取更新</p>
<p>然后到了构建操作脚本</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins17.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line">id</div><div class="line">set +e</div><div class="line">echo &apos;&gt;&gt;&gt; Get old container id&apos;</div><div class="line"></div><div class="line"># 查找正在运行的docker容器</div><div class="line">CID=$(/usr/local/bin/docker ps | grep &quot;my_nodejs&quot; | awk &apos;&#123;print $1&#125;&apos;)</div><div class="line"># 获取使用“my_nodejs”镜像的容器id</div><div class="line">echo $CID</div><div class="line"></div><div class="line"># 根据新的代码，构建新的docker</div><div class="line">/usr/local/bin/docker build -t my_nodejs .</div><div class="line"></div><div class="line"># 停止旧的容器</div><div class="line">if [ &quot;$CID&quot; != &quot;&quot; ];then</div><div class="line">  /usr/local/bin/docker stop $CID</div><div class="line">fi</div><div class="line"></div><div class="line"># 启动新容器</div><div class="line">/usr/local/bin/docker run -p 8000:8000 -d my_nodejs</div><div class="line"></div><div class="line"># 删除旧容器</div><div class="line">/usr/local/bin/docker rm $CID</div><div class="line"># 删除旧镜像</div></pre></td></tr></table></figure>
<p>这样就完成了一个自动化部署docker的操作。</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins15.png" alt=""></p>
<p>References:</p>
<p>[1] <a href="http://www.cnblogs.com/Leo_wl/p/4314792.html" target="_blank" rel="external">使用Jenkins来构建Docker容器</a></p>
<p>[2] <a href="http://www.runoob.com/docker/docker-tutorial.html" target="_blank" rel="external">Docker 教程</a></p>
<p>[3] <a href="http://blog.huangang.net/2017/01/06/docker%E5%AE%B9%E5%99%A8%E5%90%AF%E5%8A%A8%E5%90%8E%E6%B7%BB%E5%8A%A0%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/" target="_blank" rel="external">Docker启动后的端口映射</a></p>
<p>[4] <a href="http://blog.csdn.net/woshiluahuo/article/details/52239407" target="_blank" rel="external">进入docker容器的方法</a></p>
<p>[5] <a href="http://blog.csdn.net/u010397369/article/details/41045251" target="_blank" rel="external">如何进入Docker容器</a></p>
<p>[6] <a href="https://blog.catscarlet.com/201612022593.html" target="_blank" rel="external">https://blog.catscarlet.com/201612022593.html</a></p>
<p>[7] <a href="http://ju.outofmemory.cn/entry/306621" target="_blank" rel="external">http://ju.outofmemory.cn/entry/306621</a></p>
<p>[8] <a href="https://www.qcloud.com/community/article/164816001481011806" target="_blank" rel="external">https://www.qcloud.com/community/article/164816001481011806</a></p>
<p>[9] <a href="https://www.jianshu.com/p/41f2def6ec59" target="_blank" rel="external">https://www.jianshu.com/p/41f2def6ec59</a></p>
<p>[10] <a href="http://www.cnblogs.com/ihojin/p/jenkins-permission.html" target="_blank" rel="external">Mac Jenkins 权限问题</a></p>
<p>[11] <a href="https://blog.catscarlet.com/201612022593.html" target="_blank" rel="external">https://blog.catscarlet.com/201612022593.html</a></p>
<p>[12] <a href="http://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="external">Docker 命令大全</a></p>
<p>[13] <a href="http://blog.51cto.com/tangoo/1435078" target="_blank" rel="external">Mac Jenkins 修改端口</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们已经完成了了尝试重启Node.js服务之后，我们应该发现，远程的代码仓库对于node.js的代码，是没有保存Node Modules的。这个文件夹包含的都是node.js需要的第三方的环境库等的包，所以不适合放入远程仓库里。&lt;/p&gt;
&lt;p&gt;于是我们每次都需要执行一次&lt;
    
    </summary>
    
      <category term="jenkins" scheme="http://www.pirrla.cn/categories/jenkins/"/>
    
    
      <category term="jenkins" scheme="http://www.pirrla.cn/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins学习笔记3-重启Node.js服务</title>
    <link href="http://www.pirrla.cn/2017/12/20/jenkins/jenkins3/"/>
    <id>http://www.pirrla.cn/2017/12/20/jenkins/jenkins3/</id>
    <published>2017-12-19T16:00:00.000Z</published>
    <updated>2017-12-21T08:44:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在之前的文章已经完成了当github上python代码有新的push操作之后，jenkins会自动pull最新的代码，并进行编译执行。因为python代码不能体现服务的持续展现，所以我们现在选择一个网页网站的node.js页面进行尝试。</p>
<h3 id="1-项目代码简介"><a href="#1-项目代码简介" class="headerlink" title="1.项目代码简介"></a>1.项目代码简介</h3><p>简单的网页面显示，没有具体的数据存储操作</p>
<h3 id="2-代码Jenkins部署"><a href="#2-代码Jenkins部署" class="headerlink" title="2.代码Jenkins部署"></a>2.代码Jenkins部署</h3><h5 id="2-1-安装node-js插件"><a href="#2-1-安装node-js插件" class="headerlink" title="2.1 安装node.js插件"></a>2.1 安装node.js插件</h5><p>到jenkins插件管理界面下载<a href="https://wiki.jenkins.io/display/JENKINS/NodeJS+Plugin" target="_blank" rel="external">Node.js插件</a></p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins12.png" alt=""></p>
<p>安装完，对jenkins进行重启</p>
<h5 id="2-2-插件配置"><a href="#2-2-插件配置" class="headerlink" title="2.2 插件配置"></a>2.2 插件配置</h5><p>进入<strong>Jenkins - Manage Jenkins - Global Tool Configuration</strong>设置页面</p>
<p>找到NodeJS设置，点击<strong>NodeJS installations…</strong></p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins13.png" alt=""></p>
<p>帮这个node.js环境填上一个名字，然后选择需要安装的版本号。</p>
<p>保存，即可。</p>
<h5 id="2-3-NPM-install"><a href="#2-3-NPM-install" class="headerlink" title="2.3 NPM install"></a>2.3 NPM install</h5><p>现在选择Build Now，不管有没有job，系统会先安装node.js环境在workspace里。</p>
<p>然后去到job的配置页面，在build里加入<strong>Execute NodeJS script</strong>操作</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins14.png" alt=""></p>
<font color="red">这里如果把语句放入Node.js脚本执行框，会提示错误。（很奇怪，待研究）</font>

<p>所以我们将语句按顺序，放在script下面的shell脚本里，node.js脚本为空。</p>
<p>执行<code>npm install</code>对从远程仓库下载下来的代码进行构建，安装第三方库。</p>
<h5 id="2-4-PM2守护进程"><a href="#2-4-PM2守护进程" class="headerlink" title="2.4 PM2守护进程"></a>2.4 PM2守护进程</h5><ul>
<li><p>尝试一</p>
<p>直接在shell脚本中执行<code>node index.js</code>操作，node.js服务正常启动，可以正常访问网页，但是在jenkins中，该job是一直处于执行的阶段，如果有新的代码推送上代码仓库，虽然jenkins可以获取到新的代码，但是因为旧的job一直执行，造成阻塞，只能人工进行停止服务，不能实现代码构建部署自动化</p>
</li>
<li><p>尝试二</p>
<p>因为直接启动node.js不行，所以我们考虑使用nohup进行后台执行，使用脚本<code>nohup node index.js &amp;</code>，虽然显示无错误，该job也正常执行完成，但是无法访问网站，查看进程发现不存在node.js进程</p>
</li>
<li><p>尝试三</p>
<p>因为nohup不能持久地运行node.js服务，所以我们选了一个进程守护程序来守护进程，我们选择的是<a href="https://github.com/Unitech/pm2" target="_blank" rel="external">pm2</a>，先在shell脚本中加入代码<code>npm install pm2 -g</code>，然后再启动进程<code>pm2 start index.js</code>，经过测试node.js进程成功常驻后台，网页访问正常，jenkins正常完成job的构建。</p>
<p>由于我们希望达到自动化代码构建部署的效果，所以jenkins的shell脚本更改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pm2 stop index.js</div><div class="line">pm2 start index.js</div></pre></td></tr></table></figure>
<p>这样当代码有更新的时候，先对原先的node.js进行停止，然后重新开启新的node.js服务。</p>
</li>
</ul>
<p>至此，完成node.js代码的自动化构建部署。</p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>对于网页项目，还有许多的流程持续发布，都需要经过浏览器测试的环节。</p>
<h5 id="1-可以部署多个浏览器环境进行测试："><a href="#1-可以部署多个浏览器环境进行测试：" class="headerlink" title="1.可以部署多个浏览器环境进行测试："></a>1.可以部署多个浏览器环境进行测试：</h5><p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins11.png" alt=""></p>
<p>在网站的上线之前，可以部署一些浏览器测试环境，例如Firefox,IE,Safari等等的不同环境，当全部环境通过测试之后，才发布，提高了产品的容错性。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在之前的文章已经完成了当github上python代码有新的push操作之后，jenkins会自动pull最新的代码，并进行编译执行。因为python代码不能体现服务的持续展现，所以我们现在选择一个网页网站的node.js页面进行尝试。&lt;/p&gt;
&lt;h3 id=&quot;1-项目
    
    </summary>
    
      <category term="jenkins" scheme="http://www.pirrla.cn/categories/jenkins/"/>
    
    
      <category term="jenkins" scheme="http://www.pirrla.cn/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins学习笔记2-Sonar实现代码质量分析（提交到代码仓库后）</title>
    <link href="http://www.pirrla.cn/2017/12/19/jenkins/jenkins2/"/>
    <id>http://www.pirrla.cn/2017/12/19/jenkins/jenkins2/</id>
    <published>2017-12-18T16:00:00.000Z</published>
    <updated>2017-12-27T07:22:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-代码质量管理"><a href="#1-代码质量管理" class="headerlink" title="1.代码质量管理"></a>1.代码质量管理</h3><p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins1.png" alt=""></p>
<p>此次代码质量管理的需求，是在用户将本地的代码提交到远程仓库前，进行代码质量分析。</p>
<p>此处的代码质量不单单指有无拼写错误、格式错误等，还包括代码重复率、鲁棒性、注释率等等的指标。所以单纯的syntax错误已经不能满足我们的需求，我们希望团队能够写出高效的代码。</p>
<h3 id="2-SonarQube"><a href="#2-SonarQube" class="headerlink" title="2.SonarQube"></a>2.SonarQube</h3><p>Sonar是一个用于代码质量管理的开放平台，同样支持很多的插件，可以集成不同的测试工具，从而对多种语言(包括Java、C/C++，Javascript，C#等)的代码进行分析，并且以数据可视化的界面进行显示，提高了代码的审查率。</p>
<h5 id="2-1-SonarQube安装"><a href="#2-1-SonarQube安装" class="headerlink" title="2.1 SonarQube安装"></a>2.1 SonarQube安装</h5><p>可以到<a href="https://www.sonarqube.org/downloads/" target="_blank" rel="external">官网</a>下载最新的LTS包，Windows平台的话可以直接执行wrapper.exe文件，即可启动Sonar服务，unix平台的可以通过<code>./sonar.sh start</code>启动服务。</p>
<p><code>./sonar.sh stop</code>停止服务</p>
<p><code>./sonar.sh restart</code>重启服务</p>
<p>当出现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Starting SonarQube...</div><div class="line">Started SonarQube.</div></pre></td></tr></table></figure>
<p>则启动成功</p>
<p>默认的端口是9000，访问<code>localhost:9000</code>需要进行登录。</p>
<p>默认的用户名和密码都是<code>admin</code></p>
<h5 id="2-2-SonarQube-Scanner安装"><a href="#2-2-SonarQube-Scanner安装" class="headerlink" title="2.2 SonarQube Scanner安装"></a>2.2 SonarQube Scanner安装</h5><p>除了SonarQube服务外，我们还需要安装一个SonarQube Scanner作为分析源码的软件。</p>
<p><a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner" target="_blank" rel="external">下载地址</a>下载相应系统版本的scanner之后，进行解压缩，放置到适当的位置。</p>
<p>最好能将该文件夹的bin文件夹添加入环境变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#Macos下添加环境变量的方法</div><div class="line">#在命令行输入</div><div class="line">$ vi ~/.bash_profile</div><div class="line"></div><div class="line">#在文件的最后添加类似的路径</div><div class="line">export PATH=/usr/local/sonar-scanner-3.0.3.778-macosx/bin:$PATH</div><div class="line">#即完成了添加</div></pre></td></tr></table></figure>
<p>然后可以进入对配置文件<code>./conf/sonar-scanner.properties</code>进行设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#基础设置两个就可以了</div><div class="line">#----- Default SonarQube server 设置SonarQube的服务地址</div><div class="line">sonar.host.url=http://localhost:9000</div><div class="line"></div><div class="line">#----- Default source code encoding 设置默认的源码编码格式</div><div class="line">sonar.sourceEncoding=UTF-8</div></pre></td></tr></table></figure>
<p>然后当我们需要对一个项目进行代码分析时，需要在项目的根目录上创建一个<code>sonar*-project.properties</code>文件，对项目信息进行配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"># 为这个项目配置唯一的标识码（必填）</div><div class="line"># 例如以下的URL的id就是标识码</div><div class="line"># http://localhost:9000/dashboard?id=myproject</div><div class="line">sonar.projectKey=myproject</div><div class="line"># 这是在SonarQube上展示的名字和版本号(重要选填)</div><div class="line">sonar.projectName=My project</div><div class="line">sonar.projectVersion=1.0</div><div class="line"></div><div class="line"># 源码的地址(必填)，有多个路径用&apos;,&apos;符号隔开</div><div class="line"># 不同系统需要注意路径的&apos;/&apos;和&apos;\&apos;符号</div><div class="line">sonar.sources=.</div><div class="line"> </div><div class="line"># 编码，默认是系统编码(选填)</div><div class="line">#sonar.sourceEncoding=UTF-8</div></pre></td></tr></table></figure>
<p>然后直接命令行运行<code>sonar-scanner</code>即可，我们现在可以在SonarQube上看到代码质量分析报告了。</p>
<p>如果不是在当前目录运行代码分析，可以设定字段<code>sonar.projectBaseDir=</code>来制定代码的位置。</p>
<p>当然如果不希望重新为每一个项目创造一个配置文件，或者无法再根目录创建文件，还有两种替代性的方法可以配置：</p>
<ul>
<li>可以在命令行启动sonar-scanner的时候添加上配置，例如</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># -D&lt;arg&gt;定义配置</div><div class="line">sonar-scanner -Dsonar.projectKey=myproject -Dsonar.sources=src1</div></pre></td></tr></table></figure>
<ul>
<li>可以在另外的位置创建配置文件，然后启动sonar-scanner的时候设置路径</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sonar-scanner -Dproject.settings=../myproject.properties</div></pre></td></tr></table></figure>
<h5 id="2-3-MySQL配置"><a href="#2-3-MySQL配置" class="headerlink" title="2.3 MySQL配置"></a>2.3 MySQL配置</h5><p>sonar内部是有配置数据库的，但是效率低不能应用于生产环境，所以我们需要配置自己的数据库，用户保存sonar的分析报告和配置等。</p>
<p>这里选择的是MySQL的分支MariaDB，因为MySQL有两种引擎，MyISAM和InnoDB，而MyISAM是比较老旧的引擎了，所以sonar不支持MyISAM，所以我们选择使用MariaDB。</p>
<p>配置文件在<code>sonarqube-6.7/conf/sonar.properties</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sonar.jdbc.username=sonar            #数据库用户</div><div class="line">sonar.jdbc.password=sonar@pw     #数据库密码</div><div class="line"></div><div class="line">sonar.jdbc.url=jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;character    Encoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance</div></pre></td></tr></table></figure>
<p>只需要把数据库的用户名和密码填上，然后解除SQL的注释就可以了。</p>
<p>可能还需要将数据库驱动放入<code>sonarqube-6.7/extensions/jdbc-driver/mysql</code>中</p>
<h5 id="2-3-SonarQube-简介"><a href="#2-3-SonarQube-简介" class="headerlink" title="2.3 SonarQube 简介"></a>2.3 SonarQube 简介</h5><h3 id="3-FindBugs"><a href="#3-FindBugs" class="headerlink" title="3.FindBugs"></a>3.FindBugs</h3><h3 id="4-PMD"><a href="#4-PMD" class="headerlink" title="4.PMD"></a>4.PMD</h3><p>参考资料：</p>
<p>[1] <a href="https://docs.sonarqube.org/display/PLUG/GitHub+Plugin" target="_blank" rel="external">Github Plugin for Sonar</a></p>
<p>[2] <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner" target="_blank" rel="external">SonarQube Scanner</a></p>
<p>[3] <a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Jenkins" target="_blank" rel="external">Analyzing with SonarQube Scanner for Jenkins</a></p>
<p>[4] <a href="https://docs.sonarqube.org/display/SONAR/Analysis+Parameters" target="_blank" rel="external">Analysis Parameters</a></p>
<p>[5] <a href="https://stackoverflow.com/questions/32047585/jenkins-sonar-github-integration" target="_blank" rel="external">https://stackoverflow.com/questions/32047585/jenkins-sonar-github-integration</a></p>
<p>[6] <a href="https://github.com/10up/wp-local-docker/issues/6" target="_blank" rel="external">Docker启动SonarQube错误es137</a></p>
<p>[7] <a href="https://yq.aliyun.com/articles/316487" target="_blank" rel="external">https://yq.aliyun.com/articles/316487</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-代码质量管理&quot;&gt;&lt;a href=&quot;#1-代码质量管理&quot; class=&quot;headerlink&quot; title=&quot;1.代码质量管理&quot;&gt;&lt;/a&gt;1.代码质量管理&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ondsf10qe.bkt.clouddn.com/jen
    
    </summary>
    
      <category term="jenkins" scheme="http://www.pirrla.cn/categories/jenkins/"/>
    
    
      <category term="jenkins" scheme="http://www.pirrla.cn/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins学习笔记1-Jenkins入门&amp;Python代码初试</title>
    <link href="http://www.pirrla.cn/2017/12/18/jenkins/jenkins1/"/>
    <id>http://www.pirrla.cn/2017/12/18/jenkins/jenkins1/</id>
    <published>2017-12-17T16:00:00.000Z</published>
    <updated>2018-01-04T09:36:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-敏捷开发"><a href="#1-敏捷开发" class="headerlink" title="1.敏捷开发"></a>1.敏捷开发</h3><p>普通的程序开发，是按照瀑布流一样的流程往下走的。</p>
<p>但是时至今日，客户的需求变化速度非常之快，而且生产环境也在不断变化，所以以往的单一的以计划来完成软件开发已经不可取了。</p>
<p>所以我们需要采取敏捷开发，<em>*</em></p>
<h5 id="1-1-什么是持续集成："><a href="#1-1-什么是持续集成：" class="headerlink" title="1.1 什么是持续集成："></a>1.1 什么是持续集成：</h5><p>持续集成是指开发者在代码的开发过程中，可以频繁的将代码部署集成到主干，并进程自动化测试<br><img src="http://static.zybuluo.com/abcdocker/141k7ufqcy5zmgjvzlsgx444/image_1b4gk79111oqbf1l16qd80kqqh8q.png" alt="image_1b4gk79111oqbf1l16qd80kqqh8q.png-73.4kB"></p>
<h5 id="1-2-什么是持续交付："><a href="#1-2-什么是持续交付：" class="headerlink" title="1.2 什么是持续交付："></a>1.2 什么是持续交付：</h5><p>持续交付指的是在持续集成的环境基础之上，将代码部署到预生产环境<br><img src="http://static.zybuluo.com/abcdocker/z47rzhss99x3gxahr93ovn45/image_1b4gk7hef1v4n6ino701pruj9n97.png" alt="image_1b4gk7hef1v4n6ino701pruj9n97.png-133.6kB"></p>
<h5 id="1-3-持续部署："><a href="#1-3-持续部署：" class="headerlink" title="1.3 持续部署："></a>1.3 持续部署：</h5><p>在持续交付的基础上，把部署到生产环境的过程自动化，持续部署和持续交付的区别就是最终部署到生产环境是自动化的。<br><img src="http://static.zybuluo.com/abcdocker/4i4r6iwdisn4zmsmhqewxoew/image_1b4gk7o2t162hb71vcg1bb5p989k.png" alt="image_1b4gk7o2t162hb71vcg1bb5p989k.png-132.2kB"></p>
<h3 id="2-Jenkins入门"><a href="#2-Jenkins入门" class="headerlink" title="2.Jenkins入门"></a>2.Jenkins入门</h3><h5 id="2-1-Jenkins安装"><a href="#2-1-Jenkins安装" class="headerlink" title="2.1 Jenkins安装"></a>2.1 Jenkins安装</h5><p>Jenkins是Java编写的，所以需要安装JDK。可以去<a href="https://www.oracle.com/java/index.html" target="_blank" rel="external">Oracle官网</a>进行下载</p>
<p>在<a href="https://jenkins.io/" target="_blank" rel="external">Jenkins官网</a>下载.war文件，然后直接在命令行运行<code>java -jar jenkins.war</code>，如果需要后天启动可以<code>nohup java -jar jenkins.war &amp;</code></p>
<p>当命令行出现<code>INFO: Jenkins is fully up and running</code>即已经成功启动了服务。</p>
<p>默认端口为8080，可以在启动命令后加上 <code>—httpPort=8081</code>更改默认的启动端口。</p>
<p>启动设置还有：</p>
<p><code>—httpsPort=$HTTP_PORT</code>表示使用 https 协议。<br><code>—httpListenAddress=$HTTP_HOST</code>用来指定 jenkins 监听的 ip 范围，默认为所有的 ip 都可以访问此 jenkins server。</p>
<p>当然也可以把.war包部署进tomcat的webapps里面。</p>
<h5 id="2-2-Jenkins启动"><a href="#2-2-Jenkins启动" class="headerlink" title="2.2 Jenkins启动"></a>2.2 Jenkins启动</h5><p>启动了Jenkins服务之后，我们登录<code>localhost:8080</code>提示需要输入安全token。</p>
<p>根据提示，安全token在安装完jenkins会在本地的文件夹当中，例如macos会存放在<code>/Users/Shard/Jenkins/home/secrets/initialAdminPassword</code></p>
<p>输入完密码之后，会提示安装建议安装的插件。</p>
<p><img src="http://static.zybuluo.com/abcdocker/2dtjyesj3ae5zmyhxmer2kl2/image_1b4gkgcvk1c641d3k1e761jn6h10ae.png" alt=""></p>
<p>然后会提示创建一个管理员账户</p>
<p><img src="http://static.zybuluo.com/abcdocker/wkz0tuy8b3855c1q3s64vd7x/image_1b4gkkuopf351o7fltt17on13jbl.png" alt=""></p>
<p>创建完成则正式进入jenkins。</p>
<p><img src="http://static.zybuluo.com/abcdocker/tcz7eoamylmpjl1dekyzt6d0/image_1b4gkl8sf1o1m12b9h9q1p85hsc2.png" alt=""></p>
<p>**</p>
<p>macos如果遇到没有权限进入的文件夹，右键get info 然后添加权限用户即可</p>
<p>例如配置jenkins需要进入的<code>/Users/Shard/Jenkins/home/secrets</code></p>
<p>**</p>
<h5 id="2-3-Jenkins的简介"><a href="#2-3-Jenkins的简介" class="headerlink" title="2.3 Jenkins的简介"></a>2.3 Jenkins的简介</h5><p>Jenkins的关闭、重启等操作，可以通过查找进程，获取pid号，然后kill进程来完成。</p>
<p>但是更便捷的方法是，在jenkins的url中执行一些命令来操作jenkins，</p>
<p>如下<a href="http://[jenkins-server]/[command" target="_blank" rel="external">http://[jenkins-server]/[command</a>] 命令可以为：</p>
<ul>
<li><code>exit</code> 关闭 jenkins</li>
<li><code>restart</code> 重启 jenkins</li>
<li><code>reload</code> 重新载入配置 configuration</li>
</ul>
<p>Jenkins的目录（例如macos在<code>/Users/Shared/Jenkins</code>）中的<code>Jenkins/Home/jobs</code>是jenkins的核心内容，包含了jenkins的项目的配置、构建日志等重要信息，对jenkins进行备份，主要备份该文件夹即可。</p>
<p>Jenkins其实是一个开源的平台，主要的功能实现都是依靠插件完成，所以平台的设置没有太多，比较重要的是插件设置，所以我们将对使用到的具体的插件设置在后面讲述。</p>
<h5 id="2-4-当第一次启动完成后，后续启动-MacOS"><a href="#2-4-当第一次启动完成后，后续启动-MacOS" class="headerlink" title="2.4 当第一次启动完成后，后续启动(MacOS)"></a>2.4 当第一次启动完成后，后续启动(MacOS)</h5><h3 id="3-简易Python脚本启动"><a href="#3-简易Python脚本启动" class="headerlink" title="3.简易Python脚本启动"></a>3.简易Python脚本启动</h3><p>首先我们点击左上角的<strong>New Item</strong>，新建一个job</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins2.png" alt=""></p>
<p>我们需要对这个job命名，因为是一个简单的实验项目，所以我们选择的是<strong>Freestyle project</strong></p>
<p>其中的<strong>Pipeline</strong>其实是官方推荐的持续部署的写法，但是有其特殊的编写语法，所以我们会在后面再去使用</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins3.png" alt=""></p>
<p>然后我们进入了一个freestyle job的设置页面。</p>
<ul>
<li><p><strong>Discard old builds</strong></p>
<p> 一个job由于触发器的触发，会产生许多的构建记录，所以这个选项可以让我们选择是否丢弃过时的构建记录。阈值的设置可以为日期（即丢弃X日前的构建记录）或数量（即只保存最新的X个构建记录）。</p>
</li>
<li><p><strong>Github project</strong></p>
<p>由<a href="http://wiki.jenkins-ci.org/display/JENKINS/Github+Plugin" target="_blank" rel="external">GitHub plugin</a>产生的选项，可以输入该job的github地址，从而可以在后面的trigger触发器中选择使用<strong>GitHub hook trigger for GITScm polling</strong>（当有更改push上github后触发触发器）</p>
</li>
<li><p><strong><em>This</em> project is parameterised</strong> </p>
<p>为这个job添加一些变量参数，当执行构建或触发触发器而构建的时候，使用到这些参数，从而实现不同的功能，参数的设定可以由默认值，当该项被勾选后，Build Now<em>会变更为Build with Parameters</em>，需要键入相应的参数</p>
</li>
</ul>
<ul>
<li><p><strong>Throttle builds</strong></p>
<p>由 <a href="http://wiki.jenkins-ci.org/display/JENKINS/Branch+API+Plugin" target="_blank" rel="external">Branch API Plugin</a>产生的选项，对于构建进行一个最小时间间隔的强制设定，例如一天最多构建6次job。但是这个选项<strong>不会</strong>让job在时间段内<strong>平均</strong>构建，例如设置了一天6次，但是不是每隔4个小时就执行一次。</p>
</li>
<li><p><strong>Disable this project</strong></p>
<p>暂时关闭这个job，从而停止触发器的触发等操作。</p>
</li>
<li><p><strong>Execute concurrent builds if necessary</strong></p>
<p>勾选了这个选项，这个job并发的构建（例如同时点击数次Build Now）会异步进行构建。而默认非勾选情况下，是阻塞执行构建的。</p>
</li>
</ul>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins4.png" alt=""></p>
<p>然后就是代码仓库的管理选项了。</p>
<p>这个项目使用的是使用github作为代码仓库，所以我们选择第二个。（如使用SVN则选择第三个Subversion）</p>
<p>其中我们需要键入仓库的地址，对于github或者gitlab，我们需要使用非对称密钥对去进行身份验证，这里使用的是RSA算法生成的密钥。将jenkins所在本机生成的公钥填写入github或gitlab的密钥验证中，从而实现身份验证。</p>
<p>其中也需要选择远程仓库的分支，默认是master分支。</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins5.png" alt=""></p>
<p>接下来是选择构建触发器的选项，当触发器的条件满足时，则对job进行构建</p>
<ul>
<li><p><strong>Trigger builds remotely (e.g., from scripts)</strong></p>
<p>在该选项设定一个token口令，使用脚本对该项目进行立刻构建指令</p>
<p><code>JENKINS_URL`/job/simple-python/build?token=`TOKEN_NAME` or /buildWithParameters?token=`TOKEN_NAME</code></p>
<p>尾部最好加上<code>&amp;cause=Cause+Text</code>对该次构建进行注释，方面翻查操作日志</p>
<p>可以在gitlab中设置，然后在每一次push时触发URL操作，进行jenkins触发</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins25.png" alt=""></p>
</li>
<li><p><strong>Build after other projects are built</strong></p>
<p>可以选择在一个或多个项目完成构建之后触发触发器，进行构建，熟练地使用该触发器，可以形成一个有效的pipeline工作链</p>
</li>
<li><p><strong>Build periodically</strong></p>
<p>周期性地对项目进行构建，使用的语法是<a href="http://blog.csdn.net/k_scott/article/details/8508290" target="_blank" rel="external">cron</a></p>
<p>例如 <em> </em> <em> </em> * 则代表每分钟进行一次构建</p>
</li>
<li><p><del><strong>GitHub hook trigger for GITScm polling</strong></del></p>
<p><del>上文所说到的，当github有更新时，进行构建</del>   暂时没研究怎么用，可以使用以下的<strong>Poll SCM</strong></p>
</li>
<li><p><strong>Poll SCM</strong></p>
<p>当使用非github作为远程仓库时，使用该触发器，周期性对远程仓库进行检测，当发现有更新时进行构建</p>
<p>使用的时间安排表语法也是<a href="http://blog.csdn.net/k_scott/article/details/8508290" target="_blank" rel="external">cron</a></p>
</li>
</ul>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins6.png" alt=""></p>
<p>接下来是一些构建时的，对环境的选项设置</p>
<ul>
<li><p><strong>Delete workspace before build starts</strong></p>
<p>默认是当开始新的构建时，对该job的工作空间进行全部删除，也可以通过设置，只删除某些文件</p>
</li>
<li><p><strong>Abort the build if it’s stuck</strong></p>
<p>可以设置某一个具体的超时时间，当构建阻塞超过超时时间后，对该构建进行中止</p>
</li>
<li><p><strong>Add timestamps to the Console Output</strong></p>
<p>添加时间戳到控制台输出</p>
</li>
<li><p><strong>Use secret text(s) or file(s)</strong></p>
<p>对文件或密码进行加密</p>
</li>
<li><p><strong>With Ant</strong></p>
<p>为Apache Ant搭建环境</p>
</li>
</ul>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins7.png" alt=""></p>
<p>接下来是根据需要进行构建的脚本编写，这里是测试一个简单的python程序，所以直接使用命令行语句</p>
<p><code>python test.py</code></p>
<p>其中还有一些例如代码质量管理的<strong>Sonar Gates</strong>会在后述解释</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins8.png" alt=""></p>
<p>最后还可以选择在构建完成之后做其他动作，例如构建其他的项目，形成一个pipeline。</p>
<p>这里没有使用。</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins9.png" alt=""></p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/jenkins10.png" alt=""></p>
<p>至此，这个job就简单设置完成了，每当检测到远程代码仓库有更新时，进行代码构建，输出到控制台。</p>
<p>这是一个简单的python程序。</p>
<h3 id="4-Jenkins的master-slave模型"><a href="#4-Jenkins的master-slave模型" class="headerlink" title="4. Jenkins的master-slave模型"></a>4. Jenkins的master-slave模型</h3><p><img src="http://images.cnblogs.com/cnblogs_com/itech/build/jenkinsslavetpye.PNG" alt=""></p>
<p>Jenkins也有分布式的构建，模式是master-slave的模型，master主管所有的job的运行情况。slave可以设置成不同的生产环境，master分配job到slave中，实现相应的操作。</p>
<p>Reference：</p>
<p>[1] <a href="http://blog.csdn.net/abcdocker/article/category/6638595" target="_blank" rel="external">持续集成 by www.abcdocker.com</a></p>
<p>[2] <a href="https://files.cnblogs.com/files/itech/Jenkins%E5%85%A5%E9%97%A8.pdf" target="_blank" rel="external">Jenkins入门 by itech</a></p>
<p>[3] <a href="http://www.yiibai.com/jenkins/jenkins_distributed_builds.html" target="_blank" rel="external">Jenkins分布式构建</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-敏捷开发&quot;&gt;&lt;a href=&quot;#1-敏捷开发&quot; class=&quot;headerlink&quot; title=&quot;1.敏捷开发&quot;&gt;&lt;/a&gt;1.敏捷开发&lt;/h3&gt;&lt;p&gt;普通的程序开发，是按照瀑布流一样的流程往下走的。&lt;/p&gt;
&lt;p&gt;但是时至今日，客户的需求变化速度非常之快，而
    
    </summary>
    
      <category term="jenkins" scheme="http://www.pirrla.cn/categories/jenkins/"/>
    
    
      <category term="jenkins" scheme="http://www.pirrla.cn/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>HTML学习笔记</title>
    <link href="http://www.pirrla.cn/2017/09/19/other/html_notes/"/>
    <id>http://www.pirrla.cn/2017/09/19/other/html_notes/</id>
    <published>2017-09-18T16:00:00.000Z</published>
    <updated>2017-09-20T08:18:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>使用小写</p>
<p><code>&lt;br /&gt;</code> 是空行</p>
<p>浏览器会自动地在段落、标题的前后添加空行。（<code>&lt;p&gt; &lt;h1&gt;-&lt;h6&gt;</code>是块级元素）</p>
<p>避免使用<code>&lt;font&gt;</code>等标签了，使用style</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;Look! Styles and colors&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;p style=&quot;font-family:verdana;color:red&quot;&gt;</div><div class="line">This text is in Verdana and red&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;p style=&quot;font-family:times;color:green&quot;&gt;</div><div class="line">This text is in Times and green&lt;/p&gt;</div><div class="line"></div><div class="line">&lt;p style=&quot;font-size:30px&quot;&gt;This text is 30 pixels high&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>header 中用meta重定向</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=gb2312&quot; /&gt;</div><div class="line">&lt;meta http-equiv=&quot;Refresh&quot; content=&quot;5;url=http://www.w3school.com.cn&quot; /&gt;</div><div class="line">&lt;/head&gt;</div></pre></td></tr></table></figure>
<p>小于号&lt; <code>&amp;lt;</code>  大于号&gt;<code>&amp;gt;</code>空格最好用 <code>&amp;nbsp;</code></p>
<p>上传超过一个文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;form action=&quot;/example/html5/demo_form.asp&quot; method=&quot;get&quot;&gt;</div><div class="line">选择图片：&lt;input type=&quot;file&quot; name=&quot;img&quot; multiple=&quot;multiple&quot; /&gt;</div><div class="line">&lt;input type=&quot;submit&quot; /&gt;</div><div class="line">&lt;/form&gt;</div><div class="line">&lt;p&gt;请尝试在浏览文件时选取一个以上的文件。&lt;/p&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h3&gt;&lt;p&gt;使用小写&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; 是空行&lt;/p&gt;
&lt;p&gt;浏览器会自动地在段落、标题
    
    </summary>
    
      <category term="html" scheme="http://www.pirrla.cn/categories/html/"/>
    
    
      <category term="html" scheme="http://www.pirrla.cn/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>文件系统3</title>
    <link href="http://www.pirrla.cn/2017/09/13/fs/fs3/"/>
    <id>http://www.pirrla.cn/2017/09/13/fs/fs3/</id>
    <published>2017-09-13T06:23:06.000Z</published>
    <updated>2017-09-19T02:15:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mongo-Connector-设置"><a href="#Mongo-Connector-设置" class="headerlink" title="Mongo Connector 设置"></a><a href="https://my.oschina.net/tianlele/blog/848860" target="_blank" rel="external">Mongo Connector 设置</a></h3><p>为ES添加pinyin搜索</p>
<p>google open search</p>
<p><a href="https://disq.us/url?url=https%3A%2F%2Faaronparecki.com%2F2011%2F07%2F11%2F3%2Fhow-to-let-google-power-opensearch-on-your-website%3AHsv8oJR1pwEePhD0jpqWGdgJoCU&amp;cuid=3833100" target="_blank" rel="external">https://aaronparecki.com/20…</a></p>
<h3 id="TIKA读取附件"><a href="#TIKA读取附件" class="headerlink" title="TIKA读取附件"></a>TIKA读取附件</h3><p>tika — help</p>
<p><strong>1.tika-python 调用</strong></p>
<p><a href="https://github.com/chrismattmann/tika-python" target="_blank" rel="external">tika-python</a>是python的一个第三方库，可以快捷地调用tika很实用</p>
<p>安装库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install tika</div></pre></td></tr></table></figure>
<p>第一次调用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tika</div><div class="line">tika.initVM()</div><div class="line"><span class="keyword">from</span> tika <span class="keyword">import</span> parser</div><div class="line"></div><div class="line">parsed = parser.from_file(<span class="string">r'/Users/alan/Downloads/1/1.pptx'</span>)</div><div class="line">print(parsed[<span class="string">"metadata"</span>])</div><div class="line">print(parsed[<span class="string">"content"</span>])</div></pre></td></tr></table></figure>
<p>会下载tika的整个java包，所以耗时较长，请耐心等待</p>
<p>下载完之后就可以直接使用，方便快捷</p>
<p>metadata包括以下数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">height</div><div class="line">tiff:ImageLength</div><div class="line">Data PlanarConfiguration</div><div class="line">resourceName</div><div class="line">tiff:BitsPerSample</div><div class="line">X-Parsed-By</div><div class="line">Compression Lossless</div><div class="line">width</div><div class="line">Compression NumProgressiveScans</div><div class="line">Transparency Alpha</div><div class="line">Chroma ColorSpaceType</div><div class="line">X-TIKA:parse_time_millis</div><div class="line">Compression CompressionTypeName</div><div class="line">Data BitsPerSample</div><div class="line">IHDR</div><div class="line">Data SampleFormat</div><div class="line">Chroma BlackIsZero</div><div class="line">Chroma NumChannels</div><div class="line">Dimension ImageOrientation</div><div class="line">embeddedRelationshipId</div><div class="line">X-TIKA:embedded_resource_path</div><div class="line">tiff:ImageWidth</div><div class="line">Content-Type</div><div class="line">Dimension PixelAspectRatio</div></pre></td></tr></table></figure>
<p>!使用tika-python会打开一个tika服务器（post文件进去返回解析的html），内存占用较大</p>
<p><strong>2.命令行调用</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar tika-app-1.16.jar --text doc</div></pre></td></tr></table></figure>
<p>doc是需要解析的文件路径</p>
<p>为了在node.js中内部调用，我们使用了child_process库</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</div><div class="line"></div><div class="line">exec((<span class="string">'java -jar tika-app-1.16.jar --text '</span>+<span class="string">'/Users/alan/Downloads/1/bb.pdf'</span>),<span class="function"><span class="keyword">function</span>(<span class="params">error,stdout,stderr</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span> (error !== <span class="literal">null</span>)&#123;</div><div class="line">		<span class="built_in">console</span>.error(<span class="string">'error'</span>);</div><div class="line">	&#125;;</div><div class="line">	<span class="built_in">console</span>.log(stdout);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>3.服务器模式调用</strong></p>
<p>命令行启动服务器模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar tika-app-1.16.jar --server --port 12345</div></pre></td></tr></table></figure>
<p>这是简单的服务器模式启动，仅供测试环境使用</p>
<p>更完善的服务器模式tika看<a href="https://wiki.apache.org/tika/TikaJAXRS" target="_blank" rel="external">https://wiki.apache.org/tika/TikaJAXRS</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Mongo-Connector-设置&quot;&gt;&lt;a href=&quot;#Mongo-Connector-设置&quot; class=&quot;headerlink&quot; title=&quot;Mongo Connector 设置&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://my.oschina.net/
    
    </summary>
    
      <category term="filesystem" scheme="http://www.pirrla.cn/categories/filesystem/"/>
    
    
      <category term="filesystem" scheme="http://www.pirrla.cn/tags/filesystem/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB 复制集</title>
    <link href="http://www.pirrla.cn/2017/09/12/mongo-fuzhiji/"/>
    <id>http://www.pirrla.cn/2017/09/12/mongo-fuzhiji/</id>
    <published>2017-09-12T06:24:00.000Z</published>
    <updated>2017-09-12T06:55:18.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="MongoDB复制集开启（本机）"><a href="#MongoDB复制集开启（本机）" class="headerlink" title="MongoDB复制集开启（本机）"></a>MongoDB复制集开启（本机）</h3><p>在本地开启三个mongod，当作三个服务器，分别使用作<strong>主复制集、从复制集、仲裁复制集</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:28001   //主复制集</div><div class="line">127.0.0.1:28002   //从复制集</div><div class="line">127.0.0.1:28003   //仲裁复制集</div></pre></td></tr></table></figure>
<p><strong>1.首先建立三个文件夹分别存放数据库数据文件。</strong></p>
<p><strong>2.分别建立各自的conf配置文件</strong></p>
<p>配置内容如下：（三个服务器只是端口不同，其他配置相同）</p>
<p>/data/mongodb/conf/28001.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># 端口</div><div class="line">port=28001</div><div class="line"># 绑定ip地址</div><div class="line">bind_ip=127.0.0.1</div><div class="line"># 日志文件路径</div><div class="line">logpath=/data/mongodb/log/28001.log</div><div class="line"># 数据文件存放目录</div><div class="line">dbpath=/data/mongodb/data/28001/</div><div class="line"># 以追加的方式写日志</div><div class="line">logappend=true</div><div class="line"></div><div class="line">pidfilepath=/data/mongodb/data/28001/28001.pid</div><div class="line">fork=true</div><div class="line">oplogSize=1024</div><div class="line"># 复制集名称</div><div class="line">replSet=MyMongo</div></pre></td></tr></table></figure>
<p>其中复制集名称最重要，因为如果需要放在同一个复制集，必须保证不同的服务器的复制集名称完全相同。（<font color="red">其中replSet的S记得要大写</font>）</p>
<p><strong>3.启动三个服务器</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mongod -f /data/mongodb/conf/28001.conf</div><div class="line">mongod -f /data/mongodb/conf/28002.conf</div><div class="line">mongod -f /data/mongodb/conf/28003.conf</div></pre></td></tr></table></figure>
<p>后面跟的是配置文件的地址，启动完成后，会出现一个fork:successful的提示信息，而且不是在前台启动的，所以要注意，可能已经启动过了。</p>
<p>查找是否有启动可以使用以下命令查看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef | grep mongo</div></pre></td></tr></table></figure>
<p><strong>4.初始化复制集</strong></p>
<p>如果是第一次进行初始化，进入需要成为主复制集的服务器，这里进入28001端口</p>
<p>进入mongo客户端</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo localhost:28001</div></pre></td></tr></table></figure>
<p>然后输入初始化命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rs.initiate(&#123;_id:&apos;MyMongo&apos;,members:[&#123;_id:1,host:&apos;127.0.0.1:28001&apos;&#125;]&#125;)</div></pre></td></tr></table></figure>
<p>第一个_id：复制集的名称</p>
<p>member：复制集服务器列表（因为其他服务器还没完成初始化，所以只有一个当前的服务器）</p>
<p>第二个_id：指定给服务器的ID</p>
<p>host：服务器主机地址</p>
<p><strong>5.添加从复制集合仲裁复制集</strong></p>
<p>完成初始化，可以看到，当前服务器的名称已经成为了primary。因为是整个复制集中第一个完成初始化的，所以该服务器成为主复制集。</p>
<p>然后我们需要添加从复制集：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rs.add(&apos;127.0.0.1:28002&apos;)</div></pre></td></tr></table></figure>
<p>{”ok“ : 1}添加成功</p>
<p>调用rs.status()可以查看到复制集的情况</p>
<p>然后我们添加仲裁复制集：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rs.addArb(&apos;127.0.0.1:28003&apos;)</div></pre></td></tr></table></figure>
<p>{”ok“ : 1}添加成功</p>
<p><strong>6.测试</strong></p>
<p>Ref:</p>
<p>[1] <a href="http://www.cnblogs.com/nicolegxt/p/6841442.html?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="external">http://www.cnblogs.com/nicolegxt/p/6841442.html?utm_source=itdadao&amp;utm_medium=referral</a></p>
<p>[2] <a href="http://blog.csdn.net/lichangzai/article/details/50903130" target="_blank" rel="external">http://blog.csdn.net/lichangzai/article/details/50903130</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;MongoDB复制集开启（本机）&quot;&gt;&lt;a href=&quot;#MongoDB复制集开启（本机）&quot; class=&quot;headerlink&quot; title=&quot;MongoDB复制集开启（本机）&quot;&gt;&lt;/a&gt;MongoDB复制集开启（本机）&lt;/h3&gt;&lt;p&gt;在本地开启三个mongod，
    
    </summary>
    
      <category term="mongodb" scheme="http://www.pirrla.cn/categories/mongodb/"/>
    
    
      <category term="mongodb" scheme="http://www.pirrla.cn/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>文件系统2</title>
    <link href="http://www.pirrla.cn/2017/09/12/fs/fs2/"/>
    <id>http://www.pirrla.cn/2017/09/12/fs/fs2/</id>
    <published>2017-09-12T06:23:06.000Z</published>
    <updated>2017-10-31T08:27:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="FastDFS与GridFS的选择"><a href="#FastDFS与GridFS的选择" class="headerlink" title="FastDFS与GridFS的选择"></a>FastDFS与GridFS的选择</h3><h4 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a>FastDFS</h4><p>FastDFS服务器端有两个角色：追踪器（tracker）和存储节点（storage）。</p>
<p>追踪器：主要负责调度工作，在访问上起到<strong>负载均衡</strong>的作用。</p>
<p>存储节点：存储文件，完成文件管理的存储、同步和提供存取接口等功能。</p>
<p>FastDFS同时会对文件的metadata（相关属性，例如宽度等）进行管理，以键值对的方式表示。</p>
<p>建议文件大小： 4KB &lt; file_size &lt;500MB</p>
<p>系统结构：</p>
<p><img src="http://static.oschina.net/uploads/img/201204/20230218_pNXn.jpg" alt=""></p>
<p>存储节点采用分卷的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相对独立的。</p>
<p>一个卷可以由一台或多台存储服务器组成，多台存储服务器可以起到冗余备份和负载均衡的作用。</p>
<p><strong>上传文件交互过程：</strong></p>
<ol>
<li>client询问tracker上传到的storage，不需要附加参数；</li>
<li>tracker返回一台可用的storage；</li>
<li>client直接和storage通讯完成文件上传。 </li>
</ol>
<p><strong>下载文件交互过程：</strong></p>
<ol>
<li>client询问tracker下载文件的storage，参数为文件标识（卷名和文件名）；</li>
<li>tracker返回一台可用的storage；</li>
<li>client直接和storage通讯完成文件下载。</li>
</ol>
<h4 id="GridFS"><a href="#GridFS" class="headerlink" title="GridFS"></a>GridFS</h4><p>MongoDB单个document存储上限为16M，为了存储大于16M的文件，我们可以使用MongoDB官方的文件系统GridFS。</p>
<p>默认分割大小<strong>256K</strong>。</p>
<p>GridFS的思想很简单就是将一个很大的文件进行分割，分割后的每一个小文件作为一个document单独存储。然后提供了两个集合来存储分割的信息和文件的元信息。这两个集合默认是fs.files和fs.chunks。</p>
<p>fs.files集合就存储了这个文件的基本信息：</p>
<ul>
<li>_id</li>
<li>length: 文件的大小</li>
<li>filename: 文件的名称</li>
<li>chunkSize: 这个文件每一个分块的大小，单位是字节，默认为256K。</li>
<li>uploadDate: 文件上传的时间。</li>
<li>md5: MD5信息，以检查文件完整性</li>
</ul>
<p>fs.chunks集合包括以下几个字段：</p>
<ul>
<li>_id</li>
<li>n: 表示是分块中的第几块，从0开始。</li>
<li>data: 存储的是当前文件分块的二进制数据。</li>
<li>file_id: 表示的是该块是属于哪一个文件，存储的就是fs.files中document的_id。在读取文件的时候，先在fs.files集合中找满足条件的document，获取它的_id值，然后根据这个值到fs.chunks集合中查找所有files_id为该值的document，并按n排序，最后依次读取document中data的值拼凑出原来的文件。</li>
</ul>
<h3 id="Mongo-Connector使用心得"><a href="#Mongo-Connector使用心得" class="headerlink" title="Mongo Connector使用心得"></a>Mongo Connector使用心得</h3><p>当按照<a href="http://pirrla.cn/2017/09/05/fs/fs1/" target="_blank" rel="external">复制集开启流程</a>完成后，即可使用mongo connector。</p>
<ol>
<li>开启MongoDB复制集</li>
<li>开启ES</li>
<li>开启mongo connector</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mongo-connector --auto-commit-interval=0 -m localhost:28001 -t localhost:9200 -d elastic2_doc_manager -n news.tj_reports -o /Users/alan/Downloads/oplog.txt</div></pre></td></tr></table></figure>
<font color="red">之前的表述有错误，开启mongo connector后数据会直接同步，旧数据也会</font>

<p><strong>MongoDB的database会作为es的index</strong></p>
<p><strong>collection会作为es的type</strong></p>
<p>然后各个字段都会同步到es中。（增删改都会，version会变）</p>
<h3 id="Mongo-connector-support-for-GridFS-2"><a href="#Mongo-connector-support-for-GridFS-2" class="headerlink" title="Mongo connector support for GridFS[2]"></a>Mongo connector support for GridFS[2]</h3><p>mongo connector支持将MongoDB的GridFS中的文件复制到es中，通过es的mapping种类attachment。(<del>已过期</del>)</p>
<ol>
<li>ES安装<a href="https://github.com/elastic/elasticsearch-mapper-attachments" target="_blank" rel="external">attachment插件</a></li>
</ol>
<ol>
<li>​</li>
</ol>
<p>attachment type 已经被<a href="https://www.elastic.co/guide/en/elasticsearch/plugins/5.6/mapper-attachments.html#mapper-attachments-install" target="_blank" rel="external">抛弃</a>？</p>
<font color="red">5.6ES推出了一个<a href="https://www.elastic.co/guide/en/elasticsearch/plugins/5.6/ingest-attachment.html" target="_blank" rel="external">Ingest Attachment Processor</a></font>





<p>Ref:</p>
<p>[1] <a href="http://www.oschina.net/p/fastdfs" target="_blank" rel="external">http://www.oschina.net/p/fastdfs</a></p>
<p>[2] <a href="https://github.com/mongodb-labs/mongo-connector/wiki/Usage%20with%20ElasticSearch" target="_blank" rel="external">https://github.com/mongodb-labs/mongo-connector/wiki/Usage%20with%20ElasticSearch</a></p>
<p>[3] <a href="http://blog.csdn.net/WK313753744/article/details/49943155" target="_blank" rel="external">FastDFS 介绍</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;FastDFS与GridFS的选择&quot;&gt;&lt;a href=&quot;#FastDFS与GridFS的选择&quot; class=&quot;headerlink&quot; title=&quot;FastDFS与GridFS的选择&quot;&gt;&lt;/a&gt;FastDFS与GridFS的选择&lt;/h3&gt;&lt;h4 id=&quot;FastD
    
    </summary>
    
      <category term="filesystem" scheme="http://www.pirrla.cn/categories/filesystem/"/>
    
    
      <category term="filesystem" scheme="http://www.pirrla.cn/tags/filesystem/"/>
    
  </entry>
  
  <entry>
    <title>文件系统1</title>
    <link href="http://www.pirrla.cn/2017/09/05/fs/fs1/"/>
    <id>http://www.pirrla.cn/2017/09/05/fs/fs1/</id>
    <published>2017-09-05T06:23:06.000Z</published>
    <updated>2017-09-13T08:32:15.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库选择"><a href="#数据库选择" class="headerlink" title="数据库选择"></a>数据库选择</h3><p><strong>关系型数据库 - Oracle</strong></p>
<p>基础事务有四个特性：</p>
<ul>
<li>原子性：整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回复 （Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li>
<li>一致性：在事务开始之前和事务结束以后，数据库的完整性限制没有被破坏。</li>
<li>隔离性：两个事务的执行是互不干扰的，一个事务不可能看到其他事务运行时，中间某一时刻的数据。</li>
<li>持久性：在事务完成以后，该事务对数据库所作的更改便持久地保存在数据库之中，并不会被回复。</li>
</ul>
<p>对网站来说，关系型数据库的很多特性不再需要了：</p>
<ul>
<li>事务一致性</li>
</ul>
<p>关系型数据库在对事物一致性的维护中有很大的开销，而现在很多web系统对事物的读写一致性都不高</p>
<ul>
<li>读写实时性</li>
</ul>
<p>对关系数据库来说，插入一条数据之后立刻查询，是肯定可以读出这条数据的，但是对于很多web应用来说，并不要求这么高的实时性，比如发一条消息之后，过几秒乃至十几秒之后才看到这条动态是完全可以接受的</p>
<ul>
<li>复杂SQL，特别是多表关联查询</li>
</ul>
<p>任何大数据量的web系统，都非常忌讳多个大表的关联查询，以及复杂的数据分析类型的复杂SQL报表查询，特别是SNS类型的网站，从需求以及产品阶级角度，就避免了这种情况的产生。往往更多的只是单表的主键查询，以及单表的简单条件分页查询，SQL的功能极大的弱化了</p>
<p><strong>NoSQL - MongoDB</strong></p>
<p>由于在本项目中，数据是新闻资讯的存储，而新闻资讯相互之间是相对独立的，所以不需要使用到关系型数据库。</p>
<p>非关系型数据库相当于是简化版的关系型数据库，减少了一些相对少用到的功能，提升了产品的性能。相对于关系型数据库，抛弃了ACID特性。</p>
<p>但是由于是基于键值对的特性，所以非常容易进行扩展，可拓展性强。</p>
<h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>但是MongoDB也有一个问题。由于MongoDB的文档结构为BJSON格式（BJSON全称：Binary JSON），而BJSON格式本身就支持保存二进制格式的数据，因此可以把文件的二进制格式的数据直接保存到MongoDB的文档结构中。但是由于一个BJSON的最大长度不能超过16M，所以限制了单个文档中能存入的最大文件不能超过<font color="red">16M</font></p>
<p>为了提供对大容量文件存取的支持，samus驱动提供了“GridFS”方式来支持。</p>
<p><strong>BJSON</strong></p>
<p><a href="http://blog.csdn.net/kwsy2008/article/details/48969607" target="_blank" rel="external">python 实现</a></p>
<p><strong>GridDFS</strong></p>
<p>MongoDB内置功能。</p>
<p>GridFS是一种在MongoDB中存储大二进制文件的机制。使用GridFS存文件有如下几个原因：</p>
<p>利用Grid可以简化需求。要是已经用了MongoDB，GridFS就可以不需要使用独立文件存储架构。</p>
<p>基本原理是将文件存储在两个Collection之中，一个保存文件索引，一个保存文件内容。4MB每一块。</p>
<table>
<thead>
<tr>
<th>指标</th>
<th>适合类型</th>
<th>文件分布</th>
<th>系统性能</th>
<th>复杂度</th>
<th>FUSE</th>
<th>POSIX</th>
<th>备份机制</th>
<th>通讯协议接口</th>
<th>社区支持</th>
<th></th>
<th>开发语言</th>
</tr>
</thead>
<tbody>
<tr>
<td>FastDFS</td>
<td>4KB~500MB</td>
<td>小文件合并存储不分片处理</td>
<td>很高</td>
<td>简单</td>
<td>不支持</td>
<td>不支持</td>
<td>组内冗余备份</td>
<td>ApiHTTP</td>
<td>国内用户群</td>
<td></td>
<td>C语言</td>
</tr>
<tr>
<td>TFS</td>
<td>所有文件</td>
<td>小文件合并，以block组织分片</td>
<td></td>
<td>复杂</td>
<td>不支持</td>
<td>不支持</td>
<td>Block存储多份,主辅灾备</td>
<td>APIhttp</td>
<td>少</td>
<td></td>
<td>C++</td>
</tr>
<tr>
<td>MFS</td>
<td>大于64K</td>
<td>分片存储</td>
<td>Master占内存多</td>
<td></td>
<td>支持</td>
<td>支持</td>
<td>多点备份动态冗余</td>
<td>使用fuse挂在</td>
<td>较多</td>
<td></td>
<td>Perl</td>
</tr>
<tr>
<td>HDFS</td>
<td>大文件</td>
<td>大文件分片分块存储</td>
<td></td>
<td>简单</td>
<td>支持</td>
<td>支持</td>
<td>多副本</td>
<td>原生api</td>
<td>较多</td>
<td></td>
<td>java</td>
</tr>
<tr>
<td>Ceph</td>
<td>对象文件块</td>
<td>OSD一主多从</td>
<td></td>
<td>复杂</td>
<td>支持</td>
<td>支持</td>
<td>多副本</td>
<td>原生api</td>
<td>较少</td>
<td></td>
<td>C++</td>
</tr>
<tr>
<td>MogileFS</td>
<td>海量小图片</td>
<td></td>
<td>高</td>
<td>复杂</td>
<td>可以支持</td>
<td>不支持</td>
<td>动态冗余</td>
<td>原生api</td>
<td>文档少</td>
<td></td>
<td>Perl</td>
</tr>
<tr>
<td>ClusterFS</td>
<td>大文件</td>
<td></td>
<td></td>
<td>简单</td>
<td>支持</td>
<td>支持</td>
<td>镜像</td>
<td></td>
<td>多</td>
<td></td>
<td>C</td>
</tr>
</tbody>
</table>
<p><strong>HDFS</strong></p>
<p>还是适合大数据处理，附件等文档太小，不适合使用HDFS。</p>
<p><strong>FastDFS</strong></p>
<ol>
<li>为互联网量身定制，海量数据文件存储。</li>
<li>高可用(同组备份机制)。</li>
<li>FastDFS不是通用的文件系统，只能通过api来访问，目前提供c,java,php客户端。phtyon由第三方开发者提供。</li>
<li>FastDFS可以看作是基于key/value pair存储系统，也许称为分布式文件存储服务更合适。</li>
<li>支持高并发(这个好像没体现出支持什么高并发,这个是nginx的功劳吧)</li>
</ol>
<h3 id="从MongoDB到ElasticSearch"><a href="#从MongoDB到ElasticSearch" class="headerlink" title="从MongoDB到ElasticSearch"></a>从MongoDB到ElasticSearch</h3><p>MongoDB 本身是自带文本索引功能的，但是，不支持中文。<strong>术业有专攻</strong>，MongoDB 是数据存储应用，那么全文检索就使用专业的全文搜索引擎吧。</p>
<p><strong>0.River</strong></p>
<p>由于只支持ES 2.0 以下版本，已弃用。</p>
<p><strong>1.<a href="https://github.com/mongodb-labs/mongo-connector" target="_blank" rel="external">Mongo-Connector</a></strong></p>
<p>实时</p>
<ul>
<li>MongoDB必须开启复制集[2]</li>
</ul>
<p>This assumes there is a MongoDB replica set running on port 27017 and that Elasticsearch is running on port 9200 both on the local machine.</p>
<ul>
<li>安装mongo-connector</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install &apos;mongo-connector[elastic5]&apos;</div></pre></td></tr></table></figure>
<ul>
<li>运行mongo-connector</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo-connector -m 127.0.0.1:27017 -t 127.0.0.1:9200 -d elastic_doc_manager</div></pre></td></tr></table></figure>
<p>启动之后，现在开始，在mongoDB上的操作，都会同步到elasticsearch之中了。</p>
<p>（对旧数据无影响）</p>
<p>问题：根据其他用户的评价，mongo-conncetor会出现延迟和退出的现象</p>
<p><strong>2.<a href="https://github.com/keenwon/mongodb-to-elasticsearch" target="_blank" rel="external">mongodb to elasticsearch</a></strong></p>
<p>非实时，应对一天更新一次的场景</p>
<p>使用了mongoose</p>
<p>一个node.js写的小程序，可以将mongodb的数据输入到es。</p>
<p>Ref:</p>
<p>[1] <a href="https://segmentfault.com/a/1190000003773614" target="_blank" rel="external">MongoDB 数据自动同步到 ElasticSearch</a></p>
<p>[2] <a href="http://www.runoob.com/mongodb/mongodb-replication.html" target="_blank" rel="external">副本集设置</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据库选择&quot;&gt;&lt;a href=&quot;#数据库选择&quot; class=&quot;headerlink&quot; title=&quot;数据库选择&quot;&gt;&lt;/a&gt;数据库选择&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;关系型数据库 - Oracle&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基础事务有四个特性：&lt;/p&gt;
&lt;ul
    
    </summary>
    
      <category term="filesystem" scheme="http://www.pirrla.cn/categories/filesystem/"/>
    
    
      <category term="filesystem" scheme="http://www.pirrla.cn/tags/filesystem/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统5</title>
    <link href="http://www.pirrla.cn/2017/09/05/rs/rs_5/"/>
    <id>http://www.pirrla.cn/2017/09/05/rs/rs_5/</id>
    <published>2017-09-05T06:23:06.000Z</published>
    <updated>2017-09-08T05:24:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="假设已经得出了目标用户的相似用户，现做出推荐"><a href="#假设已经得出了目标用户的相似用户，现做出推荐" class="headerlink" title="假设已经得出了目标用户的相似用户，现做出推荐"></a>假设已经得出了目标用户的相似用户，现做出推荐</h3><h3 id="1-推荐目标用户已购买的产品相似产品"><a href="#1-推荐目标用户已购买的产品相似产品" class="headerlink" title="1.推荐目标用户已购买的产品相似产品"></a>1.推荐目标用户已购买的产品相似产品</h3><p>由于用户在购买了产品后，当产品过了存续期后，可能需要继续购买同类型的产品，所以我们需要对用户之前购买的产品进行统计分析，继续推荐相似的产品给用户。</p>
<p><strong>1.大类</strong></p>
<p>当用户购买了多次相同大类的产品之后，我们可以认为该用户对该大类的风险程度、收益情况比较认可，所以有较大的可能性会再次购买，所以我们主要统计用户已购买产品大类的情况。</p>
<p><strong>2.天数</strong></p>
<p>由于用户对资金的灵活程度有自己的偏好，所以用户购买产品的天数比较固定或者有规律性，例如用户如果认为91天的产品的灵活程度和收益情况互相权衡之下最理想，那么用户对91天的产品的偏好是存在的。同时用户初期对产品的信任程度没有达到一定的高度，购买的天数可能会比较短，所以如果用户多次购买了同一类产品后，可以推荐同样的天数<strong>或更长的天数</strong>的产品。</p>
<p><strong>3.收益利率</strong></p>
<p>由于前两个属性产品大类和产品天数就决定了产品的收益情况，所以可以直接根据前两个属性直接得到用户的投资偏好。</p>
<p><strong>4.综上所述</strong></p>
<p>我们将统计用户购买过最多的产品类型和产品天数，然后将开放日期在未来或今日的产品选择出来，推荐给用户。</p>
<h3 id="2-推荐用户尝试其他类型产品"><a href="#2-推荐用户尝试其他类型产品" class="headerlink" title="2.推荐用户尝试其他类型产品"></a>2.推荐用户尝试其他类型产品</h3><p>统计相似用户前100位的购买习惯，然后推荐该用户未购买过的产品或者排名第一的产品。</p>
<p>因为统计前100位相似用户的时候已经筛选掉了只购买过一款产品的用户，所以不会出现无法推荐的问题。</p>
<p><strong>问题：如果购买习惯完全相同怎么处理？</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1a6726cef907827da0411d9f107550b4fcfd2feb</div><div class="line">9.43% GF1806 0.250494227106 新睿利优先91天 债券型 91 6.55</div><div class="line">9.46% GF1807 0.228637469027 新睿利优先91天 债券型 91 6</div><div class="line">9.44% GF1805 0.377176516585 新睿利优先91天 债券型 91 4.35</div><div class="line">9.53% GF1802 0.256939429748 新睿利优先91天 债券型 91 5.5</div><div class="line">9.33% GF180F 0.758798112353 新睿利优先91天 债券型 91 3.8</div><div class="line">13.81% 879003 0.0578450717465 多添利14天 短期理财类 14 4.3</div><div class="line">10.56% GF1811 0.288599403176 新睿利优先91天 债券型 91 4.8</div><div class="line">9.71% GF180L 1.38227279375 新睿利优先91天 债券型 91 4.7</div><div class="line">9.40% 879005 0.0835590588465 多添利56天 短期理财类 56 5.2</div><div class="line">9.33% 879049 4.02077615455 多添利X36天 短期理财类 36 4.7</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">879002 54 多添利7天 短期理财类 7 4.4</div><div class="line">879004 42 多添利28天 短期理财类 28 4.6</div><div class="line">GF1808 23 新睿利优先91天 债券型 91 5.4</div><div class="line">GF1810 21 新睿利优先91天 债券型 91 </div><div class="line">879006 21 多添利91天 短期理财类 91 4.6</div><div class="line">GF1814 19 新睿利优先91天 债券型 91 6.2</div><div class="line">GF1804 14 新睿利优先91天 债券型 91 5.6</div><div class="line">GF1809 12 新睿利优先91天 债券型 91 3.6</div><div class="line">GF1803 11 新睿利优先91天 债券型 91 6</div><div class="line">GF1813 8 新睿利优先91天 债券型 91 6.2</div><div class="line">GF1812 8 新睿利优先91天 债券型 91 4.8</div><div class="line">GF1815 6 新睿利优先91天 债券型 91 5.3</div><div class="line">879007 5 多添利182天 短期理财类 182 4.75</div><div class="line">879287 3 多添利X28天 短期理财类 28 5.5</div><div class="line">879610 3 多添利X364天 短期理财类 364 4.8</div><div class="line">879114 3 多添利X182天 短期理财类 182 4.4</div><div class="line">879620 2 多添利X364天 短期理财类 364 4.9</div><div class="line">879119 2 多添利X364天 短期理财类 364 5.25</div><div class="line">GF1884 2 新睿利优先X189天 债券型 189 6.1</div><div class="line">GF1823 2 新睿利优先X126天 债券型 126 6</div><div class="line">879008 2 多添利364天 短期理财类 364 </div><div class="line">879208 2 多添利X126天 短期理财类 126 5.3</div><div class="line">879277 2 多添利X56天 短期理财类 56 4.6</div><div class="line">GF1887 1 新睿利优先X182天 债券型 182 4.9</div><div class="line">87953P 1 多添利X56天 短期理财类 56 4.45</div><div class="line">879579 1 多添利X364天 短期理财类 364 4.9</div><div class="line">879341 1 多添利X182天15 短期理财类 182 5.1</div><div class="line">879162 1 多添利X182天 短期理财类 182 4.1</div><div class="line">87913I 1 多添利X35天 短期理财类 35 4.5</div><div class="line">GF1821 1 新睿利优先X182天 债券型 182 5.25</div><div class="line">GF1894 1 新睿利优先X182天 债券型 182 5.3</div><div class="line">879218 1 多添利X28天 短期理财类 28 4.2</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;假设已经得出了目标用户的相似用户，现做出推荐&quot;&gt;&lt;a href=&quot;#假设已经得出了目标用户的相似用户，现做出推荐&quot; class=&quot;headerlink&quot; title=&quot;假设已经得出了目标用户的相似用户，现做出推荐&quot;&gt;&lt;/a&gt;假设已经得出了目标用户的相似用户，现做出
    
    </summary>
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/categories/recommendationsystem/"/>
    
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/tags/recommendationsystem/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统4</title>
    <link href="http://www.pirrla.cn/2017/08/31/rs/rs_4/"/>
    <id>http://www.pirrla.cn/2017/08/31/rs/rs_4/</id>
    <published>2017-08-31T06:17:36.000Z</published>
    <updated>2017-09-04T02:13:59.000Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>

<h3 id="数据归一化"><a href="#数据归一化" class="headerlink" title="数据归一化"></a>数据归一化</h3><p>现在每个用户的属性变为了持有产品的份额：</p>
<p>直接使用份额计算会出现偏差化：</p>
<p>例如购买了一款产品金额较大，那么权重就会偏大</p>
<p>那么就将份额标准化</p>
<p><strong>1.固定阈值</strong></p>
<p>例如（万分之X）</p>
<table>
<thead>
<tr>
<th>方案</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
</tr>
</thead>
<tbody>
<tr>
<td>方案1</td>
<td>0-0.03</td>
<td>0.03-0.1</td>
<td>0.1-0.3</td>
<td>0.3-1.0</td>
<td>1.0+</td>
</tr>
<tr>
<td>方案2</td>
<td>0-0.01</td>
<td>0.01-0.1</td>
<td>0.1-1.0</td>
<td>1.0-2.0</td>
<td>2.0+</td>
</tr>
</tbody>
</table>
<p>划分为五个评分，0分则是没有持仓过该产品</p>
<p><strong>2.平均持仓数</strong></p>
<p>计算出每个产品的用户平均持仓数，然后根据平均持仓倍数去划分数据：</p>
<table>
<thead>
<tr>
<th>方案</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
</tr>
</thead>
<tbody>
<tr>
<td>方案1</td>
<td>0-0.5倍</td>
<td>0.5-1.0倍</td>
<td>1.0-1.5倍</td>
<td>1.5-2.0倍</td>
<td>2.0+倍</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><strong>3.排序划分</strong></p>
<p>将一款产品的所有用户进行排序，然后根据排序去划分数据</p>
<table>
<thead>
<tr>
<th>方案</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
</tr>
</thead>
<tbody>
<tr>
<td>方案1</td>
<td>20%</td>
<td>20%</td>
<td>20%</td>
<td>20%</td>
<td>20%</td>
</tr>
<tr>
<td>方案</td>
<td>10%</td>
<td>25%</td>
<td>30%</td>
<td>25%</td>
<td>10%</td>
</tr>
</tbody>
</table>
<p><strong>4.（0，1）标准化（max-min）</strong></p>
<p>$${x}_{normalization}=\frac{x-Min}{Max-Min}$$</p>
<p>然后将得到的结果乘以5，得到投资偏好。</p>
<p><strong>5.Z-score标准化</strong></p>
<p>将数据划分为正态分布化的数据</p>
<p>$${x}_{normalization}=\frac{x-\mu }{\sigma }$$</p>
<p>其中的u是平均数，sigma是标准差</p>
<h3 id="实验结果："><a href="#实验结果：" class="headerlink" title="实验结果："></a>实验结果：</h3><p><strong>0.不进行归一化</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">目标客户</div><div class="line">产品1 0.250494227106 新睿利优先91天 债券型 91</div><div class="line">产品2 0.228637469027 新睿利优先91天 债券型 91</div><div class="line">产品3 0.377176516585 新睿利优先91天 债券型 91</div><div class="line">产品4 0.256939429748 新睿利优先91天 债券型 91</div><div class="line">产品5 0.758798112353 新睿利优先91天 债券型 91</div><div class="line">产品6 0.0578450717465 多添利14天 短期理财类 14</div><div class="line">产品7 0.288599403176 新睿利优先91天 债券型 91</div><div class="line">产品8 1.38227279375 新睿利优先91天 债券型 91</div><div class="line">产品9 0.0835590588465 多添利56天 短期理财类 56</div><div class="line">产品10 4.02077615455 多添利X36天 短期理财类 36</div><div class="line">***********************************</div><div class="line">d96e788472f4d36ae9163192f84635d2b3332ced</div><div class="line">产品1 0.249496242138 新睿利优先91天 债券型 91</div><div class="line">产品5 0.758798112353 新睿利优先91天 债券型 91</div><div class="line">879002 0.0262265839131 多添利7天 短期理财类 7</div><div class="line">产品6 0.0390845079368 多添利14天 短期理财类 14</div><div class="line">产品9 0.0828958917128 多添利56天 短期理财类 56</div><div class="line">产品10 4.02077615455 多添利X36天 短期理财类 36</div><div class="line">***********************************</div><div class="line">b598fb7de5df3b8a73c5c23c98fb3c73483b020b</div><div class="line">产品1 0.249496242138 新睿利优先91天 债券型 91</div><div class="line">产品2 0.226822885939 新睿利优先91天 债券型 91</div><div class="line">产品3 0.374926954856 新睿利优先91天 债券型 91</div><div class="line">产品7 0.259999462321 新睿利优先91天 债券型 91</div><div class="line">GF1809 0.306768321508 新睿利优先91天 债券型 91</div><div class="line">879002 0.0233817984367 多添利7天 短期理财类 7</div><div class="line">879006 0.115620874347 多添利91天 短期理财类 91</div><div class="line">产品10 4.02077615455 多添利X36天 短期理财类 36</div><div class="line">***********************************</div><div class="line">36e64d058bd7a6c387ffe388179d4639749cc44f</div><div class="line">产品1 0.249496242138 新睿利优先91天 债券型 91</div><div class="line">GF1814 0.249990015339 新睿利优先91天 债券型 91</div><div class="line">GF1804 0.351223807748 新睿利优先91天 债券型 91</div><div class="line">产品3 0.375676808766 新睿利优先91天 债券型 91</div><div class="line">产品7 0.323959330052 新睿利优先91天 债券型 91</div><div class="line">GF1803 0.407730728967 新睿利优先91天 债券型 91</div><div class="line">产品2 0.229544760571 新睿利优先91天 债券型 91</div><div class="line">GF1812 0.355765682516 新睿利优先91天 债券型 91</div><div class="line">879119 0.729319808632 多添利X364天 短期理财类 364</div><div class="line">GF1809 0.311063078009 新睿利优先91天 债券型 91</div><div class="line">产品5 0.770938882151 新睿利优先91天 债券型 91</div><div class="line">879162 1.2696774613 多添利X182天 短期理财类 182</div><div class="line">879002 0.020420103968 多添利7天 短期理财类 7</div><div class="line">产品6 0.0394753530162 多添利14天 短期理财类 14</div><div class="line">产品8 1.38227279375 新睿利优先91天 债券型 91</div><div class="line">产品9 0.0830616834962 多添利56天 短期理财类 56</div><div class="line">879004 0.0871009660079 多添利28天 短期理财类 28</div><div class="line">产品10 4.02077615455 多添利X36天 短期理财类 36</div></pre></td></tr></table></figure>
<p>1.固定值归一化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">目标客户</div><div class="line">产品1 0.250494227106 3 新睿利优先91天 债券型 91</div><div class="line">产品2 0.228637469027 3 新睿利优先91天 债券型 91</div><div class="line">产品3 0.377176516585 4 新睿利优先91天 债券型 91</div><div class="line">产品4 0.256939429748 3 新睿利优先91天 债券型 91</div><div class="line">产品5 0.758798112353 4 新睿利优先91天 债券型 91</div><div class="line">产品6 0.0578450717465 2 多添利14天 短期理财类 14</div><div class="line">产品7 0.288599403176 3 新睿利优先91天 债券型 91</div><div class="line">产品8 1.38227279375 5 新睿利优先91天 债券型 91</div><div class="line">产品9 0.0835590588465 2 多添利56天 短期理财类 56</div><div class="line">产品10 4.02077615455 5 多添利X36天 短期理财类 36</div><div class="line">***********************************</div><div class="line">bb7a0f6f5d59a3bfcca72a685810c38c2bc8e3a3</div><div class="line">产品1 0.262470046729 3 新睿利优先91天 债券型 91</div><div class="line">产品3 0.451412053647 4 新睿利优先91天 债券型 91</div><div class="line">产品4 0.299002492211 3 新睿利优先91天 债券型 91</div><div class="line">产品6 0.101619720636 3 多添利14天 短期理财类 14</div><div class="line">产品8 1.38227279375 5 新睿利优先91天 债券型 91</div><div class="line">产品9 0.146891520115 3 多添利56天 短期理财类 56</div><div class="line">***********************************</div><div class="line">d96e788472f4d36ae9163192f84635d2b3332ced</div><div class="line">产品1 0.249496242138 3 新睿利优先91天 债券型 91</div><div class="line">产品5 0.758798112353 4 新睿利优先91天 债券型 91</div><div class="line">879002 0.0262265839131 1 多添利7天 短期理财类 7</div><div class="line">产品6 0.0390845079368 2 多添利14天 短期理财类 14</div><div class="line">产品9 0.0828958917128 2 多添利56天 短期理财类 56</div><div class="line">产品10 4.02077615455 5 多添利X36天 短期理财类 36</div><div class="line">***********************************</div><div class="line">f0f5de95640aabbb217a35a7b141b2bae46783aa</div><div class="line">产品5 4.58465819484 5 新睿利优先91天 债券型 91</div><div class="line">产品8 3.31469015941 5 新睿利优先91天 债券型 91</div><div class="line">产品3 0.374926954856 4 新睿利优先91天 债券型 91</div></pre></td></tr></table></figure>
<p>2.平均持仓数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">目标客户</div><div class="line">产品1 1 新睿利优先91天 债券型 91</div><div class="line">产品2 1 新睿利优先91天 债券型 91</div><div class="line">产品3 1 新睿利优先91天 债券型 91</div><div class="line">产品4 1 新睿利优先91天 债券型 91</div><div class="line">产品5 1 新睿利优先91天 债券型 91</div><div class="line">产品6 1 多添利14天 短期理财类 14</div><div class="line">产品7 1 新睿利优先91天 债券型 91</div><div class="line">产品8 1 新睿利优先91天 债券型 91</div><div class="line">产品9 1 多添利56天 短期理财类 56</div><div class="line">产品10 1 多添利X36天 短期理财类 36</div><div class="line">***********************************</div><div class="line">bb7a0f6f5d59a3bfcca72a685810c38c2bc8e3a3</div><div class="line">产品1 1 新睿利优先91天 债券型 91</div><div class="line">产品3 1 新睿利优先91天 债券型 91</div><div class="line">产品4 1 新睿利优先91天 债券型 91</div><div class="line">产品6 1 多添利14天 短期理财类 14</div><div class="line">产品8 1 新睿利优先91天 债券型 91</div><div class="line">产品9 1 多添利56天 短期理财类 56</div><div class="line">***********************************</div><div class="line">7b0fa22fec8c28836d6a52cd35aa818218cd4021</div><div class="line">产品1 1 新睿利优先91天 债券型 91</div><div class="line">产品2 1 新睿利优先91天 债券型 91</div><div class="line">产品7 1 新睿利优先91天 债券型 91</div><div class="line">产品4 1 新睿利优先91天 债券型 91</div><div class="line">产品6 1 多添利14天 短期理财类 14</div><div class="line">***********************************</div><div class="line">21cfa76118cad37e9af116b01ca19230b5def327</div><div class="line">产品1 1 新睿利优先91天 债券型 91</div><div class="line">产品2 1 新睿利优先91天 债券型 91</div><div class="line">产品7 1 新睿利优先91天 债券型 91</div><div class="line">产品4 1 新睿利优先91天 债券型 91</div></pre></td></tr></table></figure>
<p>3.(0,1)归一化</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">目标客户</div><div class="line">产品1 0.00250205597229 新睿利优先91天 债券型 91</div><div class="line">产品2 0.00611680178649 新睿利优先91天 债券型 91</div><div class="line">产品3 0.00628624275145 新睿利优先91天 债券型 91</div><div class="line">产品4 0.00281313461987 新睿利优先91天 债券型 91</div><div class="line">产品5 0.0110457409948 新睿利优先91天 债券型 91</div><div class="line">产品6 9.96838674323e-05 多添利14天 短期理财类 14</div><div class="line">产品7 0.00168125266956 新睿利优先91天 债券型 91</div><div class="line">产品8 0.0126821535272 新睿利优先91天 债券型 91</div><div class="line">产品9 0.000251958300901 多添利56天 短期理财类 56</div><div class="line">产品10 0.00139546358688 多添利X36天 短期理财类 36</div><div class="line">***********************************</div><div class="line">53685bbde6333d222b00c006f27ef581c88a4b1d</div><div class="line">产品1 0.00330949236175 新睿利优先91天 债券型 91</div><div class="line">产品2 0.00606825574057 新睿利优先91天 债券型 91</div><div class="line">产品4 0.00277429449691 新睿利优先91天 债券型 91</div><div class="line">GF1808 0.0049099997054 新睿利优先91天 债券型 91</div><div class="line">产品5 0.0110457409948 新睿利优先91天 债券型 91</div><div class="line">产品8 0.0126821535272 新睿利优先91天 债券型 91</div><div class="line">879004 0.000391751898821 多添利28天 短期理财类 28</div><div class="line">***********************************</div><div class="line">2ff657077263d4833bad7d8c8035c623e336c977</div><div class="line">GF1814 0.00701227648786 新睿利优先91天 债券型 91</div><div class="line">产品2 0.00646876061945 新睿利优先91天 债券型 91</div><div class="line">产品3 0.00624875024995 新睿利优先91天 债券型 91</div><div class="line">产品4 0.00280203744188 新睿利优先91天 债券型 91</div><div class="line">879637 0.0 多添利X97天 短期理财类 97</div><div class="line">GF1812 0.00261713803293 新睿利优先91天 债券型 91</div><div class="line">87905M 0.0 多添利X181天 短期理财类 181</div><div class="line">87913V 0.0 多添利X90天 短期理财类 90</div><div class="line">GF1808 0.00505729969656 新睿利优先91天 债券型 91</div><div class="line">产品5 0.0110457409948 新睿利优先91天 债券型 91</div><div class="line">产品1 0.0025718344257 新睿利优先91天 债券型 91</div><div class="line">产品7 0.00151464204465 新睿利优先91天 债券型 91</div><div class="line">产品8 0.0126821535272 新睿利优先91天 债券型 91</div><div class="line">879580 0.0 多添利X91天 短期理财类 91</div><div class="line">87907S 0.0 多添利X181天 短期理财类 181</div><div class="line">879410 0.0 多添利X90天 短期理财类 90</div><div class="line">***********************************</div><div class="line">ece0720feb0ff36294d63aef73021496db43f7b3</div><div class="line">产品5 0.0111852661442 新睿利优先91天 债券型 91</div><div class="line">879002 4.82520920901e-05 多添利7天 短期理财类 7</div><div class="line">产品8 0.0126821535272 新睿利优先91天 债券型 91</div></pre></td></tr></table></figure>
<p>4.Z-score</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">目标客户</div><div class="line">产品1 -0.319787520279</div><div class="line">产品2 -0.40743813927</div><div class="line">产品3 -0.349684885459</div><div class="line">产品4 -0.359717190383</div><div class="line">产品5 -0.405274114882</div><div class="line">产品6 -0.0725244748709</div><div class="line">产品7 -0.262125545055</div><div class="line">产品8 -0.441496892426</div><div class="line">产品9 -0.133596718487</div><div class="line">产品10 -0.266415990907</div><div class="line">***********************************</div><div class="line">da7ab1c15153fcf193a6fc7d754ae0d3c4d598af</div><div class="line">产品1 -0.218140849102</div><div class="line">产品2 -0.179129356215</div><div class="line">产品4 -0.331388969459</div><div class="line">GF1810 -0.268200096133</div><div class="line">产品5 -0.405274114882</div><div class="line">产品8 -0.441496892426</div><div class="line">***********************************</div><div class="line">bd086050bbaec0d4f07094224c4bf46cf64d057c</div><div class="line">产品1 -0.320230425164</div><div class="line">产品2 -0.40743813927</div><div class="line">87911V -0.247691581664</div><div class="line">产品3 -0.350590828042</div><div class="line">产品4 -0.356399470815</div><div class="line">GF1814 -0.0395975964336</div><div class="line">产品5 -0.404049998232</div><div class="line">GF1874 -0.30671101606</div><div class="line">产品6 -0.0764411040059</div><div class="line">产品7 -0.267856858948</div><div class="line">***********************************</div><div class="line">2681a76a23e95e26c0a84029644bb510547ee7cd</div><div class="line">产品1 -0.320230425164</div><div class="line">产品2 -0.511840648104</div><div class="line">产品7 -0.316486188947</div><div class="line">产品5 -0.488208017918</div><div class="line">879002 -0.0736386038632</div><div class="line">产品4 -0.432451811674</div></pre></td></tr></table></figure>
<h3 id="时间权重："><a href="#时间权重：" class="headerlink" title="时间权重："></a>时间权重：</h3><p>建立一个字典</p>
<p>{</p>
<p>“user1”:</p>
<p>{“87006”：“2017-01-03”</p>
<p>}</p>
<p>}</p>
<p>然后 在计算金额权重的时候，再乘以这个权重。</p>
]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;数据归一化&quot;&gt;&lt;a href=&quot;#数据归
    
    </summary>
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/categories/recommendationsystem/"/>
    
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/tags/recommendationsystem/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统3</title>
    <link href="http://www.pirrla.cn/2017/08/30/rs/rs_3/"/>
    <id>http://www.pirrla.cn/2017/08/30/rs/rs_3/</id>
    <published>2017-08-30T01:12:35.000Z</published>
    <updated>2017-08-30T05:46:23.000Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>

<h3 id="现在使用协同过滤方法"><a href="#现在使用协同过滤方法" class="headerlink" title="现在使用协同过滤方法"></a>现在使用协同过滤方法</h3><p><strong>数据概况</strong></p>
<p>“持有过.csv”</p>
<p>目前只调用了2016年年度数据。</p>
<p>统计用户在该年度中，曾经持仓过哪些产品，用于分析用户投资偏好。</p>
<p>数据约190w条。</p>
<p>每一条数据分别代表一位用户一个产品在该年度的平均持有数量和金额。</p>
<p>通过初步分析，得知，数据共包含125w位用户。</p>
<p><strong>子代码情况</strong></p>
<p>其中约有<font color="red">96w</font>的用户在该年度内只购买过<font color="red">一款产品</font>（不计购买次数）</p>
<font color="red">29w</font>用户购买过两款产品以上。<br><br>平均每位用户购买<strong>1.52</strong>款子产品<br><br><strong>母代码情况</strong><br><br>其中约有<font color="red">121w</font>的用户在该年度内只购买过<font color="red">一款产品</font>（不计购买次数）<br><br>只有<font color="red">4w</font>用户购买过两款产品以上。<br><br>平均每位用户购买<strong>1.03</strong>款母产品<br><br><br><br><strong>初步构建</strong><br><br>为了简化该问题，所以首先只考虑用户曾经持仓的产品，忽略<font color="red"><strong>购买次数、购买金额、购买日期、卖出</strong></font>等数据。建立一个用户-产品的矩阵（如下）。<br><br>| 表格   | 产品1  | 产品2  | 产品3  | 产品4  | 产品5  |<br>| —- | —- | —- | —- | —- | —- |<br>| 用户1  | 0    | 0    | 0    | 0    | 1    |<br>| 用户2  | 0    | 1    | 0    | 1    | 0    |<br>| 用户3  | 0    | 0    | 1    | 1    | 0    |<br>| 用户4  | 0    | 0    | 0    | 0    | 1    |<br>| 用户5  | 0    | 1    | 0    | 1    | 0    |<br><br>1则表示在该年度（目前只统计了2016年年度数据），该用户曾经持仓过该产品。<br><br>0则表示没有。<br><br>通过建立这个矩阵之后，计算不同用户之间的相似度。<br><br><br><br>相似度计算使用<a href="https://en.wikipedia.org/wiki/Jaccard_index" target="_blank" rel="external">Jaccard Similarity</a><br><br>$$similarity=\frac{USER1 \cap USER2}{USER1 \cup USER2}$$<br><br>（问题：是否需要在分子分母上加1）<br><br>即是计算两个用户之间购买了相同产品的数量，再除以两个用户共购买了多少款产品，即得到相似度。<br><br><font color="red">问题：用母代码还是子代码？</font>

<p>但是由于之前描述的数据概况，大部分用户都只购买了一款产品，所以计算相似度时很大概率得到的结果是1和0。（完全相同和完全不相同）</p>
<p><strong>针对只购买了一款产品的用户</strong></p>
<p>所以为了实现协同过滤的效果，我们需要先挑选出<strong>购买过两款产品或以上</strong>的用户出来，然后再根据这些用户与其他用户进行重合，进行推荐。</p>
<p>首先，根据统计一共有125款母代码产品。</p>
<p>制作一份字典，遍历一遍记录，然后对于购买了两款产品以上的用户加入到字典里，索引是购买产品的产品代码。</p>
<p>然后对于每一个只购买了一款产品的用户就可以到这份字典去索引，根据已经购买了的产品代码，可以得到与其相似的用户群，然后根据用户群进行推荐。</p>
<p>这样，计算量可以离线完成，对于大部分的用户（只买过一款产品的），推荐系统的结果可以直接存取，快捷。</p>
<p><strong>对于购买了两款产品或以上的用户</strong></p>
<p>可以直接使用Jaccard Similarity 的计算方法，计算两位用户之间的相似度。</p>
<p>设定一个阈值（threshold），当两位用户相似度超过这个阈值之后（去除相似度1.0的用户，以为完全相同没有推荐的意义），则认定这两位用户为相似用户。然后根据相似用户的其他喜好，进行推荐。</p>
<h3 id="后期完善"><a href="#后期完善" class="headerlink" title="后期完善"></a>后期完善</h3><p><strong>1.使用时间字段</strong></p>
<p>根据购买时间与现在时间的差值，赋予用户一个权重，标识这个用户近期对该产品的偏好程度。</p>
<p>可以参考ES中的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/query-dsl-function-score-query.html#function-decay" target="_blank" rel="external">decay_function</a>。</p>
<p><img src="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/images/decay_2d.png" alt="">根据时间差，套入不同的计算公式中，得出一个权重。</p>
<p><strong>2.购买数量与金额</strong></p>
<p>由于每个客户的购买金额和购买次数是不一样的。在初步构建的当中，我们忽略了购买的金额和次数，均算作1。所以我们现在需要将购买金额和次数考虑进去。</p>
<p>想法是：</p>
<p>$$金额权重=\frac{购买总金额}{该产品的最低购买金额}$$</p>
<p>由于每个产品的规模大小都不一样，所以不能单纯以购买金额去衡量用户与产品之间的关系。所以我们使用到客户购买的总金额除以最低购买门槛金额，得到一个倍数，然后再辅以一个函数，达到实现权重的目的。</p>
<p>其次，由于某一个客户可能会购买一款母代码的多款子产品，所以购买次数也会反应该用户的投资偏好，我们可以再设定一个函数，去控制该权重。</p>
<p><strong>3.结合</strong></p>
<p>根据上述两个字段的影响，每个用户-产品矩阵的内容可以为上述两个字段的权重相加相乘，然后就能计算更加准确的用户相似度。</p>
<p><strong>4.已找出相似用户后的推荐想法</strong></p>
<p>如果已经找出了相似的用户，那么就以这群用户对产品的购买次数进行统计，给出一个排名，然后相应地推荐排名第一的产品和后续产品中，客户尚未购买过的产品。</p>
]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;现在使用协同过滤方法&quot;&gt;&lt;a href=
    
    </summary>
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/categories/recommendationsystem/"/>
    
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/tags/recommendationsystem/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统2</title>
    <link href="http://www.pirrla.cn/2017/08/22/rs/rs_2/"/>
    <id>http://www.pirrla.cn/2017/08/22/rs/rs_2/</id>
    <published>2017-08-21T16:00:00.000Z</published>
    <updated>2017-12-27T08:08:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="想法1"><a href="#想法1" class="headerlink" title="想法1:"></a>想法1:</h3><p>根据用户的属性来进行用户分类器的建立。</p>
<p>从client和client_info两个表查看，可以得出信息。</p>
<p>目前初步选择的属性有：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>解释</th>
<th>如何向量化</th>
</tr>
</thead>
<tbody>
<tr>
<td>client_id</td>
<td>用来区别用户的唯一属性，应为主键</td>
<td>不用</td>
</tr>
<tr>
<td>birthday</td>
<td>生日，用于计算年龄，或者计算星座？</td>
<td>计算年龄，然后根据问卷的划分，划分为四个等级</td>
</tr>
<tr>
<td>address</td>
<td>住址，不同区域的人群有不同的投资观念</td>
<td>根据省份划分？</td>
</tr>
<tr>
<td>mobile</td>
<td>手机号码，可以查询归属地？</td>
<td>归属地</td>
</tr>
<tr>
<td>email</td>
<td>可以查看邮箱的地址属性</td>
<td>email服务商</td>
</tr>
<tr>
<td>degree</td>
<td>学历</td>
<td>学历代码</td>
</tr>
<tr>
<td>profession</td>
<td>职业</td>
<td>职业代码</td>
</tr>
<tr>
<td>income</td>
<td>收入</td>
<td>收入可以去除</td>
</tr>
<tr>
<td>marriage</td>
<td>婚否</td>
<td>1、0</td>
</tr>
<tr>
<td>risk_level</td>
<td>风险偏好</td>
<td>不需要</td>
</tr>
<tr>
<td>gender</td>
<td>性别</td>
<td>1、0</td>
</tr>
<tr>
<td>id_type</td>
<td>证件类型</td>
<td></td>
</tr>
<tr>
<td>id_no</td>
<td>证件号码</td>
<td></td>
</tr>
<tr>
<td>open_date</td>
<td>开户日期</td>
<td>计算开户总时长</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>可能有用的字段，尚未加入</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>id_address</td>
<td>身份证地址</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>用户之间的相似度：</p>
<p>将所有的属性向量化（normalize），然后用cos计算两个向量之间的距离，距离小于一定的阈值则确定为相似。</p>
<p>然后推荐系统推荐相似用户中，最喜爱的产品。</p>
<h3 id="想法2"><a href="#想法2" class="headerlink" title="想法2:"></a>想法2:</h3><p>于想法一同样，计算产品之间的相似度，但是由于产品的数量不多，所以是否可以直接人工分类？这样更加准确？</p>
<h3 id="想法3："><a href="#想法3：" class="headerlink" title="想法3："></a>想法3：</h3><p>建立一个三层的简单的全连接神经网络，然后根据购买记录，将购买记录作为训练集。</p>
<p>用户的各种信息作为向量输入，然后输出则是一个产品数量维度的向量，购买了产品为1，其他为0。</p>
<p>然后根据这个分类器就可以softmax去得出最后输出是什么。</p>
<h3 id="想法4："><a href="#想法4：" class="headerlink" title="想法4："></a>想法4：</h3><p>根据购买记录，建立一个用户-产品的Matrix，单元格是购买产品的数，根据Factorization、SVD、NMF等算法，补全矩阵。</p>
<h3 id="想法5："><a href="#想法5：" class="headerlink" title="想法5："></a>想法5：</h3><p>将用户或产品，分为大几类，然后将用户或产品进行归类，然后推荐相同类别用户购买的产品或相同类别的产品</p>
<h3 id="想法6："><a href="#想法6：" class="headerlink" title="想法6："></a>想法6：</h3><p>根据用户的开户日期和产品的购买日期，去得出新用户最喜欢的产品</p>
<p>init_date or business_date or valid_date?</p>
<p>问题：由于用户数据太多，是否需要采样？</p>
<p>问题：risk_level是否是硬性规定</p>
<p>问题：推荐系统的目标是？推荐用户最喜爱的产品，最有可能购买的产品？还是将冷门的产品推销出去？</p>
<p>问题：用户的购买记录是以购买金额来分类还是简单以1，0划分</p>
<p>问题：是否有用户投诉、退款的数据</p>
<p>问题：是否有用户网站点击，停留时间的数据？</p>
<p>问题：解析身份证是否合法？</p>
<h3 id="客户简单维度分析："><a href="#客户简单维度分析：" class="headerlink" title="客户简单维度分析："></a>客户简单维度分析：</h3><p>男性用户最喜爱的产品：</p>
<p>女性用户最喜爱的产品：</p>
<p>问题：是否需要区分不同风险用户的喜好?</p>
<p>年龄段最喜欢产品</p>
<p>决策树参数：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>性别</td>
<td>男、女</td>
</tr>
<tr>
<td>年龄</td>
<td>18-22，22-35，35-60，60+</td>
</tr>
<tr>
<td>星座</td>
<td>12星座</td>
</tr>
</tbody>
</table>
<p>876017无法分类</p>
<p>计算产品相似度：</p>
<p>涉及字段：</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>excel</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>产品编号</td>
<td>4</td>
<td></td>
</tr>
<tr>
<td>产品名称</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>产品创建日期</td>
<td>7</td>
<td></td>
</tr>
<tr>
<td>投资经理</td>
<td>10</td>
<td></td>
</tr>
<tr>
<td>托管银行</td>
<td>12</td>
<td></td>
</tr>
<tr>
<td>存续期</td>
<td>18</td>
<td></td>
</tr>
<tr>
<td>产品成立日期</td>
<td>19</td>
<td></td>
</tr>
<tr>
<td>成立规模</td>
<td>20</td>
<td></td>
</tr>
<tr>
<td>产品类型</td>
<td>21</td>
<td></td>
</tr>
<tr>
<td>产品风险等级</td>
<td>22</td>
<td></td>
</tr>
<tr>
<td>产品集合类型</td>
<td>32</td>
<td></td>
</tr>
<tr>
<td>最小投资额</td>
<td>34</td>
<td></td>
</tr>
<tr>
<td>获利类型</td>
<td>35</td>
<td></td>
</tr>
<tr>
<td>产品类型</td>
<td>38</td>
<td></td>
</tr>
<tr>
<td>天数</td>
<td>40</td>
<td></td>
</tr>
<tr>
<td>代理机构</td>
<td>41</td>
<td></td>
</tr>
<tr>
<td>产品模型</td>
<td>43</td>
<td></td>
</tr>
<tr>
<td>利率</td>
<td>44</td>
<td></td>
</tr>
<tr>
<td>阈值</td>
<td>45</td>
<td></td>
</tr>
<tr>
<td>单客户购买上限</td>
<td>46</td>
<td></td>
</tr>
<tr>
<td>开放日期</td>
<td>49</td>
<td></td>
</tr>
<tr>
<td>到期日期</td>
<td>50</td>
<td></td>
</tr>
<tr>
<td>总额</td>
<td>51</td>
<td></td>
</tr>
<tr>
<td>广发直销规模</td>
<td>52</td>
<td></td>
</tr>
<tr>
<td>投资经理名称</td>
<td>56</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;想法1&quot;&gt;&lt;a href=&quot;#想法1&quot; class=&quot;headerlink&quot; title=&quot;想法1:&quot;&gt;&lt;/a&gt;想法1:&lt;/h3&gt;&lt;p&gt;根据用户的属性来进行用户分类器的建立。&lt;/p&gt;
&lt;p&gt;从client和client_info两个表查看，可以得出信息。&lt;/p&gt;

    
    </summary>
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/categories/recommendationsystem/"/>
    
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/tags/recommendationsystem/"/>
    
  </entry>
  
  <entry>
    <title>推荐系统1</title>
    <link href="http://www.pirrla.cn/2017/08/21/rs/rs_1/"/>
    <id>http://www.pirrla.cn/2017/08/21/rs/rs_1/</id>
    <published>2017-08-20T16:00:00.000Z</published>
    <updated>2017-12-27T08:09:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目前大部分舆论："><a href="#目前大部分舆论：" class="headerlink" title="目前大部分舆论："></a>目前大部分舆论：</h3><p>目前，大多数的资料（知乎等）显示，工业界和学术界的鸿沟还是比较大的，工业界通常使用</p>
<p><strong>精细的特征工程+简单可行的模型+各种Trick+CF协同过滤</strong></p>
<p>即可以实现比较好的效果。</p>
<p>其中，大部分人认为其中重要性是：</p>
<p><strong>用户交互界面UI &gt; 数据 &gt; 算法</strong></p>
<font color="red">所以我们是否需要进行UI的调研？（淘宝、其他公司的同类产品等?）</font>

<font color="red">其次，我们的推荐页面是已什么形式展现给客户？</font>

<p>是直接在目前的基础上，进行排序展示？（推荐的产品在最前面）</p>
<p>现有的第三方库：<strong>Java-mahout, Python-Crab</strong></p>
<p>特征工程分为：静态特征、行为特征、Item特征、上下文特征</p>
<p>特镇工程操作有：转换、切分、叠加、离散化、组合</p>
<p>大数据不一定有效，提高维度则有一定的帮助，数据量太大可以随机从原始数据中采样。</p>
<h3 id="USER表"><a href="#USER表" class="headerlink" title="USER表"></a>USER表</h3><p>对于USER，我们设计了一个表去存储用户的信息。</p>
<p>信息来源暂定是用户自己填写的信息、问卷调查获得的风险偏好和从身份证号所获取的信息（出生地、年龄、性别等）。</p>
<p>开户日期指的是用户已经在网站注册的时长。</p>
<font color="red">金额方面，暂时还需要解决，是什么金额？</font>

<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>userid</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>金额</td>
<td>NUMBER</td>
</tr>
<tr>
<td>风险偏好</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>已购产品</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>年龄</td>
<td>NUMBER</td>
</tr>
<tr>
<td>性别</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>职业</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>电话</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>出生地</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>邮箱</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>开户日期</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
</tbody>
</table>
<h3 id="ITEM表"><a href="#ITEM表" class="headerlink" title="ITEM表"></a>ITEM表</h3><p>对于ITEM，我们同样将它存储在数据库中。</p>
<p>这个数据来源我们可以从自身获取。</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>itemid</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>风险</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
<tr>
<td>起购额</td>
<td>NUMBER</td>
</tr>
<tr>
<td>产品类型</td>
<td>VARCHAR2(20 BYTE)</td>
</tr>
</tbody>
</table>
<p>两个表中，有<strong>关联的是风险和风险偏好，起购额和金额</strong>。因为这两个字段的数值是硬性要求，起到了一个Filter的作用。</p>
<h3 id="可能添加的字段（增加维度，提高准度）"><a href="#可能添加的字段（增加维度，提高准度）" class="headerlink" title="可能添加的字段（增加维度，提高准度）"></a>可能添加的字段（增加维度，提高准度）</h3><table>
<thead>
<tr>
<th>字段</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>用户行为-退款行为</td>
<td>用户是否发生退款行为，退款产品为</td>
</tr>
<tr>
<td>用户行为-投诉行为</td>
<td>用户是否对某款产品进行过投诉</td>
</tr>
<tr>
<td>用户-是否有亲戚好友购买过相关产品</td>
<td>对于熟人推荐的会比较信任（但是亲戚好友的信息比较难获取，推荐码？）</td>
</tr>
<tr>
<td>产品-描述</td>
<td>对描述进行NLP，得出一个向量</td>
</tr>
<tr>
<td>产品-投资经理</td>
<td>对于不同的投资经理，会有不同的喜好（例如已经购买的产品的同一位投资经理，但是要确定是否前一款产品是否亏损）</td>
</tr>
<tr>
<td>产品-目前盈亏</td>
<td>目前产品的盈亏情况，是否会推荐亏损的产品给客户</td>
</tr>
<tr>
<td>产品-行业归属</td>
<td>投资详情</td>
</tr>
<tr>
<td>产品-开始销售日期</td>
<td>长期稳定的产品会让客户偏喜爱</td>
</tr>
<tr>
<td>网页动作</td>
<td>是否能捕捉到用户的网页动作？（例如在某一个产品页面逗留很久，多次点击同一款产品的详情）</td>
</tr>
</tbody>
</table>
<h3 id="相关论文"><a href="#相关论文" class="headerlink" title="相关论文"></a>相关论文</h3><p><a href="http://www.cin.ufpe.br/~idal/rs/Amazon-Recommendations.pdf" target="_blank" rel="external">Amazon CF</a></p>
<p>基础的推荐算法有：</p>
<p><strong>1.传统的协同过滤</strong></p>
<p>其中，分为寻找相似的用户和相似的产品。</p>
<p>计算相似度的基本都是使用向量之间的cos距离</p>
<p>推荐相似用户购买的产品或者推荐相似产品的产品</p>
<p><strong>2.Cluster Models</strong></p>
<p>将用户分类成几个类，然后对新来的用户同样进行分类，然后推荐同一个分类用户的购买的产品信息</p>
<p>其中分类的算法可以有：KNN, LogisticRegression, NeuralNetwork, DecesionTree, K-Means</p>
<p><strong>3.Search-Based Methods</strong></p>
<p>将item进行细分，划分出目录、类别、作者等信息，然后推荐相关目录、相关作者的其他作品等。</p>
<p><strong>4.亚马逊Item-to-item 协同过滤</strong></p>
<p>基于庞大的用户数量和商品数量，一个一个算相似度计算量非常庞大，同时不能满足业务要求的0.5秒内给用户推荐信息的要求，所以亚马逊按照传统的协同过滤进行优化，只计算购买过某一产品的用户们的购买记录中商品的相似度，然后推荐相似度最高的产品。</p>
<p><a href="https://datajobs.com/data-science-repo/Recommender-Systems-%5BNetflix%5D.pdf" target="_blank" rel="external">matrix factorization</a></p>
<p>Neighborhodd methods - 计算产品与产品之间，用户与用户之间的关系，例如某一个用户喜欢3部电影，则选择出一组用户也同时喜欢这三部作品，然后推荐这组用户最喜爱的电影作为推荐系统推荐</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/1.png" alt=""></p>
<p>Lantent factore models - 将用户或产品的属性进行建模，数值化，然后根据用户的偏好和产品的属性的数值，去作推荐</p>
<p><img src="http://ondsf10qe.bkt.clouddn.com/2.png" alt=""></p>
<p><a href="http://cs.rochester.edu/twiki/pub/Main/HarpSeminar/Factorization_Meets_the_Neighborhood-_a_Multifaceted_Collaborative_Filtering_Model.pdf" target="_blank" rel="external">Factorization Meets the Neighborhood: a Multifaceted Collaborative Filtering Model</a></p>
<p>定义相似度：</p>
<p>用户：</p>
<h3 id="想法："><a href="#想法：" class="headerlink" title="想法："></a>想法：</h3><h3 id="1-直接将已购产品当做Training-data"><a href="#1-直接将已购产品当做Training-data" class="headerlink" title="1.直接将已购产品当做Training data"></a>1.直接将已购产品当做Training data</h3><p>是否可以直接将客户已经购买的产品记录当做training data放进神经网络</p>
<p>然后把产品当成ont-hot型的向量输出（或者把金额当成输出）</p>
<h3 id="2-将用户分类"><a href="#2-将用户分类" class="headerlink" title="2.将用户分类"></a>2.将用户分类</h3><p>将用户分成某几类用户，然后进来一个用户则根据模型，将该用户分配到不同的组里面。</p>
<p>然后推荐系统将推荐组内用户最常购买的产品。</p>
<h3 id="3-将产品分类"><a href="#3-将产品分类" class="headerlink" title="3.将产品分类"></a>3.将产品分类</h3><p>由于产品比较少，所以是否直接人工分类？</p>
<p>或者根据投资经理（用户是否有投资经理偏好）进行分类？</p>
<h3 id="目前难题："><a href="#目前难题：" class="headerlink" title="目前难题："></a>目前难题：</h3><p>1.冷启动？（完全新用户进入，没有任何数据，是否能找出新用户最多购买的产品）（例如注册时间小于30天的用户，购买最多的产品是？）</p>
<p>2.推荐系统的目标是？推荐用户最喜爱的产品，最有可能购买的产品？还是将冷门的产品推销出去？</p>
<p>3.是否要将客户引导到高风险的产品上去？</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目前大部分舆论：&quot;&gt;&lt;a href=&quot;#目前大部分舆论：&quot; class=&quot;headerlink&quot; title=&quot;目前大部分舆论：&quot;&gt;&lt;/a&gt;目前大部分舆论：&lt;/h3&gt;&lt;p&gt;目前，大多数的资料（知乎等）显示，工业界和学术界的鸿沟还是比较大的，工业界通常使用&lt;/p&gt;

    
    </summary>
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/categories/recommendationsystem/"/>
    
    
      <category term="recommendationsystem" scheme="http://www.pirrla.cn/tags/recommendationsystem/"/>
    
  </entry>
  
  <entry>
    <title>MacOS安装Oracle客户端Client</title>
    <link href="http://www.pirrla.cn/2017/08/10/other/mac_oracle/"/>
    <id>http://www.pirrla.cn/2017/08/10/other/mac_oracle/</id>
    <published>2017-08-10T02:56:39.000Z</published>
    <updated>2017-08-10T03:02:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装客户端只需要简单的几步！！！"><a href="#安装客户端只需要简单的几步！！！" class="headerlink" title="安装客户端只需要简单的几步！！！"></a>安装客户端只需要简单的几步！！！</h1><h1 id="如果你按照官网的方法会一直都失败！！！！"><a href="#如果你按照官网的方法会一直都失败！！！！" class="headerlink" title="如果你按照官网的方法会一直都失败！！！！"></a>如果你按照<a href="https://oracle.github.io/odpi/doc/installation.html#macos" target="_blank" rel="external">官网的方法</a>会一直都失败！！！！</h1><h1 id="首先是安装anaconda（安装第三方库lxml等难安装的库巨有用）"><a href="#首先是安装anaconda（安装第三方库lxml等难安装的库巨有用）" class="headerlink" title="首先是安装anaconda（安装第三方库lxml等难安装的库巨有用）"></a>首先是安装anaconda（安装第三方库lxml等难安装的库巨有用）</h1><h1 id="然后在anaconda中安装cx-oracle第三方库"><a href="#然后在anaconda中安装cx-oracle第三方库" class="headerlink" title="然后在anaconda中安装cx_oracle第三方库"></a>然后在anaconda中安装cx_oracle第三方库</h1><h1 id="然后再官网下载两个相对应的包（位数与python相对应）"><a href="#然后再官网下载两个相对应的包（位数与python相对应）" class="headerlink" title="然后再官网下载两个相对应的包（位数与python相对应）"></a>然后再<a href="http://www.oracle.com/technetwork/topics/intel-macsoft-096467.html" target="_blank" rel="external">官网</a>下载两个相对应的包（位数与python相对应）</h1><h1 id="instantclient-basic-和-instantclient-sqlplus"><a href="#instantclient-basic-和-instantclient-sqlplus" class="headerlink" title="instantclient-basic 和 instantclient-sqlplus"></a>instantclient-basic 和 instantclient-sqlplus</h1><h1 id="然后只需要把两个包的东西解压出来，全部文件放到"><a href="#然后只需要把两个包的东西解压出来，全部文件放到" class="headerlink" title="然后只需要把两个包的东西解压出来，全部文件放到"></a>然后只需要把两个包的东西解压出来，全部文件放到</h1><h1 id="lib-目录里面即可！！！！！"><a href="#lib-目录里面即可！！！！！" class="headerlink" title="~/lib/目录里面即可！！！！！"></a><font color="red">~/lib/</font>目录里面即可！！！！！</h1><p>~就是当前用户名的文件夹</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装客户端只需要简单的几步！！！&quot;&gt;&lt;a href=&quot;#安装客户端只需要简单的几步！！！&quot; class=&quot;headerlink&quot; title=&quot;安装客户端只需要简单的几步！！！&quot;&gt;&lt;/a&gt;安装客户端只需要简单的几步！！！&lt;/h1&gt;&lt;h1 id=&quot;如果你按照官网的方
    
    </summary>
    
      <category term="oracle" scheme="http://www.pirrla.cn/categories/oracle/"/>
    
    
      <category term="oracle" scheme="http://www.pirrla.cn/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>ES搜索笔记</title>
    <link href="http://www.pirrla.cn/2017/08/04/es/es_query/"/>
    <id>http://www.pirrla.cn/2017/08/04/es/es_query/</id>
    <published>2017-08-04T02:08:20.000Z</published>
    <updated>2017-08-09T08:49:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先，了解<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html" target="_blank" rel="external">QUERY结构体</a>的写法：</p>
<h3 id="1-最基础的是“Query”字段"><a href="#1-最基础的是“Query”字段" class="headerlink" title="1.最基础的是“Query”字段"></a>1.最基础的是<strong>“Query”字段</strong></h3><p>它包含最基础的搜索内容和其他设置。(后面再具体介绍内容写法)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//最简单的结构体</div><div class="line">GET /_search</div><div class="line">&#123;</div><div class="line">    "query" : &#123;</div><div class="line">        "term" : &#123; "user" : "kimchy" &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-from-和-size-字段"><a href="#2-from-和-size-字段" class="headerlink" title="2.from 和 size 字段"></a>2.<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-from-size.html" target="_blank" rel="external"><strong>from 和 size 字段</strong></a></h5><p>控制显示搜索结果的数量和页数</p>
<h5 id="3-sort-字段"><a href="#3-sort-字段" class="headerlink" title="3.sort 字段"></a>3.<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-sort.html" target="_blank" rel="external"><strong>sort 字段</strong></a></h5><p>例子如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">GET /my_index/my_type/_search</div><div class="line">&#123;</div><div class="line">    "sort" : [</div><div class="line">        &#123; "post_date" : &#123;"order" : "asc"&#125;&#125;,</div><div class="line">        "user",</div><div class="line">        &#123; "name" : "desc" &#125;,</div><div class="line">        &#123; "age" : "desc" &#125;,</div><div class="line">        "_score"</div><div class="line">    ],</div><div class="line">    "query" : &#123;</div><div class="line">        "term" : &#123; "user" : "kimchy" &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过一个列表，控制排列顺序，如果遇到相同的则比较下一项。</p>
<h5 id="4-source"><a href="#4-source" class="headerlink" title="4._source "></a>4.<strong>_source </strong></h5><p>由于es的索引不是所有字段我们都需要，所以需要进行字段筛选，同时由于使用了highlight功能，所以我们可能只需要将hightlight字段筛选出来即可。（可使用正则表达式匹配字段名）</p>
<h5 id="5-script-fields"><a href="#5-script-fields" class="headerlink" title="5.script_fields"></a>5.<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-script-fields.html" target="_blank" rel="external"><strong>script_fields</strong></a></h5><p>用于编写函数，并返回到搜索结果中</p>
<h5 id="6-highlight"><a href="#6-highlight" class="headerlink" title="6.highlight"></a>6.<strong>highlight</strong></h5><p>用于高亮显示某些搜索结果，例子如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">GET /_search</div><div class="line">&#123;</div><div class="line">    "query" : &#123;</div><div class="line">        "match": &#123; "user": "kimchy" &#125;</div><div class="line">    &#125;,</div><div class="line">    "highlight" : &#123;</div><div class="line">        "pre_tags" : ["&lt;tag1&gt;"],</div><div class="line">        "post_tags" : ["&lt;/tag1&gt;"],</div><div class="line">        "fields" : &#123;</div><div class="line">            "_all" : &#123;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="7-rescore"><a href="#7-rescore" class="headerlink" title="7.rescore"></a>7.<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-rescore.html" target="_blank" rel="external">rescore</a></h5><p>用于在返回的搜索结果中再次进行得分计算，并重新计算得分，可用于在搜索相关性后，在根据资讯的日期进行二次排序</p>
<h5 id="8-search-type"><a href="#8-search-type" class="headerlink" title="8.search type"></a>8.search type</h5><p>用于决定是全局搜索并计算得分，还是在各自的分片上进行分布式得分计算和搜索</p>
<h5 id="9-scroll"><a href="#9-scroll" class="headerlink" title="9.scroll"></a>9.<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html" target="_blank" rel="external">scroll</a></h5><p>设定搜索结果的存活时间，避免重复搜索浪费资源，只用于在可以滑动搜索窗口的客户端中，如Python</p>
<h5 id="10-preference"><a href="#10-preference" class="headerlink" title="10.preference"></a>10.preference</h5><p>分片喜好</p>
<h5 id="11-version"><a href="#11-version" class="headerlink" title="11.version"></a>11.version</h5><p>返回每一个hit的版本号</p>
<h5 id="12-min-score"><a href="#12-min-score" class="headerlink" title="12.min_score"></a>12.min_score</h5><p>只有超过某个数值的_score才会返回在搜索结果中</p>
<h5 id="13-collapse"><a href="#13-collapse" class="headerlink" title="13.collapse"></a>13.collapse</h5><p>selecting only the top sorted document per collapse key</p>
<p>用于收集某一个关键词的最高分的文档，例如检索每个用户最多like的tweet（必须包含sort）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">GET /twitter/tweet/_search</div><div class="line">&#123;</div><div class="line">    "query": &#123;</div><div class="line">        "match": &#123;</div><div class="line">            "message": "elasticsearch"</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    "collapse" : &#123;</div><div class="line">        "field" : "user" </div><div class="line">    &#125;,</div><div class="line">    "sort": ["likes"], </div><div class="line">    "from": 10 </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="14-search-after"><a href="#14-search-after" class="headerlink" title="14.search_after"></a>14.search_after</h5><p>也用于翻页，将本页的最后一个搜索结果填入参数则进入下一页（from必须是0）</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>是否需要</th>
</tr>
</thead>
<tbody>
<tr>
<td>query</td>
<td>必须，基础字段（后表续query字段具体写法）</td>
</tr>
<tr>
<td>from/size</td>
<td>需要，用于管理用户的搜索页的页码</td>
</tr>
<tr>
<td>sort</td>
<td>不需要，用于控制排列顺序，首先是比对_score字段，如果相同则比较date，日期较新的排列较前（但是由于我们是match搜索，非term搜索，所以出现_score相同的情况较少，不能使用此字段）</td>
</tr>
<tr>
<td>_source</td>
<td>需要，进行字段筛选</td>
</tr>
<tr>
<td>script_fields</td>
<td>不需要，暂时不需要编写函数</td>
</tr>
<tr>
<td>highlight</td>
<td>需要，进行搜索字段标红</td>
</tr>
<tr>
<td>rescore</td>
<td>可能需要</td>
</tr>
<tr>
<td>search_type</td>
<td>需要</td>
</tr>
<tr>
<td>scroll</td>
<td>可能需要</td>
</tr>
<tr>
<td>preference</td>
<td>不需要</td>
</tr>
<tr>
<td>version</td>
<td>可能需要</td>
</tr>
<tr>
<td>min_score</td>
<td>不需要</td>
</tr>
<tr>
<td>collapse</td>
<td>可能需要</td>
</tr>
<tr>
<td>search_after</td>
<td>可能需要</td>
</tr>
</tbody>
</table>
<h3 id="Query字段内部的编写方式"><a href="#Query字段内部的编写方式" class="headerlink" title="Query字段内部的编写方式"></a>Query字段内部的编写方式</h3><p>叶语句：</p>
<p>几乎语句都能写成match的形式，所以使用<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query.html" target="_blank" rel="external">match</a></p>
<table>
<thead>
<tr>
<th>match方法</th>
<th>是否采用</th>
</tr>
</thead>
<tbody>
<tr>
<td>match</td>
<td></td>
</tr>
<tr>
<td>match_phrase</td>
<td></td>
</tr>
<tr>
<td>multi_match</td>
<td></td>
</tr>
<tr>
<td>query_string</td>
<td></td>
</tr>
<tr>
<td>simple_query_string</td>
</tr>
</tbody>
</table>
<p>聚合语句：</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html" target="_blank" rel="external">bool</a></p>
<p>匹配到越多，越高分，不同的match之间得分相加</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-dis-max-query.html" target="_blank" rel="external">dis_max</a></p>
<p>是disjunctionmax 各自的match执行，然后最高分的为最终得分，通过设置tie_breaker来调参</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html" target="_blank" rel="external">function score</a></p>
<p>参考<a href="http://pirrla.cn/2017/07/12/es_similarity/" target="_blank" rel="external">前文</a>，运用了离当前时间越近，则score更高的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/5.5/query-dsl-function-score-query.html#function-decay" target="_blank" rel="external">衰减函数</a></p>
<p>我认为的搜索语句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">GET /windxw/_search?search_type=dfs_query_then_fetch&amp;explain</div><div class="line">&#123;</div><div class="line">  "from": 0,</div><div class="line">  "size": 20,</div><div class="line">  "_source": ["title","content"], </div><div class="line">  "highlight": &#123;</div><div class="line">    "pre_tags": ["&lt;font color=\"red\"&gt;"],</div><div class="line">    "post_tags": ["&lt;/font&gt;"],</div><div class="line">    "fields": &#123;</div><div class="line">      "content": &#123;&#125;,</div><div class="line">      "title": &#123;&#125;</div><div class="line">    &#125;</div><div class="line">  &#125;, </div><div class="line">  "query": &#123;</div><div class="line">    "function_score": &#123;</div><div class="line">      "query": &#123;</div><div class="line">        "bool": &#123;</div><div class="line">      "should": [</div><div class="line">        &#123;"match": &#123;</div><div class="line">          "title": &#123;</div><div class="line">            "query": "uber",</div><div class="line">            "boost":2,</div><div class="line">            "operator": "and"</div><div class="line">          &#125;</div><div class="line">        &#125;&#125;,</div><div class="line">        &#123;"match": &#123;</div><div class="line">          "content": &#123;</div><div class="line">            "query": "uber",</div><div class="line">            "boost":1,</div><div class="line">            "operator": "and"</div><div class="line">          &#125;</div><div class="line">        &#125;&#125;,</div><div class="line">        &#123;"match": &#123;</div><div class="line">          "keywords": &#123;</div><div class="line">            "query": "uber",</div><div class="line">            "boost":2,</div><div class="line">            "operator": "and"</div><div class="line">          &#125;</div><div class="line">        &#125;&#125;</div><div class="line">      ],</div><div class="line">      "minimum_should_match": 1 </div><div class="line">    &#125;</div><div class="line">      &#125;,</div><div class="line">       "functions": [ </div><div class="line">            &#123;</div><div class="line">                    "exp": &#123;</div><div class="line">                        "publishdate" : &#123;</div><div class="line">                            "origin": "now",</div><div class="line">                            "offset": "1h",</div><div class="line">                            "scale" : "30d",</div><div class="line">                            "decay": 0.2</div><div class="line">                        &#125;</div><div class="line">                    &#125;,</div><div class="line">                    "weight": 200</div><div class="line">                &#125;</div><div class="line">        ],</div><div class="line">        "boost_mode": "sum"</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我认为目前需要解决的问题：</p>
<p>1.如何实现翻页（from/size，scroll，search_after）</p>
<p>2.权衡时间与搜索匹配度的权重（通过调整boost和weight）</p>
<p>3.是否需要用rescore参数来进行二次排序（根据时间排序）</p>
<p>4.search_type是使用全局搜索还是分片搜索</p>
<p>5.三个字段（title,content,keyword）之间的权重</p>
<p>6.三个字段的match得分是使用bool相加还是dis_max取最大值</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，了解&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;QU
    
    </summary>
    
      <category term="elasticsearch" scheme="http://www.pirrla.cn/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://www.pirrla.cn/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>ES输入设置</title>
    <link href="http://www.pirrla.cn/2017/08/03/es/es_input/"/>
    <id>http://www.pirrla.cn/2017/08/03/es/es_input/</id>
    <published>2017-08-03T02:31:08.000Z</published>
    <updated>2017-08-07T08:58:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h1><h3 id="1-安装PDFMiner"><a href="#1-安装PDFMiner" class="headerlink" title="1.安装PDFMiner"></a>1.安装PDFMiner</h3><p>从<a href="http://www.unixuser.org/~euske/python/pdfminer/" target="_blank" rel="external">官网</a>上下载源安装包。</p>
<p>通过命令行，运行安装安装包。(注意需要到解压后安装包的根目录)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ python setup.py install</div></pre></td></tr></table></figure>
<p>测试是否安装成功，可以紧接着运行以下的代码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pdf2txt.py samples/simple1.pdf</div></pre></td></tr></table></figure>
<p>如果能读取PDF内容则安装成功。</p>
<p>如果是中文、韩文、日文等特殊文字PDF，则需要额外安装特殊文字补充包。</p>
<p>紧接着上述的安装程序，也是在根目录下运行以下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ make cmap</div><div class="line">...</div><div class="line">$ python setup.py install</div></pre></td></tr></table></figure>
<p>运行完这两行之后，则可以正常运行PDFMiner了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment">#-*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> pdfminer.converter <span class="keyword">import</span> PDFPageAggregator</div><div class="line"><span class="keyword">from</span> pdfminer.pdfparser <span class="keyword">import</span> PDFParser</div><div class="line"><span class="keyword">from</span> pdfminer.pdfdocument <span class="keyword">import</span> PDFDocument</div><div class="line"><span class="keyword">from</span> pdfminer.pdfpage <span class="keyword">import</span> PDFPage</div><div class="line"><span class="keyword">from</span> pdfminer.pdfpage <span class="keyword">import</span> PDFTextExtractionNotAllowed</div><div class="line"><span class="keyword">from</span> pdfminer.pdfinterp <span class="keyword">import</span> PDFResourceManager</div><div class="line"><span class="keyword">from</span> pdfminer.pdfinterp <span class="keyword">import</span> PDFPageInterpreter</div><div class="line"><span class="keyword">from</span> pdfminer.layout <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line"><span class="comment">#打开一个pdf文件</span></div><div class="line">fp = open(<span class="string">u'F:\\pdf\\2013\\000001_平安银行_2013年年度报告_2562.pdf'</span>, <span class="string">'rb'</span>)</div><div class="line"><span class="comment">#创建一个PDF文档解析器对象</span></div><div class="line">parser = PDFParser(fp)</div><div class="line"><span class="comment">#创建一个PDF文档对象存储文档结构</span></div><div class="line"><span class="comment">#提供密码初始化，没有就不用传该参数</span></div><div class="line"><span class="comment">#document = PDFDocument(parser, password)</span></div><div class="line">document = PDFDocument(parser)</div><div class="line"><span class="comment">#检查文件是否允许文本提取</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> document.is_extractable:</div><div class="line">    <span class="keyword">raise</span> PDFTextExtractionNotAllowed</div><div class="line"><span class="comment">#创建一个PDF资源管理器对象来存储共享资源</span></div><div class="line"><span class="comment">#caching = False不缓存</span></div><div class="line">rsrcmgr = PDFResourceManager(caching = <span class="keyword">False</span>)</div><div class="line"><span class="comment"># 创建一个PDF设备对象</span></div><div class="line">laparams = LAParams()</div><div class="line"><span class="comment"># 创建一个PDF页面聚合对象</span></div><div class="line">device = PDFPageAggregator(rsrcmgr, laparams=laparams)</div><div class="line"><span class="comment">#创建一个PDF解析器对象</span></div><div class="line">interpreter = PDFPageInterpreter(rsrcmgr, device)</div><div class="line"><span class="comment">#处理文档当中的每个页面</span></div><div class="line"></div><div class="line"><span class="comment"># doc.get_pages() 获取page列表</span></div><div class="line"><span class="comment">#for i, page in enumerate(document.get_pages()):</span></div><div class="line"><span class="comment">#PDFPage.create_pages(document) 获取page列表的另一种方式</span></div><div class="line">replace=re.compile(<span class="string">r'\s+'</span>);</div><div class="line"><span class="comment"># 循环遍历列表，每次处理一个page的内容</span></div><div class="line"><span class="keyword">for</span> page <span class="keyword">in</span> PDFPage.create_pages(document):</div><div class="line">    interpreter.process_page(page)</div><div class="line">    <span class="comment"># 接受该页面的LTPage对象</span></div><div class="line">    layout=device.get_result()</div><div class="line">    <span class="comment"># 这里layout是一个LTPage对象 里面存放着 这个page解析出的各种对象</span></div><div class="line">    <span class="comment"># 一般包括LTTextBox, LTFigure, LTImage, LTTextBoxHorizontal 等等</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> layout:</div><div class="line">        <span class="comment">#如果x是水平文本对象的话</span></div><div class="line">        <span class="keyword">if</span>(isinstance(x,LTTextBoxHorizontal)):</div><div class="line">            text=re.sub(replace,<span class="string">''</span>,x.get_text())</div><div class="line">            <span class="keyword">if</span> len(text)!=<span class="number">0</span>:</div><div class="line">                <span class="keyword">print</span> text</div></pre></td></tr></table></figure>
<p>可是如果内容物是中文的话，解析出来的结果是cid编码（adobe公司特有编码）</p>
<p>同时需要解析出文档的目录：</p>
<p>使用document.get_outlines()获取并另存为</p>
<h1 id="DOC-amp-DOCX"><a href="#DOC-amp-DOCX" class="headerlink" title="DOC&amp;DOCX"></a>DOC&amp;DOCX</h1><p>pip install python-docx</p>
<p>安装第三方库<a href="https://python-docx.readthedocs.io/" target="_blank" rel="external">python-docx</a></p>
<p>直接使用可以读取.docx文件</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</div><div class="line">doc = Document(<span class="string">r'/Users/alan/Downloads/123.docx'</span>)</div><div class="line">para = doc.paragraphs</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> para:</div><div class="line">    <span class="keyword">print</span> i.text</div></pre></td></tr></table></figure>
<p>.doc（word2003之前版本）的处理方法则比较复杂</p>
<p>Linux用户可以下载<a href="http://www.winfield.demon.nl/#Programmer" target="_blank" rel="external">antiword</a>第三方包进行直接读取。（未验证）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">安装antiword官方站：http://www.winfield.demon.nl/</div><div class="line">下载地：http://www.winfield.demon.nl/linux/antiword-0.37.tar.gz</div><div class="line">下载完，解压，进入目录使用命令 </div><div class="line">make &amp;&amp; make install</div><div class="line"></div><div class="line">#!/usr/bin/env python</div><div class="line"># coding:utf-8</div><div class="line">import subprocess</div><div class="line">word = &quot;test.doc&quot;</div><div class="line">output = subprocess.check_output([&quot;antiword&quot;, word])</div><div class="line">print(output)</div><div class="line"></div><div class="line">作者：Jun</div><div class="line">链接：https://www.zhihu.com/question/56834115/answer/158115736</div><div class="line">来源：知乎</div><div class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</div></pre></td></tr></table></figure>
<p><a href="https://www.zhihu.com/question/56834115/answer/150658178" target="_blank" rel="external">用LibreOffice(Ubuntu自带)直接转docx再用python-docx，蠢了点但还能用</a></p>
<h1 id="PPTX"><a href="#PPTX" class="headerlink" title="PPTX"></a>PPTX</h1><p>pip install python-pptx</p>
<p>安装第三方库<a href="https://python-pptx.readthedocs.io/en/latest/index.html" target="_blank" rel="external">python-pptx</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pptx <span class="keyword">import</span> Presentation</div><div class="line">ppt = Presentation(<span class="string">'1.pptx'</span>)</div><div class="line">text_runs = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> slide <span class="keyword">in</span> prs.slides:</div><div class="line">    <span class="keyword">for</span> shape <span class="keyword">in</span> slide.shapes:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> shape.has_text_frame:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">for</span> paragraph <span class="keyword">in</span> shape.text_frame.paragraphs:</div><div class="line">            <span class="keyword">for</span> run <span class="keyword">in</span> paragraph.runs:</div><div class="line">                text_runs.append(run.text)</div><div class="line"><span class="keyword">print</span> text_runs</div></pre></td></tr></table></figure>
<p>xls2csv</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;PDF&quot;&gt;&lt;a href=&quot;#PDF&quot; class=&quot;headerlink&quot; title=&quot;PDF&quot;&gt;&lt;/a&gt;PDF&lt;/h1&gt;&lt;h3 id=&quot;1-安装PDFMiner&quot;&gt;&lt;a href=&quot;#1-安装PDFMiner&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="python" scheme="http://www.pirrla.cn/categories/python/"/>
    
    
      <category term="python" scheme="http://www.pirrla.cn/tags/python/"/>
    
  </entry>
  
</feed>
